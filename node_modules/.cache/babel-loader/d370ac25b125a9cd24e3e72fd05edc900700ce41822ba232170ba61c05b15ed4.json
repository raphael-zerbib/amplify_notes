{"ast":null,"code":"function isTokenExpired(_ref) {\n  let {\n    expiresAt,\n    clockDrift\n  } = _ref;\n  const currentTime = Date.now();\n  return currentTime + clockDrift > expiresAt;\n}\nclass AuthClass {\n  /**\n   * Configure Auth category\n   *\n   * @internal\n   *\n   * @param authResourcesConfig - Resources configurations required by Auth providers.\n   * @param authOptions - Client options used by library\n   *\n   * @returns void\n   */\n  configure(authResourcesConfig, authOptions) {\n    this.authConfig = authResourcesConfig;\n    this.authOptions = authOptions;\n  }\n  /**\n   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n   * with `{ forceRefresh: true }` input.\n   *\n   * @param options - Options configuring the fetch behavior.\n   *\n   * @returns Promise of current auth session {@link AuthSession}.\n   */\n  async fetchAuthSession() {\n    var _credentialsAndIdenti, _credentialsAndIdenti2;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let credentialsAndIdentityId;\n    let userSub;\n    // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n    const tokens = await this.getTokens(options);\n    if (tokens) {\n      var _tokens$accessToken, _this$authOptions;\n      userSub = (_tokens$accessToken = tokens.accessToken) === null || _tokens$accessToken === void 0 || (_tokens$accessToken = _tokens$accessToken.payload) === null || _tokens$accessToken === void 0 ? void 0 : _tokens$accessToken.sub;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await ((_this$authOptions = this.authOptions) === null || _this$authOptions === void 0 || (_this$authOptions = _this$authOptions.credentialsProvider) === null || _this$authOptions === void 0 ? void 0 : _this$authOptions.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        tokens,\n        authenticated: true,\n        forceRefresh: options.forceRefresh\n      }));\n    } else {\n      var _this$authOptions2;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await ((_this$authOptions2 = this.authOptions) === null || _this$authOptions2 === void 0 || (_this$authOptions2 = _this$authOptions2.credentialsProvider) === null || _this$authOptions2 === void 0 ? void 0 : _this$authOptions2.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        authenticated: false,\n        forceRefresh: options.forceRefresh\n      }));\n    }\n    return {\n      tokens,\n      credentials: (_credentialsAndIdenti = credentialsAndIdentityId) === null || _credentialsAndIdenti === void 0 ? void 0 : _credentialsAndIdenti.credentials,\n      identityId: (_credentialsAndIdenti2 = credentialsAndIdentityId) === null || _credentialsAndIdenti2 === void 0 ? void 0 : _credentialsAndIdenti2.identityId,\n      userSub\n    };\n  }\n  async clearCredentials() {\n    var _this$authOptions3;\n    await ((_this$authOptions3 = this.authOptions) === null || _this$authOptions3 === void 0 || (_this$authOptions3 = _this$authOptions3.credentialsProvider) === null || _this$authOptions3 === void 0 ? void 0 : _this$authOptions3.clearCredentialsAndIdentityId());\n  }\n  async getTokens(options) {\n    var _await$this$authOptio, _this$authOptions4;\n    return (_await$this$authOptio = await ((_this$authOptions4 = this.authOptions) === null || _this$authOptions4 === void 0 || (_this$authOptions4 = _this$authOptions4.tokenProvider) === null || _this$authOptions4 === void 0 ? void 0 : _this$authOptions4.getTokens(options))) !== null && _await$this$authOptio !== void 0 ? _await$this$authOptio : undefined;\n  }\n}\nexport { AuthClass, isTokenExpired };","map":{"version":3,"names":["isTokenExpired","_ref","expiresAt","clockDrift","currentTime","Date","now","AuthClass","configure","authResourcesConfig","authOptions","authConfig","fetchAuthSession","_credentialsAndIdenti","_credentialsAndIdenti2","options","arguments","length","undefined","credentialsAndIdentityId","userSub","tokens","getTokens","_tokens$accessToken","_this$authOptions","accessToken","payload","sub","credentialsProvider","getCredentialsAndIdentityId","authenticated","forceRefresh","_this$authOptions2","credentials","identityId","clearCredentials","_this$authOptions3","clearCredentialsAndIdentityId","_await$this$authOptio","_this$authOptions4","tokenProvider"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/core/src/singleton/Auth/index.ts"],"sourcesContent":["export function isTokenExpired({ expiresAt, clockDrift, }) {\n    const currentTime = Date.now();\n    return currentTime + clockDrift > expiresAt;\n}\nexport class AuthClass {\n    /**\n     * Configure Auth category\n     *\n     * @internal\n     *\n     * @param authResourcesConfig - Resources configurations required by Auth providers.\n     * @param authOptions - Client options used by library\n     *\n     * @returns void\n     */\n    configure(authResourcesConfig, authOptions) {\n        this.authConfig = authResourcesConfig;\n        this.authOptions = authOptions;\n    }\n    /**\n     * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n     * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n     * with `{ forceRefresh: true }` input.\n     *\n     * @param options - Options configuring the fetch behavior.\n     *\n     * @returns Promise of current auth session {@link AuthSession}.\n     */\n    async fetchAuthSession(options = {}) {\n        let credentialsAndIdentityId;\n        let userSub;\n        // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n        const tokens = await this.getTokens(options);\n        if (tokens) {\n            userSub = tokens.accessToken?.payload?.sub;\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    tokens,\n                    authenticated: true,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        else {\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    authenticated: false,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        return {\n            tokens,\n            credentials: credentialsAndIdentityId?.credentials,\n            identityId: credentialsAndIdentityId?.identityId,\n            userSub,\n        };\n    }\n    async clearCredentials() {\n        await this.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();\n    }\n    async getTokens(options) {\n        return ((await this.authOptions?.tokenProvider?.getTokens(options)) ?? undefined);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}