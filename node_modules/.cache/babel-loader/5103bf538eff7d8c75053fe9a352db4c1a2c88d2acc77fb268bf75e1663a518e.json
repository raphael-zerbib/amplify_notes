{"ast":null,"code":"import { InternalAPI } from '@aws-amplify/api/internals';\nimport { ConsoleLogger, Hub, Cache, Amplify } from '@aws-amplify/core';\nimport { setAutoFreeze, enablePatches, immerable, produce } from 'immer';\nimport { BackgroundProcessManager, amplifyUuid } from '@aws-amplify/core/internals/utils';\nimport { Observable, filter } from 'rxjs';\nimport { defaultAuthStrategy } from '../authModeStrategies/defaultAuthStrategy.mjs';\nimport { multiAuthStrategy } from '../authModeStrategies/multiAuthStrategy.mjs';\nimport { ModelPredicateCreator, isPredicatesAll } from '../predicates/index.mjs';\nimport { ExclusiveStorage } from '../storage/storage.mjs';\nimport { ModelRelationship } from '../storage/relationship.mjs';\nimport { SyncEngine, ControlMessage } from '../sync/index.mjs';\nimport { isIdentifierObject, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isSchemaModelWithAttributes, isGraphQLScalarType, GraphQLScalarType } from '../types.mjs';\nimport { isNode } from './utils.mjs';\nimport { monotonicUlidFactory, USER, establishRelationAndKeys, isModelConstructor, extractPrimaryKeyFieldNames, registerNonModelClass, errorMessages, inMemoryPagination, extractPrimaryKeysAndValues, DeferredCallbackResolver, isIdManaged, isIdOptionallyManaged, mergePatches, STORAGE, SYNC, DATASTORE, sortCompareFunction, getTimestampFields, isNullOrUndefined } from '../util.mjs';\nimport { recursivePredicateFor, internals, predicateFor } from '../predicates/next.mjs';\nimport { getIdentifierValue } from '../sync/utils.mjs';\nimport { ModelSortPredicateCreator } from '../predicates/sort.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nsetAutoFreeze(true);\nenablePatches();\nconst logger = new ConsoleLogger('DataStore');\nconst ulid = monotonicUlidFactory(Date.now());\nconst SETTING_SCHEMA_VERSION = 'schemaVersion';\nlet schema;\nconst modelNamespaceMap = new WeakMap();\n/**\n * Stores data for crafting the correct update mutation input for a model.\n *\n * - `Patch[]` - array of changed fields and metadata.\n * - `PersistentModel` - the source model, used for diffing object-type fields.\n */\nconst modelPatchesMap = new WeakMap();\nconst getModelDefinition = modelConstructor => {\n  const namespace = modelNamespaceMap.get(modelConstructor);\n  const definition = namespace ? schema.namespaces[namespace].models[modelConstructor.name] : undefined;\n  return definition;\n};\n/**\n * Determines whether the given object is a Model Constructor that DataStore can\n * safely use to construct objects and discover related metadata.\n *\n * @param obj The object to test.\n */\nconst isValidModelConstructor = obj => {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nconst namespaceResolver = modelConstructor => {\n  const resolver = modelNamespaceMap.get(modelConstructor);\n  if (!resolver) {\n    throw new Error(`Namespace Resolver for '${modelConstructor.name}' not found! This is probably a bug in '@amplify-js/datastore'.`);\n  }\n  return resolver;\n};\n/**\n * Creates a predicate without any conditions that can be passed to customer\n * code to have conditions added to it.\n *\n * For example, in this query:\n *\n * ```ts\n * await DataStore.query(\n * \tModel,\n * \titem => item.field.eq('value')\n * );\n * ```\n *\n * `buildSeedPredicate(Model)` is used to create `item`, which is passed to the\n * predicate function, which in turn uses that \"seed\" predicate (`item`) to build\n * a predicate tree.\n *\n * @param modelConstructor The model the predicate will query.\n */\nconst buildSeedPredicate = modelConstructor => {\n  if (!modelConstructor) throw new Error('Missing modelConstructor');\n  const modelSchema = getModelDefinition(modelConstructor);\n  if (!modelSchema) throw new Error('Missing modelSchema');\n  const pks = extractPrimaryKeyFieldNames(modelSchema);\n  if (!pks) throw new Error('Could not determine PK');\n  return recursivePredicateFor({\n    builder: modelConstructor,\n    schema: modelSchema,\n    pkField: pks\n  });\n};\n// exporting syncClasses for testing outbox.test.ts\nlet syncClasses;\nlet userClasses;\nlet dataStoreClasses;\nlet storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nconst modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nvar ModelAttachment;\n(function (ModelAttachment) {\n  /**\n   * Model doesn't lazy load from any data source.\n   *\n   * Related entity properties provided at instantiation are returned\n   * via the respective lazy interfaces when their properties are invoked.\n   */\n  ModelAttachment[\"Detached\"] = \"Detached\";\n  /**\n   * Model lazy loads from the global DataStore.\n   */\n  ModelAttachment[\"DataStore\"] = \"DataStore\";\n  /**\n   * Demonstrative. Not yet implemented.\n   */\n  ModelAttachment[\"API\"] = \"API\";\n})(ModelAttachment || (ModelAttachment = {}));\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nconst attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nfunction attached(result, attachment) {\n  if (Array.isArray(result)) {\n    result.map(record => attached(record, attachment));\n  } else {\n    result && attachedModelInstances.set(result, attachment);\n  }\n  return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nconst getAttachment = instance => {\n  return attachedModelInstances.has(instance) ? attachedModelInstances.get(instance) : ModelAttachment.Detached;\n};\nconst initSchema = userSchema => {\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n  checkSchemaCodegenVersion(userSchema.codegenVersion);\n  const internalUserNamespace = {\n    name: USER,\n    ...userSchema\n  };\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  const dataStoreNamespace = getNamespace();\n  const storageNamespace = ExclusiveStorage.getNamespace();\n  const syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: {\n      [dataStoreNamespace.name]: dataStoreNamespace,\n      [internalUserNamespace.name]: internalUserNamespace,\n      [storageNamespace.name]: storageNamespace,\n      [syncNamespace.name]: syncNamespace\n    },\n    version: userSchema.version,\n    codegenVersion: userSchema.codegenVersion\n  };\n  Object.keys(schema.namespaces).forEach(namespace => {\n    const [relations, keys] = establishRelationAndKeys(schema.namespaces[namespace]);\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    const modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(model => {\n      const connectedModels = [];\n      Object.values(model.fields).filter(field => field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name).forEach(field => connectedModels.push(field.type.model));\n      modelAssociations.set(model.name, connectedModels);\n      // Precompute model info (such as pk fields) so that downstream schema consumers\n      // (such as predicate builders) don't have to reach back into \"DataStore\" space\n      // to go looking for it.\n      Object.values(model.fields).forEach(field => {\n        const relatedModel = userClasses[field.type.model];\n        if (isModelConstructor(relatedModel)) {\n          Object.defineProperty(field.type, 'modelConstructor', {\n            get: () => {\n              const relatedModelDefinition = getModelDefinition(relatedModel);\n              if (!relatedModelDefinition) throw new Error(`Could not find model definition for ${relatedModel.name}`);\n              return {\n                builder: relatedModel,\n                schema: relatedModelDefinition,\n                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition)\n              };\n            }\n          });\n        }\n      });\n      // compatibility with legacy/pre-PK codegen for lazy loading to inject\n      // index fields into the model definition.\n      // definition.cloudFields = { ...definition.fields };\n      const indexes = schema.namespaces[namespace].relationships[model.name].indexes;\n      const indexFields = new Set();\n      for (const index of indexes) {\n        for (const indexField of index[1]) {\n          indexFields.add(indexField);\n        }\n      }\n      model.allFields = {\n        ...Object.fromEntries([...indexFields.values()].map(name => [name, {\n          name,\n          type: 'ID',\n          isArray: false\n        }])),\n        ...model.fields\n      };\n    });\n    const result = new Map();\n    let count = 1000;\n    while (count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n      count--;\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n      for (const modelName of Array.from(modelAssociations.keys())) {\n        const parents = modelAssociations.get(modelName);\n        if (parents?.every(x => result.has(x))) {\n          result.set(modelName, parents);\n        }\n      }\n      Array.from(result.keys()).forEach(x => modelAssociations.delete(x));\n    }\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nconst checkSchemaInitialized = () => {\n  if (schema === undefined) {\n    const message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nconst checkSchemaCodegenVersion = codegenVersion => {\n  const majorVersion = 3;\n  const minorVersion = 2;\n  let isValid = false;\n  try {\n    const versionParts = codegenVersion.split('.');\n    const [major, minor, patch, patchrevision] = versionParts;\n    isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n  } catch (err) {\n    console.log(`Error parsing codegen version: ${codegenVersion}\\n${err}`);\n  }\n  if (!isValid) {\n    const message = `Models were generated with an unsupported version of codegen. Codegen artifacts are from ${codegenVersion || 'an unknown version'}, whereas ^${majorVersion}.${minorVersion}.0 is required. ` + \"Update to the latest CLI and run 'amplify codegen models'.\";\n    logger.error(message);\n    throw new Error(message);\n  }\n};\nconst createTypeClasses = namespace => {\n  const classes = {};\n  Object.entries(namespace.models).forEach(([modelName, modelDefinition]) => {\n    const clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(([typeName, typeDefinition]) => {\n    const clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nconst instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\nconst validateModelFields = modelDefinition => (k, v) => {\n  const fieldDefinition = modelDefinition.fields[k];\n  if (fieldDefinition !== undefined) {\n    const {\n      type,\n      isRequired,\n      isArrayNullable,\n      name,\n      isArray\n    } = fieldDefinition;\n    const timestamps = isSchemaModelWithAttributes(modelDefinition) ? getTimestampFields(modelDefinition) : {};\n    const isTimestampField = !!timestamps[name];\n    if ((!isArray && isRequired || isArray && !isArrayNullable) && !isTimestampField && (v === null || v === undefined)) {\n      throw new Error(`Field ${name} is required`);\n    }\n    if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n      const keys = extractPrimaryKeyFieldNames(modelDefinition);\n      if (keys.includes(k) && v === '') {\n        logger.error(errorMessages.idEmptyString, {\n          k,\n          value: v\n        });\n        throw new Error(errorMessages.idEmptyString);\n      }\n    }\n    if (isGraphQLScalarType(type)) {\n      const jsType = GraphQLScalarType.getJSType(type);\n      const validateScalar = GraphQLScalarType.getValidationFunction(type);\n      if (type === 'AWSJSON') {\n        if (typeof v === jsType) {\n          return;\n        }\n        if (typeof v === 'string') {\n          try {\n            JSON.parse(v);\n            return;\n          } catch (error) {\n            throw new Error(`Field ${name} is an invalid JSON object. ${v}`);\n          }\n        }\n      }\n      if (isArray) {\n        let errorTypeText = jsType;\n        if (!isRequired) {\n          errorTypeText = `${jsType} | null | undefined`;\n        }\n        if (!Array.isArray(v) && !isArrayNullable) {\n          throw new Error(`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`);\n        }\n        if (!isNullOrUndefined(v) && v.some(e => isNullOrUndefined(e) ? isRequired : typeof e !== jsType)) {\n          const elemTypes = v.map(e => e === null ? 'null' : typeof e).join(',');\n          throw new Error(`All elements in the ${name} array should be of type ${errorTypeText}, [${elemTypes}] received. ${v}`);\n        }\n        if (validateScalar && !isNullOrUndefined(v)) {\n          const validationStatus = v.map(e => {\n            if (!isNullOrUndefined(e)) {\n              return validateScalar(e);\n            } else if (isNullOrUndefined(e) && !isRequired) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n          if (!validationStatus.every(s => s)) {\n            throw new Error(`All elements in the ${name} array should be of type ${type}, validation failed for one or more elements. ${v}`);\n          }\n        }\n      } else if (!isRequired && v === undefined) {\n        return;\n      } else if (typeof v !== jsType && v !== null) {\n        throw new Error(`Field ${name} should be of type ${jsType}, ${typeof v} received. ${v}`);\n      } else if (!isNullOrUndefined(v) && validateScalar && !validateScalar(v) // TODO: why never, TS ... why ...\n      ) {\n        throw new Error(`Field ${name} should be of type ${type}, validation failed. ${v}`);\n      }\n    } else if (isNonModelFieldType(type)) {\n      // do not check non model fields if undefined or null\n      if (!isNullOrUndefined(v)) {\n        const subNonModelDefinition = schema.namespaces.user.nonModels[type.nonModel];\n        const modelValidator = validateModelFields(subNonModelDefinition);\n        if (isArray) {\n          let errorTypeText = type.nonModel;\n          if (!isRequired) {\n            errorTypeText = `${type.nonModel} | null | undefined`;\n          }\n          if (!Array.isArray(v)) {\n            throw new Error(`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`);\n          }\n          v.forEach(item => {\n            if (isNullOrUndefined(item) && isRequired || typeof item !== 'object' && typeof item !== 'undefined') {\n              throw new Error(`All elements in the ${name} array should be of type ${type.nonModel}, [${typeof item}] received. ${item}`);\n            }\n            if (!isNullOrUndefined(item)) {\n              Object.keys(subNonModelDefinition.fields).forEach(subKey => {\n                modelValidator(subKey, item[subKey]);\n              });\n            }\n          });\n        } else {\n          if (typeof v !== 'object') {\n            throw new Error(`Field ${name} should be of type ${type.nonModel}, ${typeof v} recieved. ${v}`);\n          }\n          Object.keys(subNonModelDefinition.fields).forEach(subKey => {\n            modelValidator(subKey, v[subKey]);\n          });\n        }\n      }\n    }\n  }\n};\nconst castInstanceType = (modelDefinition, k, v) => {\n  const {\n    isArray,\n    type\n  } = modelDefinition.fields[k] || {};\n  // attempt to parse stringified JSON\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch {\n      // if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  }\n  // cast from numeric representation of boolean to JS boolean\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n  return v;\n};\n/**\n * Records the patches (as if against an empty object) used to initialize\n * an instance of a Model. This can be used for determining which fields to\n * send to the cloud durnig a CREATE mutation.\n */\nconst initPatches = new WeakMap();\n/**\n * Attempts to apply type-aware, casted field values from a given `init`\n * object to the given `draft`.\n *\n * @param init The initialization object to extract field values from.\n * @param modelDefinition The definition describing the target object shape.\n * @param draft The draft to apply field values to.\n */\nconst initializeInstance = (init, modelDefinition, draft) => {\n  const modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(([k, v]) => {\n    const parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n/**\n * Updates a draft to standardize its customer-defined fields so that they are\n * consistent with the data as it would look after having been synchronized from\n * Cloud storage.\n *\n * The exceptions to this are:\n *\n * 1. Non-schema/Internal [sync] metadata fields.\n * 2. Cloud-managed fields, which are `null` until set by cloud storage.\n *\n * This function should be expanded if/when deviations between canonical Cloud\n * storage data and locally managed data are found. For now, the known areas\n * that require normalization are:\n *\n * 1. Ensuring all non-metadata fields are *defined*. (I.e., turn `undefined` -> `null`.)\n *\n * @param modelDefinition Definition for the draft. Used to discover all fields.\n * @param draft The instance draft to apply normalizations to.\n */\nconst normalize = (modelDefinition, draft) => {\n  for (const k of Object.keys(modelDefinition.fields)) {\n    if (draft[k] === undefined) draft[k] = null;\n  }\n};\nconst createModelClass = modelDefinition => {\n  const clazz = class Model {\n    constructor(init) {\n      // we create a base instance first so we can distinguish which fields were explicitly\n      // set by customer code versus those set by normalization. only those fields\n      // which are explicitly set by customers should be part of create mutations.\n      let patches = [];\n      const baseInstance = produce(this, draft => {\n        initializeInstance(init, modelDefinition, draft);\n        // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n        const isInternallyInitialized = instancesMetadata.has(init);\n        const modelInstanceMetadata = isInternallyInitialized ? init : {};\n        const {\n          id: _id\n        } = modelInstanceMetadata;\n        if (isIdManaged(modelDefinition)) {\n          const isInternalModel = _id !== null && _id !== undefined;\n          const id = isInternalModel ? _id : modelDefinition.syncable ? amplifyUuid() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || amplifyUuid();\n        }\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n        const {\n          _version,\n          _lastChangedAt,\n          _deleted\n        } = modelInstanceMetadata;\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      }, p => patches = p);\n      // now that we have a list of patches that encapsulate the explicit, customer-provided\n      // fields, we can normalize. patches from normalization are ignored, because the changes\n      // are only create to provide a consistent view of the data for fields pre/post sync\n      // where possible. (not all fields can be normalized pre-sync, because they're generally\n      // \"cloud managed\" fields, like createdAt and updatedAt.)\n      const normalized = produce(baseInstance, draft => normalize(modelDefinition, draft));\n      initPatches.set(normalized, patches);\n      return normalized;\n    }\n    static copyOf(source, fn) {\n      const modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n      if (!isValidModelConstructor(modelConstructor)) {\n        const msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source\n        });\n        throw new Error(msg);\n      }\n      let patches = [];\n      const model = produce(source, draft => {\n        fn(draft);\n        const keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n        // Keys are immutable\n        keyNames.forEach(key => {\n          if (draft[key] !== source[key]) {\n            logger.warn(`copyOf() does not update PK fields. The '${key}' update is being ignored.`, {\n              source\n            });\n          }\n          draft[key] = source[key];\n        });\n        const modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(([k, v]) => {\n          const parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n        normalize(modelDefinition, draft);\n      }, p => patches = p);\n      const hasExistingPatches = modelPatchesMap.has(source);\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          const [existingPatches, existingSource] = modelPatchesMap.get(source);\n          const mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      } else {\n        // always register patches when performing a copyOf, even if the\n        // patches list is empty. this allows `save()` to recognize when an\n        // instance is the result of a `copyOf()`. without more significant\n        // refactoring, this is the only way for `save()` to know which\n        // diffs (patches) are relevant for `storage` to use in building\n        // the list of \"changed\" fields for mutations.\n        modelPatchesMap.set(model, [[], source]);\n      }\n      return attached(model, ModelAttachment.DataStore);\n    }\n    // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n    static fromJSON(json) {\n      if (Array.isArray(json)) {\n        return json.map(init => this.fromJSON(init));\n      }\n      const instance = modelInstanceCreator(clazz, json);\n      const modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(([k, v]) => {\n        modelValidator(k, v);\n      });\n      return attached(instance, ModelAttachment.DataStore);\n    }\n  };\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  // Add getters/setters for relationship fields.\n  //  getter - for lazy loading\n  //  setter - for FK management\n  const allModelRelationships = ModelRelationship.allFrom({\n    builder: clazz,\n    schema: modelDefinition,\n    pkField: extractPrimaryKeyFieldNames(modelDefinition)\n  });\n  for (const relationship of allModelRelationships) {\n    const field = relationship.field;\n    Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n      set(model) {\n        if (!(typeof model === 'object' || typeof model === 'undefined')) return;\n        // if model is undefined or null, the connection should be removed\n        if (model) {\n          // Avoid validation error when processing AppSync response with nested\n          // selection set. Nested entitites lack version field and can not be validated\n          // TODO: explore a more reliable method to solve this\n          if (model.hasOwnProperty('_version')) {\n            const modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n              const msg = `Value passed to ${modelDefinition.name}.${field} is not a valid instance of a model`;\n              logger.error(msg, {\n                model\n              });\n              throw new Error(msg);\n            }\n            if (modelConstructor.name.toLowerCase() !== relationship.remoteModelConstructor.name.toLowerCase()) {\n              const msg = `Value passed to ${modelDefinition.name}.${field} is not an instance of ${relationship.remoteModelConstructor.name}`;\n              logger.error(msg, {\n                model\n              });\n              throw new Error(msg);\n            }\n          }\n        }\n        // if the relationship can be managed automagically, set the FK's\n        if (relationship.isComplete) {\n          for (let i = 0; i < relationship.localJoinFields.length; i++) {\n            this[relationship.localJoinFields[i]] = model?.[relationship.remoteJoinFields[i]];\n          }\n          const instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n          instanceMemos[field] = model || undefined;\n        }\n      },\n      get() {\n        /**\n         * Bucket for holding related models instances specific to `this` instance.\n         */\n        const instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n        // if the memos already has a result for this field, we'll use it.\n        // there is no \"cache\" invalidation of any kind; memos are permanent to\n        // keep an immutable perception of the instance.\n        if (!instanceMemos.hasOwnProperty(field)) {\n          // before we populate the memo, we need to know where to look for relatives.\n          // today, this only supports DataStore. Models aren't managed elsewhere in Amplify.\n          if (getAttachment(this) === ModelAttachment.DataStore) {\n            // when we fetch the results using a query constructed under the guidance\n            // of the relationship metadata, we DO NOT AWAIT resolution. we want to\n            // drop the promise into the memo's synchronously, eliminating the chance\n            // for a race.\n            const resultPromise = instance.query(relationship.remoteModelConstructor, base => base.and(q => {\n              return relationship.remoteJoinFields.map((field, index) => {\n                // TODO: anything we can use instead of `any` here?\n                return q[field].eq(this[relationship.localJoinFields[index]]);\n              });\n            }));\n            // results in hand, how we return them to the caller depends on the relationship type.\n            if (relationship.type === 'HAS_MANY') {\n              // collections should support async iteration, even though we don't\n              // leverage it fully [yet].\n              instanceMemos[field] = new AsyncCollection(resultPromise);\n            } else {\n              // non-collections should only ever return 1 value *or nothing*.\n              // if we have more than 1 record, something's amiss. it's not our job\n              // pick a result for the customer. it's our job to say \"something's wrong.\"\n              instanceMemos[field] = resultPromise.then(rows => {\n                if (rows.length > 1) {\n                  // should never happen for a HAS_ONE or BELONGS_TO.\n                  const err = new Error(`\n\t\t\t\t\t\t\t\t\tData integrity error.\n\t\t\t\t\t\t\t\t\tToo many records found for a HAS_ONE/BELONGS_TO field '${modelDefinition.name}.${field}'\n\t\t\t\t\t\t\t\t`);\n                  console.error(err);\n                  throw err;\n                } else {\n                  return rows[0];\n                }\n              });\n            }\n          } else if (getAttachment(this) === ModelAttachment.API) {\n            throw new Error('Lazy loading from API is not yet supported!');\n          } else {\n            if (relationship.type === 'HAS_MANY') {\n              return new AsyncCollection([]);\n            } else {\n              return Promise.resolve(undefined);\n            }\n          }\n        }\n        return instanceMemos[field];\n      }\n    });\n  }\n  return clazz;\n};\n/**\n * An eventually loaded related model instance.\n */\nclass AsyncItem extends Promise {}\n/**\n * A collection of related model instances.\n *\n * This collection can be async-iterated or turned directly into an array using `toArray()`.\n */\nclass AsyncCollection {\n  constructor(values) {\n    this.values = values;\n  }\n  /**\n   * Facilitates async iteration.\n   *\n   * ```ts\n   * for await (const item of collection) {\n   *   handle(item)\n   * }\n   * ```\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   */\n  [Symbol.asyncIterator]() {\n    let values;\n    let index = 0;\n    return {\n      next: async () => {\n        if (!values) values = await this.values;\n        if (index < values.length) {\n          const result = {\n            value: values[index],\n            done: false\n          };\n          index++;\n          return result;\n        }\n        return {\n          value: null,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * Turns the collection into an array, up to the amount specified in `max` param.\n   *\n   * ```ts\n   * const all = await collection.toArray();\n   * const first100 = await collection.toArray({max: 100});\n   * ```\n   */\n  async toArray({\n    max = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    const output = [];\n    let i = 0;\n    for await (const element of this) {\n      if (i < max) {\n        output.push(element);\n        i++;\n      } else {\n        break;\n      }\n    }\n    return output;\n  }\n}\nconst checkReadOnlyPropertyOnCreate = (draft, modelDefinition) => {\n  const modelKeys = Object.keys(draft);\n  const {\n    fields\n  } = modelDefinition;\n  modelKeys.forEach(key => {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(`${key} is read-only.`);\n    }\n  });\n};\nconst checkReadOnlyPropertyOnUpdate = (patches, modelDefinition) => {\n  const patchArray = patches.map(p => [p.path[0], p.value]);\n  const {\n    fields\n  } = modelDefinition;\n  patchArray.forEach(([key, val]) => {\n    if (!val || !fields[key]) return;\n    if (fields[key].isReadOnly) {\n      throw new Error(`${key} is read-only.`);\n    }\n  });\n};\nconst createNonModelClass = typeDefinition => {\n  const clazz = class Model {\n    constructor(init) {\n      const instance = produce(this, draft => {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n  };\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n  const {\n    localModel,\n    modelConstructor,\n    remoteModel\n  } = conflictData;\n  const {\n    _version\n  } = remoteModel;\n  return modelInstanceCreator(modelConstructor, {\n    ...localModel,\n    _version\n  });\n}\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  let result;\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n    case USER:\n      result = userClasses[modelName];\n      break;\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n    default:\n      throw new Error(`Invalid namespace: ${namespaceName}`);\n  }\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    const msg = `Model name is not valid for namespace. modelName: ${modelName}, namespace: ${namespaceName}`;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nasync function checkSchemaVersion(storage, version) {\n  const Setting = dataStoreClasses.Setting;\n  const modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n  await storage.runExclusive(async s => {\n    const [schemaVersionSetting] = await s.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {\n      and: {\n        key: {\n          eq: SETTING_SCHEMA_VERSION\n        }\n      }\n    }), {\n      page: 0,\n      limit: 1\n    });\n    if (schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined) {\n      const storedValue = JSON.parse(schemaVersionSetting.value);\n      if (storedValue !== version) {\n        await s.clear(false);\n      }\n    } else {\n      await s.save(modelInstanceCreator(Setting, {\n        key: SETTING_SCHEMA_VERSION,\n        value: JSON.stringify(version)\n      }));\n    }\n  });\n}\nlet syncSubscription;\nfunction getNamespace() {\n  const namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\n// TODO: How can we get rid of the non-null assertions?\n// https://github.com/aws-amplify/amplify-js/pull/10477/files#r1007363485\nclass DataStore {\n  constructor() {\n    // reference to configured category instances. Used for preserving SSR context\n    this.InternalAPI = InternalAPI;\n    this.Cache = Cache;\n    // Non-null assertions (bang operator) have been added to most of these properties\n    // to make TS happy. These properties are all expected to be set immediately after\n    // construction.\n    // TODO: Refactor to use proper DI if possible. If not possible, change these to\n    // optionals and implement conditional checks throughout. Rinse/repeat on all\n    // sync engine processors, storage engine, adapters, etc..\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n    // object that gets passed to descendent classes. Allows us to pass these down by reference\n    this.amplifyContext = {\n      InternalAPI: this.InternalAPI\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 2. Loads the schema and records metadata.\n     * 3. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n    this.start = async () => {\n      return this.runningProcesses.add(async () => {\n        this.state = DataStoreState.Starting;\n        if (this.initialized === undefined) {\n          logger.debug('Starting DataStore');\n          this.initialized = new Promise((res, rej) => {\n            this.initResolve = res;\n            this.initReject = rej;\n          });\n        } else {\n          await this.initialized;\n          return;\n        }\n        this.storage = new ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n        await this.storage.init();\n        checkSchemaInitialized();\n        await checkSchemaVersion(this.storage, schema.version);\n        const {\n          aws_appsync_graphqlEndpoint\n        } = this.amplifyConfig;\n        if (aws_appsync_graphqlEndpoint) {\n          logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n          this.syncPredicates = await this.processSyncExpressions();\n          this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n          const fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60; // fullSyncInterval from param is in minutes\n          syncSubscription = this.sync.start({\n            fullSyncInterval: fullSyncIntervalInMilliseconds\n          }).subscribe({\n            next: ({\n              type,\n              data\n            }) => {\n              /**\n               * In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n               * In non-Node environments (the browser or React Native), we can begin returning data\n               * once subscriptions are in place.\n               */\n              const readyType = isNode() ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n              if (type === readyType) {\n                this.initResolve();\n              }\n              Hub.dispatch('datastore', {\n                event: type,\n                data\n              });\n            },\n            error: err => {\n              logger.warn('Sync error', err);\n              this.initReject();\n            }\n          });\n        } else {\n          logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n            config: this.amplifyConfig\n          });\n          this.initResolve();\n        }\n        await this.initialized;\n        this.state = DataStoreState.Running;\n      }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'));\n    };\n    this.query = async (modelConstructor, identifierOrCriteria, paginationProducer) => {\n      return this.runningProcesses.add(async () => {\n        await this.start();\n        let result;\n        if (!this.storage) {\n          throw new Error('No storage to query');\n        }\n        //#region Input validation\n        if (!isValidModelConstructor(modelConstructor)) {\n          const msg = 'Constructor is not for a valid model';\n          logger.error(msg, {\n            modelConstructor\n          });\n          throw new Error(msg);\n        }\n        if (typeof identifierOrCriteria === 'string') {\n          if (paginationProducer !== undefined) {\n            logger.warn('Pagination is ignored when querying by id');\n          }\n        }\n        const modelDefinition = getModelDefinition(modelConstructor);\n        if (!modelDefinition) {\n          throw new Error('Invalid model definition provided!');\n        }\n        const pagination = this.processPagination(modelDefinition, paginationProducer);\n        const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n        if (isQueryOne(identifierOrCriteria)) {\n          if (keyFields.length > 1) {\n            const msg = errorMessages.queryByPkWithCompositeKeyPresent;\n            logger.error(msg, {\n              keyFields\n            });\n            throw new Error(msg);\n          }\n          const predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, {\n            [keyFields[0]]: identifierOrCriteria\n          });\n          result = await this.storage.query(modelConstructor, predicate, pagination);\n        } else {\n          // Object is being queried using object literal syntax\n          if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n            const predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n            result = await this.storage.query(modelConstructor, predicate, pagination);\n          } else if (!identifierOrCriteria || isPredicatesAll(identifierOrCriteria)) {\n            result = await this.storage?.query(modelConstructor, undefined, pagination);\n          } else {\n            const seedPredicate = recursivePredicateFor({\n              builder: modelConstructor,\n              schema: modelDefinition,\n              pkField: extractPrimaryKeyFieldNames(modelDefinition)\n            });\n            const predicate = internals(identifierOrCriteria(seedPredicate));\n            result = await predicate.fetch(this.storage);\n            result = inMemoryPagination(result, pagination);\n          }\n        }\n        //#endregion\n        const returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n        return attached(returnOne ? result[0] : result, ModelAttachment.DataStore);\n      }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'));\n    };\n    this.save = async (model, condition) => {\n      return this.runningProcesses.add(async () => {\n        await this.start();\n        if (!this.storage) {\n          throw new Error('No storage to save to');\n        }\n        // Immer patches for constructing a correct update mutation input\n        // Allows us to only include changed fields for updates\n        const updatedPatchesTuple = modelPatchesMap.get(model);\n        // Immer patches for initial object construction. These are used if\n        // there are no `update` patches under the assumption we're performing\n        // a CREATE and wish to send only explicitly specified fields to the cloud.\n        const initPatchesTuple = initPatches.has(model) ? [initPatches.get(model), {}] : undefined;\n        // favor update patches over init/create patches, because init patches\n        // are ALWAYS present, whereas update patches are only present if copyOf\n        // was used to create the instance.\n        const patchesTuple = updatedPatchesTuple || initPatchesTuple;\n        const modelConstructor = model ? model.constructor : undefined;\n        if (!isValidModelConstructor(modelConstructor)) {\n          const msg = 'Object is not an instance of a valid model';\n          logger.error(msg, {\n            model\n          });\n          throw new Error(msg);\n        }\n        const modelDefinition = getModelDefinition(modelConstructor);\n        if (!modelDefinition) {\n          throw new Error('Model Definition could not be found for model');\n        }\n        const modelMeta = {\n          builder: modelConstructor,\n          schema: modelDefinition,\n          pkField: extractPrimaryKeyFieldNames(modelDefinition)\n        };\n        await this.storage.runExclusive(async s => {\n          // no enforcement for HAS_MANY on save, because the ~related~ entities\n          // hold the FK in that case.\n          const nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(r => r.type === 'BELONGS_TO');\n          for (const relationship of nonHasManyRelationships) {\n            const queryObject = relationship.createRemoteQueryObject(model);\n            if (queryObject !== null) {\n              const related = await s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject));\n              if (related.length === 0) {\n                throw new Error([`Data integrity error. You tried to save a ${modelDefinition.name} (${JSON.stringify(model)})`, `but the instance assigned to the \"${relationship.field}\" property`, `does not exist in the local database. If you're trying to create the related`, `\"${relationship.remoteDefinition?.name}\", you must save it independently first.`].join(' '));\n              }\n            }\n          }\n        });\n        const producedCondition = condition ? internals(condition(predicateFor(modelMeta))).toStoragePredicate() : undefined;\n        const [savedModel] = await this.storage.runExclusive(async s => {\n          await s.save(model, producedCondition, undefined, patchesTuple);\n          return s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model));\n        });\n        return attached(savedModel, ModelAttachment.DataStore);\n      }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'));\n    };\n    this.setConflictHandler = config => {\n      const {\n        DataStore: configDataStore\n      } = config;\n      const conflictHandlerIsDefault = () => this.conflictHandler === defaultConflictHandler;\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n      return this.conflictHandler || defaultConflictHandler;\n    };\n    this.setErrorHandler = config => {\n      const {\n        DataStore: configDataStore\n      } = config;\n      const errorHandlerIsDefault = () => this.errorHandler === defaultErrorHandler;\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n      return this.errorHandler || defaultErrorHandler;\n    };\n    this.delete = async (modelOrConstructor, identifierOrCriteria) => {\n      return this.runningProcesses.add(async () => {\n        await this.start();\n        if (!this.storage) {\n          throw new Error('No storage to delete from');\n        }\n        let condition;\n        if (!modelOrConstructor) {\n          const msg = 'Model or Model Constructor required';\n          logger.error(msg, {\n            modelOrConstructor\n          });\n          throw new Error(msg);\n        }\n        if (isValidModelConstructor(modelOrConstructor)) {\n          const modelConstructor = modelOrConstructor;\n          if (!identifierOrCriteria) {\n            const msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n            logger.error(msg, {\n              identifierOrCriteria\n            });\n            throw new Error(msg);\n          }\n          const modelDefinition = getModelDefinition(modelConstructor);\n          if (!modelDefinition) {\n            throw new Error('Could not find model definition for modelConstructor.');\n          }\n          if (typeof identifierOrCriteria === 'string') {\n            const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n            if (keyFields.length > 1) {\n              const msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n              logger.error(msg, {\n                keyFields\n              });\n              throw new Error(msg);\n            }\n            condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, {\n              [keyFields[0]]: identifierOrCriteria\n            });\n          } else {\n            if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n              condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n            } else {\n              condition = internals(identifierOrCriteria(predicateFor({\n                builder: modelConstructor,\n                schema: modelDefinition,\n                pkField: extractPrimaryKeyFieldNames(modelDefinition)\n              }))).toStoragePredicate();\n            }\n            if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n              const msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n              logger.error(msg, {\n                condition\n              });\n              throw new Error(msg);\n            }\n          }\n          const [deleted] = await this.storage.delete(modelConstructor, condition);\n          return attached(deleted, ModelAttachment.DataStore);\n        } else {\n          const model = modelOrConstructor;\n          const modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n          if (!isValidModelConstructor(modelConstructor)) {\n            const msg = 'Object is not an instance of a valid model';\n            logger.error(msg, {\n              model\n            });\n            throw new Error(msg);\n          }\n          const modelDefinition = getModelDefinition(modelConstructor);\n          if (!modelDefinition) {\n            throw new Error('Could not find model definition for modelConstructor.');\n          }\n          const pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n          if (identifierOrCriteria) {\n            if (typeof identifierOrCriteria !== 'function') {\n              const msg = 'Invalid criteria';\n              logger.error(msg, {\n                identifierOrCriteria\n              });\n              throw new Error(msg);\n            }\n            condition = internals(identifierOrCriteria(predicateFor({\n              builder: modelConstructor,\n              schema: modelDefinition,\n              pkField: extractPrimaryKeyFieldNames(modelDefinition)\n            }))).toStoragePredicate();\n          } else {\n            condition = pkPredicate;\n          }\n          const [[deleted]] = await this.storage.delete(model, condition);\n          return attached(deleted, ModelAttachment.DataStore);\n        }\n      }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'));\n    };\n    this.observe = (modelOrConstructor, identifierOrCriteria) => {\n      let executivePredicate;\n      const modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n      if (modelOrConstructor && modelConstructor === undefined) {\n        const model = modelOrConstructor;\n        const modelConstructor = model && Object.getPrototypeOf(model).constructor;\n        if (isValidModelConstructor(modelConstructor)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model,\n              identifierOrCriteria\n            });\n          }\n          return this.observe(modelConstructor, model.id);\n        } else {\n          const msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model\n          });\n          throw new Error(msg);\n        }\n      }\n      // observe should not accept object literal syntax\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        const msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        const msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        const msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor\n        });\n        throw new Error(msg);\n      }\n      if (modelConstructor && typeof identifierOrCriteria === 'string') {\n        const buildIdPredicate = seed => seed.id.eq(identifierOrCriteria);\n        executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n      } else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n        executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n      }\n      return new Observable(observer => {\n        let source;\n        this.runningProcesses.add(async () => {\n          await this.start();\n          // Filter the events returned by Storage according to namespace,\n          // append original element data, and subscribe to the observable\n          source = this.storage.observe(modelConstructor).pipe(filter(({\n            model\n          }) => namespaceResolver(model) === USER)).subscribe({\n            next: item => this.runningProcesses.isOpen && this.runningProcesses.add(async () => {\n              // the `element` doesn't necessarily contain all item details or\n              // have related records attached consistently with that of a query()\n              // result item. for consistency, we attach them here.\n              let message = item;\n              // as long as we're not dealing with a DELETE, we need to fetch a fresh\n              // item from storage to ensure it's fully populated.\n              if (item.opType !== 'DELETE') {\n                const modelDefinition = getModelDefinition(item.model);\n                const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                const primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                const freshElement = await this.query(item.model, primaryKeysAndValues);\n                message = {\n                  ...message,\n                  element: freshElement\n                };\n              }\n              if (!executivePredicate || (await executivePredicate.matches(message.element))) {\n                observer.next(message);\n              }\n            }, 'datastore observe message handler'),\n            error: err => observer.error(err),\n            complete: () => observer.complete()\n          });\n        }, 'datastore observe observable initialization').catch(this.handleAddProcError('DataStore.observe()')).catch(error => {\n          observer.error(error);\n        });\n        // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n        return this.runningProcesses.addCleaner(async () => {\n          if (source) {\n            source.unsubscribe();\n          }\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n    this.observeQuery = (model, criteria, options) => {\n      return new Observable(observer => {\n        const items = new Map();\n        const itemsChanged = new Map();\n        let deletedItemIds = [];\n        let handle;\n        // let predicate: ModelPredicate<T> | undefined;\n        let executivePredicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n        const generateAndEmitSnapshot = () => {\n          const snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        };\n        // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n        const limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        const {\n          sort\n        } = options || {};\n        const sortOptions = sort ? {\n          sort\n        } : undefined;\n        const modelDefinition = getModelDefinition(model);\n        if (!modelDefinition) {\n          throw new Error('Could not find model definition.');\n        }\n        if (model && typeof criteria === 'function') {\n          executivePredicate = internals(criteria(buildSeedPredicate(model)));\n        } else if (isPredicatesAll(criteria)) {\n          executivePredicate = undefined;\n        }\n        this.runningProcesses.add(async () => {\n          try {\n            // first, query and return any locally-available records\n            (await this.query(model, criteria, sortOptions)).forEach(item => {\n              const itemModelDefinition = getModelDefinition(model);\n              const idOrPk = getIdentifierValue(itemModelDefinition, item);\n              items.set(idOrPk, item);\n            });\n            // Observe the model and send a stream of updates (debounced).\n            // We need to post-filter results instead of passing criteria through\n            // to have visibility into items that move from in-set to out-of-set.\n            // We need to explicitly remove those items from the existing snapshot.\n            handle = this.observe(model).subscribe(({\n              element,\n              model,\n              opType\n            }) => this.runningProcesses.isOpen && this.runningProcesses.add(async () => {\n              const itemModelDefinition = getModelDefinition(model);\n              const idOrPk = getIdentifierValue(itemModelDefinition, element);\n              if (executivePredicate && !(await executivePredicate.matches(element))) {\n                if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                  // tracking as a \"deleted item\" will include the item in\n                  // page limit calculations and ensure it is removed from the\n                  // final items collection, regardless of which collection(s)\n                  // it is currently in. (I mean, it could be in both, right!?)\n                  deletedItemIds.push(idOrPk);\n                } else {\n                  // ignore updates for irrelevant/filtered items.\n                  return;\n                }\n              }\n              // Flag items which have been recently deleted\n              // NOTE: Merging of separate operations to the same model instance is handled upstream\n              // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n              // depends on the LATEST record (for a given id).\n              if (opType === 'DELETE') {\n                deletedItemIds.push(idOrPk);\n              } else {\n                itemsChanged.set(idOrPk, element);\n              }\n              const isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n              const limit = itemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n              if (limit || isSynced) {\n                limitTimerRace.resolve();\n              }\n              // kicks off every subsequent race as results sync down\n              limitTimerRace.start();\n            }, 'handle observeQuery observed event'));\n            // returns a set of initial/locally-available results\n            generateAndEmitSnapshot();\n          } catch (err) {\n            observer.error(err);\n          }\n        }, 'datastore observequery startup').catch(this.handleAddProcError('DataStore.observeQuery()')).catch(error => {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n        const generateSnapshot = () => {\n          const isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n          const itemsArray = [...Array.from(items.values()), ...Array.from(itemsChanged.values())];\n          items.clear();\n          itemsArray.forEach(item => {\n            const itemModelDefinition = getModelDefinition(model);\n            const idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          });\n          // remove deleted items from the final result set\n          deletedItemIds.forEach(idOrPk => items.delete(idOrPk));\n          const snapshot = Array.from(items.values());\n          // we sort after we merge the snapshots (items, itemsChanged)\n          // otherwise, the merge may not\n          if (options?.sort) {\n            sortItems(snapshot);\n          }\n          return {\n            items: snapshot,\n            isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n        const emitSnapshot = snapshot => {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot);\n          // reset the changed items sets\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n        const sortItems = itemsToSort => {\n          const modelDefinition = getModelDefinition(model);\n          const pagination = this.processPagination(modelDefinition, options);\n          const sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n          if (sortPredicates.length) {\n            const compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n        const hubCallback = ({\n          payload\n        }) => {\n          const {\n            event,\n            data\n          } = payload;\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && data?.model?.name === model.name) {\n            generateAndEmitSnapshot();\n            hubRemove();\n          }\n        };\n        const hubRemove = Hub.listen('datastore', hubCallback);\n        return this.runningProcesses.addCleaner(async () => {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        }, 'datastore observequery cleaner');\n      });\n    };\n    this.configure = (config = {}) => {\n      this.amplifyContext.InternalAPI = this.InternalAPI;\n      const {\n        DataStore: configDataStore,\n        authModeStrategyType: configAuthModeStrategyType,\n        conflictHandler: configConflictHandler,\n        errorHandler: configErrorHandler,\n        maxRecordsToSync: configMaxRecordsToSync,\n        syncPageSize: configSyncPageSize,\n        fullSyncInterval: configFullSyncInterval,\n        syncExpressions: configSyncExpressions,\n        authProviders: configAuthProviders,\n        storageAdapter: configStorageAdapter,\n        ...configFromAmplify\n      } = config;\n      const currentAppSyncConfig = Amplify.getConfig().API?.GraphQL;\n      const appSyncConfig = {\n        aws_appsync_graphqlEndpoint: currentAppSyncConfig?.endpoint,\n        aws_appsync_authenticationType: currentAppSyncConfig?.defaultAuthMode,\n        aws_appsync_region: currentAppSyncConfig?.region,\n        aws_appsync_apiKey: currentAppSyncConfig?.apiKey\n      };\n      this.amplifyConfig = {\n        ...this.amplifyConfig,\n        ...configFromAmplify,\n        ...(currentAppSyncConfig && appSyncConfig)\n      };\n      this.conflictHandler = this.setConflictHandler(config);\n      this.errorHandler = this.setErrorHandler(config);\n      const authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          this.authModeStrategy = multiAuthStrategy(this.amplifyContext);\n          break;\n        case AuthModeStrategyType.DEFAULT:\n          this.authModeStrategy = defaultAuthStrategy;\n          break;\n        default:\n          this.authModeStrategy = defaultAuthStrategy;\n          break;\n      }\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || this.syncExpressions;\n      this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || this.maxRecordsToSync || 10000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      this.amplifyConfig.maxRecordsToSync = this.maxRecordsToSync;\n      this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || this.syncPageSize || 1000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      this.amplifyConfig.syncPageSize = this.syncPageSize;\n      this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || this.fullSyncInterval || 24 * 60; // 1 day\n      this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || this.storageAdapter || undefined;\n      this.sessionId = this.retrieveSessionId();\n    };\n  }\n  getModuleName() {\n    return 'DataStore';\n  }\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n  handleAddProcError(operation) {\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n    const handler = err => {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([`DataStoreStateError: Tried to execute \\`${operation}\\` while DataStore was \"${this.state}\".`, `This can only be done while DataStore is \"Started\" or \"Stopped\". To remedy:`, 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n    return handler;\n  }\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n  async clear() {\n    checkSchemaInitialized();\n    this.state = DataStoreState.Clearing;\n    await this.runningProcesses.close();\n    if (this.storage === undefined) {\n      // connect to storage so that it can be cleared without fully starting DataStore\n      this.storage = new ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n      await this.storage.init();\n    }\n    if (syncSubscription && !syncSubscription.closed) {\n      syncSubscription.unsubscribe();\n    }\n    if (this.sync) {\n      await this.sync.stop();\n    }\n    await this.storage.clear();\n    this.initialized = undefined; // Should re-initialize when start() is called.\n    this.storage = undefined;\n    this.sync = undefined;\n    this.syncPredicates = new WeakMap();\n    await this.runningProcesses.open();\n    this.state = DataStoreState.NotRunning;\n  }\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n  async stop() {\n    this.state = DataStoreState.Stopping;\n    await this.runningProcesses.close();\n    if (syncSubscription && !syncSubscription.closed) {\n      syncSubscription.unsubscribe();\n    }\n    if (this.sync) {\n      await this.sync.stop();\n    }\n    this.initialized = undefined; // Should re-initialize when start() is called.\n    this.sync = undefined;\n    await this.runningProcesses.open();\n    this.state = DataStoreState.NotRunning;\n  }\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n  processPagination(modelDefinition, paginationProducer) {\n    let sortPredicate;\n    const {\n      limit,\n      page,\n      sort\n    } = paginationProducer || {};\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n    }\n    return {\n      limit,\n      page,\n      sort: sortPredicate\n    };\n  }\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n  async processSyncExpressions() {\n    if (!this.syncExpressions || !this.syncExpressions.length) {\n      return new WeakMap();\n    }\n    const syncPredicates = await Promise.all(this.syncExpressions.map(async syncExpression => {\n      const {\n        modelConstructor,\n        conditionProducer\n      } = await syncExpression;\n      const modelDefinition = getModelDefinition(modelConstructor);\n      // conditionProducer is either a predicate, e.g. (c) => c.field.eq(1)\n      // OR a function/promise that returns a predicate\n      const condition = await this.unwrapPromise(conditionProducer);\n      if (isPredicatesAll(condition)) {\n        return [modelDefinition, null];\n      }\n      const predicate = internals(condition(predicateFor({\n        builder: modelConstructor,\n        schema: modelDefinition,\n        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n      }))).toStoragePredicate();\n      return [modelDefinition, predicate];\n    }));\n    return this.weakMapFromEntries(syncPredicates);\n  }\n  async unwrapPromise(conditionProducer) {\n    try {\n      const condition = await conditionProducer();\n      return condition || conditionProducer;\n    } catch (error) {\n      if (error instanceof TypeError) {\n        return conditionProducer;\n      }\n      throw error;\n    }\n  }\n  weakMapFromEntries(entries) {\n    return entries.reduce((map, [modelDefinition, predicate]) => {\n      if (map.has(modelDefinition)) {\n        const {\n          name\n        } = modelDefinition;\n        logger.warn(`You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the ${name} model will be ignored.`);\n        return map;\n      }\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n      return map;\n    }, new WeakMap());\n  }\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n  retrieveSessionId() {\n    try {\n      const sessionId = sessionStorage.getItem('datastoreSessionId');\n      if (sessionId) {\n        const {\n          aws_appsync_graphqlEndpoint\n        } = this.amplifyConfig;\n        const appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n        const [appSyncId] = appSyncUrl.split('.');\n        return `${sessionId}-${appSyncId}`;\n      }\n    } catch {}\n    return undefined;\n  }\n}\nconst instance = new DataStore();\ninstance.configure({});\nHub.listen('core', capsule => {\n  if (capsule.payload.event === 'configure') {\n    instance.configure({});\n  }\n});\nexport { AsyncCollection, AsyncItem, instance as DataStore, DataStore as DataStoreClass, attached, getAttachment, initSchema, syncClasses };","map":{"version":3,"names":["setAutoFreeze","enablePatches","logger","ConsoleLogger","ulid","monotonicUlidFactory","Date","now","SETTING_SCHEMA_VERSION","schema","modelNamespaceMap","WeakMap","modelPatchesMap","getModelDefinition","modelConstructor","namespace","get","definition","namespaces","models","name","undefined","isValidModelConstructor","obj","isModelConstructor","has","namespaceResolver","resolver","Error","buildSeedPredicate","modelSchema","pks","extractPrimaryKeyFieldNames","recursivePredicateFor","builder","pkField","syncClasses","userClasses","dataStoreClasses","storageClasses","modelInstanceAssociationsMap","ModelAttachment","attachedModelInstances","attached","result","attachment","Array","isArray","map","record","set","getAttachment","instance","Detached","initSchema","userSchema","console","warn","log","checkSchemaCodegenVersion","codegenVersion","internalUserNamespace","USER","createTypeClasses","dataStoreNamespace","getNamespace","storageNamespace","ExclusiveStorage","syncNamespace","SyncEngine","version","Object","keys","forEach","relations","establishRelationAndKeys","relationships","modelAssociations","Map","values","model","connectedModels","fields","filter","field","association","connectionType","type","push","relatedModel","defineProperty","relatedModelDefinition","indexes","indexFields","Set","index","indexField","add","allFields","fromEntries","count","size","modelName","from","parents","every","x","delete","modelTopologicalOrdering","checkSchemaInitialized","message","error","majorVersion","minorVersion","isValid","versionParts","split","major","minor","patch","patchrevision","Number","err","classes","entries","modelDefinition","clazz","createModelClass","nonModels","typeName","typeDefinition","createNonModelClass","instancesMetadata","WeakSet","modelInstanceCreator","init","validateModelFields","k","v","fieldDefinition","isRequired","isArrayNullable","timestamps","isSchemaModelWithAttributes","getTimestampFields","isTimestampField","isIdManaged","includes","errorMessages","idEmptyString","value","isGraphQLScalarType","jsType","GraphQLScalarType","getJSType","validateScalar","getValidationFunction","JSON","parse","errorTypeText","isNullOrUndefined","some","e","elemTypes","join","validationStatus","s","isNonModelFieldType","subNonModelDefinition","user","nonModel","modelValidator","item","subKey","castInstanceType","isModelFieldType","Boolean","initPatches","initializeInstance","draft","parsedValue","normalize","Model","constructor","patches","baseInstance","produce","isInternallyInitialized","modelInstanceMetadata","id","_id","isInternalModel","syncable","amplifyUuid","isIdOptionallyManaged","checkReadOnlyPropertyOnCreate","_version","_lastChangedAt","_deleted","p","normalized","copyOf","source","fn","getPrototypeOf","msg","keyNames","key","hasExistingPatches","length","existingPatches","existingSource","mergedPatches","mergePatches","checkReadOnlyPropertyOnUpdate","DataStore","fromJSON","json","immerable","allModelRelationships","ModelRelationship","allFrom","relationship","prototype","hasOwnProperty","toLowerCase","remoteModelConstructor","isComplete","i","localJoinFields","remoteJoinFields","instanceMemos","resultPromise","query","base","and","q","eq","AsyncCollection","then","rows","API","Promise","resolve","AsyncItem","Symbol","asyncIterator","next","done","toArray","max","MAX_SAFE_INTEGER","output","element","modelKeys","isReadOnly","patchArray","path","val","registerNonModelClass","isQueryOne","defaultConflictHandler","conflictData","localModel","remoteModel","defaultErrorHandler","getModelConstructorByModelName","namespaceName","DATASTORE","SYNC","STORAGE","checkSchemaVersion","storage","Setting","runExclusive","schemaVersionSetting","ModelPredicateCreator","createFromAST","page","limit","storedValue","clear","save","stringify","syncSubscription","enums","pluralName","DataStoreState","InternalAPI","Cache","amplifyConfig","syncPredicates","amplifyContext","runningProcesses","BackgroundProcessManager","state","NotRunning","start","Starting","initialized","debug","res","rej","initResolve","initReject","storageAdapter","sessionId","aws_appsync_graphqlEndpoint","processSyncExpressions","sync","conflictHandler","errorHandler","authModeStrategy","connectivityMonitor","fullSyncIntervalInMilliseconds","fullSyncInterval","subscribe","data","readyType","isNode","ControlMessage","SYNC_ENGINE_SYNC_QUERIES_READY","SYNC_ENGINE_STORAGE_SUBSCRIBED","Hub","dispatch","event","config","Running","catch","handleAddProcError","identifierOrCriteria","paginationProducer","pagination","processPagination","keyFields","queryByPkWithCompositeKeyPresent","predicate","createFromFlatEqualities","isIdentifierObject","createForPk","isPredicatesAll","seedPredicate","internals","fetch","inMemoryPagination","returnOne","condition","updatedPatchesTuple","initPatchesTuple","patchesTuple","modelMeta","nonHasManyRelationships","r","queryObject","createRemoteQueryObject","related","remoteDefinition","producedCondition","predicateFor","toStoragePredicate","savedModel","setConflictHandler","configDataStore","conflictHandlerIsDefault","setErrorHandler","errorHandlerIsDefault","modelOrConstructor","deleteByPkWithCompositeKeyPresent","isValidPredicate","deleted","pkPredicate","observe","executivePredicate","observeWithObjectLiteral","objectLiteral","buildIdPredicate","seed","Observable","observer","pipe","isOpen","opType","primaryKeysAndValues","extractPrimaryKeysAndValues","freshElement","matches","complete","addCleaner","unsubscribe","observeQuery","criteria","options","items","itemsChanged","deletedItemIds","handle","generateAndEmitSnapshot","snapshot","generateSnapshot","emitSnapshot","limitTimerRace","DeferredCallbackResolver","callback","maxInterval","sort","sortOptions","itemModelDefinition","idOrPk","getIdentifierValue","isSynced","getModelSyncedStatus","syncPageSize","itemsArray","sortItems","itemsToSort","sortPredicates","ModelSortPredicateCreator","getPredicates","compareFn","sortCompareFunction","hubCallback","payload","SYNC_ENGINE_MODEL_SYNCED","hubRemove","listen","configure","authModeStrategyType","configAuthModeStrategyType","configConflictHandler","configErrorHandler","maxRecordsToSync","configMaxRecordsToSync","configSyncPageSize","configFullSyncInterval","syncExpressions","configSyncExpressions","authProviders","configAuthProviders","configStorageAdapter","configFromAmplify","currentAppSyncConfig","Amplify","getConfig","GraphQL","appSyncConfig","endpoint","aws_appsync_authenticationType","defaultAuthMode","aws_appsync_region","region","aws_appsync_apiKey","apiKey","AuthModeStrategyType","DEFAULT","MULTI_AUTH","multiAuthStrategy","defaultAuthStrategy","retrieveSessionId","getModuleName","operation","handler","startsWith","Clearing","close","closed","stop","open","Stopping","sortPredicate","createFromExisting","all","syncExpression","conditionProducer","unwrapPromise","weakMapFromEntries","TypeError","reduce","sessionStorage","getItem","appSyncUrl","appSyncId","capsule"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/datastore/datastore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Amplify, Hub, Cache, ConsoleLogger } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches, } from 'immer';\nimport { amplifyUuid } from '@aws-amplify/core/internals/utils';\nimport { Observable, filter } from 'rxjs';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator, } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject, } from '../types';\nimport { isNode } from './utils';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, inMemoryPagination, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, mergePatches, getTimestampFields, } from '../util';\nimport { recursivePredicateFor, predicateFor, internals, } from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nimport { BackgroundProcessManager } from '@aws-amplify/core/internals/utils';\nsetAutoFreeze(true);\nenablePatches();\nconst logger = new ConsoleLogger('DataStore');\nconst ulid = monotonicUlidFactory(Date.now());\nconst SETTING_SCHEMA_VERSION = 'schemaVersion';\nlet schema;\nconst modelNamespaceMap = new WeakMap();\n/**\n * Stores data for crafting the correct update mutation input for a model.\n *\n * - `Patch[]` - array of changed fields and metadata.\n * - `PersistentModel` - the source model, used for diffing object-type fields.\n */\nconst modelPatchesMap = new WeakMap();\nconst getModelDefinition = (modelConstructor) => {\n    const namespace = modelNamespaceMap.get(modelConstructor);\n    const definition = namespace\n        ? schema.namespaces[namespace].models[modelConstructor.name]\n        : undefined;\n    return definition;\n};\n/**\n * Determines whether the given object is a Model Constructor that DataStore can\n * safely use to construct objects and discover related metadata.\n *\n * @param obj The object to test.\n */\nconst isValidModelConstructor = (obj) => {\n    return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nconst namespaceResolver = modelConstructor => {\n    const resolver = modelNamespaceMap.get(modelConstructor);\n    if (!resolver) {\n        throw new Error(`Namespace Resolver for '${modelConstructor.name}' not found! This is probably a bug in '@amplify-js/datastore'.`);\n    }\n    return resolver;\n};\n/**\n * Creates a predicate without any conditions that can be passed to customer\n * code to have conditions added to it.\n *\n * For example, in this query:\n *\n * ```ts\n * await DataStore.query(\n * \tModel,\n * \titem => item.field.eq('value')\n * );\n * ```\n *\n * `buildSeedPredicate(Model)` is used to create `item`, which is passed to the\n * predicate function, which in turn uses that \"seed\" predicate (`item`) to build\n * a predicate tree.\n *\n * @param modelConstructor The model the predicate will query.\n */\nconst buildSeedPredicate = (modelConstructor) => {\n    if (!modelConstructor)\n        throw new Error('Missing modelConstructor');\n    const modelSchema = getModelDefinition(modelConstructor);\n    if (!modelSchema)\n        throw new Error('Missing modelSchema');\n    const pks = extractPrimaryKeyFieldNames(modelSchema);\n    if (!pks)\n        throw new Error('Could not determine PK');\n    return recursivePredicateFor({\n        builder: modelConstructor,\n        schema: modelSchema,\n        pkField: pks,\n    });\n};\n// exporting syncClasses for testing outbox.test.ts\nexport let syncClasses;\nlet userClasses;\nlet dataStoreClasses;\nlet storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nconst modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nvar ModelAttachment;\n(function (ModelAttachment) {\n    /**\n     * Model doesn't lazy load from any data source.\n     *\n     * Related entity properties provided at instantiation are returned\n     * via the respective lazy interfaces when their properties are invoked.\n     */\n    ModelAttachment[\"Detached\"] = \"Detached\";\n    /**\n     * Model lazy loads from the global DataStore.\n     */\n    ModelAttachment[\"DataStore\"] = \"DataStore\";\n    /**\n     * Demonstrative. Not yet implemented.\n     */\n    ModelAttachment[\"API\"] = \"API\";\n})(ModelAttachment || (ModelAttachment = {}));\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nconst attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nexport function attached(result, attachment) {\n    if (Array.isArray(result)) {\n        result.map(record => attached(record, attachment));\n    }\n    else {\n        result && attachedModelInstances.set(result, attachment);\n    }\n    return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nexport const getAttachment = (instance) => {\n    return attachedModelInstances.has(instance)\n        ? attachedModelInstances.get(instance)\n        : ModelAttachment.Detached;\n};\nconst initSchema = (userSchema) => {\n    if (schema !== undefined) {\n        console.warn('The schema has already been initialized');\n        return userClasses;\n    }\n    logger.log('validating schema', { schema: userSchema });\n    checkSchemaCodegenVersion(userSchema.codegenVersion);\n    const internalUserNamespace = {\n        name: USER,\n        ...userSchema,\n    };\n    logger.log('DataStore', 'Init models');\n    userClasses = createTypeClasses(internalUserNamespace);\n    logger.log('DataStore', 'Models initialized');\n    const dataStoreNamespace = getNamespace();\n    const storageNamespace = Storage.getNamespace();\n    const syncNamespace = SyncEngine.getNamespace();\n    dataStoreClasses = createTypeClasses(dataStoreNamespace);\n    storageClasses = createTypeClasses(storageNamespace);\n    syncClasses = createTypeClasses(syncNamespace);\n    schema = {\n        namespaces: {\n            [dataStoreNamespace.name]: dataStoreNamespace,\n            [internalUserNamespace.name]: internalUserNamespace,\n            [storageNamespace.name]: storageNamespace,\n            [syncNamespace.name]: syncNamespace,\n        },\n        version: userSchema.version,\n        codegenVersion: userSchema.codegenVersion,\n    };\n    Object.keys(schema.namespaces).forEach(namespace => {\n        const [relations, keys] = establishRelationAndKeys(schema.namespaces[namespace]);\n        schema.namespaces[namespace].relationships = relations;\n        schema.namespaces[namespace].keys = keys;\n        const modelAssociations = new Map();\n        Object.values(schema.namespaces[namespace].models).forEach(model => {\n            const connectedModels = [];\n            Object.values(model.fields)\n                .filter(field => field.association &&\n                field.association.connectionType === 'BELONGS_TO' &&\n                field.type.model !== model.name)\n                .forEach(field => connectedModels.push(field.type.model));\n            modelAssociations.set(model.name, connectedModels);\n            // Precompute model info (such as pk fields) so that downstream schema consumers\n            // (such as predicate builders) don't have to reach back into \"DataStore\" space\n            // to go looking for it.\n            Object.values(model.fields).forEach(field => {\n                const relatedModel = userClasses[field.type.model];\n                if (isModelConstructor(relatedModel)) {\n                    Object.defineProperty(field.type, 'modelConstructor', {\n                        get: () => {\n                            const relatedModelDefinition = getModelDefinition(relatedModel);\n                            if (!relatedModelDefinition)\n                                throw new Error(`Could not find model definition for ${relatedModel.name}`);\n                            return {\n                                builder: relatedModel,\n                                schema: relatedModelDefinition,\n                                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition),\n                            };\n                        },\n                    });\n                }\n            });\n            // compatibility with legacy/pre-PK codegen for lazy loading to inject\n            // index fields into the model definition.\n            // definition.cloudFields = { ...definition.fields };\n            const indexes = schema.namespaces[namespace].relationships[model.name].indexes;\n            const indexFields = new Set();\n            for (const index of indexes) {\n                for (const indexField of index[1]) {\n                    indexFields.add(indexField);\n                }\n            }\n            model.allFields = {\n                ...Object.fromEntries([...indexFields.values()].map(name => [\n                    name,\n                    {\n                        name,\n                        type: 'ID',\n                        isArray: false,\n                    },\n                ])),\n                ...model.fields,\n            };\n        });\n        const result = new Map();\n        let count = 1000;\n        while (true && count > 0) {\n            if (modelAssociations.size === 0) {\n                break;\n            }\n            count--;\n            if (count === 0) {\n                throw new Error('Models are not topologically sortable. Please verify your schema.');\n            }\n            for (const modelName of Array.from(modelAssociations.keys())) {\n                const parents = modelAssociations.get(modelName);\n                if (parents?.every(x => result.has(x))) {\n                    result.set(modelName, parents);\n                }\n            }\n            Array.from(result.keys()).forEach(x => modelAssociations.delete(x));\n        }\n        schema.namespaces[namespace].modelTopologicalOrdering = result;\n    });\n    return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nconst checkSchemaInitialized = () => {\n    if (schema === undefined) {\n        const message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n        logger.error(message);\n        throw new Error(message);\n    }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nconst checkSchemaCodegenVersion = (codegenVersion) => {\n    const majorVersion = 3;\n    const minorVersion = 2;\n    let isValid = false;\n    try {\n        const versionParts = codegenVersion.split('.');\n        const [major, minor, patch, patchrevision] = versionParts;\n        isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n    }\n    catch (err) {\n        console.log(`Error parsing codegen version: ${codegenVersion}\\n${err}`);\n    }\n    if (!isValid) {\n        const message = `Models were generated with an unsupported version of codegen. Codegen artifacts are from ${codegenVersion || 'an unknown version'}, whereas ^${majorVersion}.${minorVersion}.0 is required. ` +\n            \"Update to the latest CLI and run 'amplify codegen models'.\";\n        logger.error(message);\n        throw new Error(message);\n    }\n};\nconst createTypeClasses = namespace => {\n    const classes = {};\n    Object.entries(namespace.models).forEach(([modelName, modelDefinition]) => {\n        const clazz = createModelClass(modelDefinition);\n        classes[modelName] = clazz;\n        modelNamespaceMap.set(clazz, namespace.name);\n    });\n    Object.entries(namespace.nonModels || {}).forEach(([typeName, typeDefinition]) => {\n        const clazz = createNonModelClass(typeDefinition);\n        classes[typeName] = clazz;\n    });\n    return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nconst instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n    instancesMetadata.add(init);\n    return new modelConstructor(init);\n}\nconst validateModelFields = (modelDefinition) => (k, v) => {\n    const fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n        const { type, isRequired, isArrayNullable, name, isArray } = fieldDefinition;\n        const timestamps = isSchemaModelWithAttributes(modelDefinition)\n            ? getTimestampFields(modelDefinition)\n            : {};\n        const isTimestampField = !!timestamps[name];\n        if (((!isArray && isRequired) || (isArray && !isArrayNullable)) &&\n            !isTimestampField &&\n            (v === null || v === undefined)) {\n            throw new Error(`Field ${name} is required`);\n        }\n        if (isSchemaModelWithAttributes(modelDefinition) &&\n            !isIdManaged(modelDefinition)) {\n            const keys = extractPrimaryKeyFieldNames(modelDefinition);\n            if (keys.includes(k) && v === '') {\n                logger.error(errorMessages.idEmptyString, { k, value: v });\n                throw new Error(errorMessages.idEmptyString);\n            }\n        }\n        if (isGraphQLScalarType(type)) {\n            const jsType = GraphQLScalarType.getJSType(type);\n            const validateScalar = GraphQLScalarType.getValidationFunction(type);\n            if (type === 'AWSJSON') {\n                if (typeof v === jsType) {\n                    return;\n                }\n                if (typeof v === 'string') {\n                    try {\n                        JSON.parse(v);\n                        return;\n                    }\n                    catch (error) {\n                        throw new Error(`Field ${name} is an invalid JSON object. ${v}`);\n                    }\n                }\n            }\n            if (isArray) {\n                let errorTypeText = jsType;\n                if (!isRequired) {\n                    errorTypeText = `${jsType} | null | undefined`;\n                }\n                if (!Array.isArray(v) && !isArrayNullable) {\n                    throw new Error(`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`);\n                }\n                if (!isNullOrUndefined(v) &&\n                    v.some(e => isNullOrUndefined(e) ? isRequired : typeof e !== jsType)) {\n                    const elemTypes = v\n                        .map(e => (e === null ? 'null' : typeof e))\n                        .join(',');\n                    throw new Error(`All elements in the ${name} array should be of type ${errorTypeText}, [${elemTypes}] received. ${v}`);\n                }\n                if (validateScalar && !isNullOrUndefined(v)) {\n                    const validationStatus = v.map(e => {\n                        if (!isNullOrUndefined(e)) {\n                            return validateScalar(e);\n                        }\n                        else if (isNullOrUndefined(e) && !isRequired) {\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                    if (!validationStatus.every(s => s)) {\n                        throw new Error(`All elements in the ${name} array should be of type ${type}, validation failed for one or more elements. ${v}`);\n                    }\n                }\n            }\n            else if (!isRequired && v === undefined) {\n                return;\n            }\n            else if (typeof v !== jsType && v !== null) {\n                throw new Error(`Field ${name} should be of type ${jsType}, ${typeof v} received. ${v}`);\n            }\n            else if (!isNullOrUndefined(v) &&\n                validateScalar &&\n                !validateScalar(v) // TODO: why never, TS ... why ...\n            ) {\n                throw new Error(`Field ${name} should be of type ${type}, validation failed. ${v}`);\n            }\n        }\n        else if (isNonModelFieldType(type)) {\n            // do not check non model fields if undefined or null\n            if (!isNullOrUndefined(v)) {\n                const subNonModelDefinition = schema.namespaces.user.nonModels[type.nonModel];\n                const modelValidator = validateModelFields(subNonModelDefinition);\n                if (isArray) {\n                    let errorTypeText = type.nonModel;\n                    if (!isRequired) {\n                        errorTypeText = `${type.nonModel} | null | undefined`;\n                    }\n                    if (!Array.isArray(v)) {\n                        throw new Error(`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`);\n                    }\n                    v.forEach(item => {\n                        if ((isNullOrUndefined(item) && isRequired) ||\n                            (typeof item !== 'object' && typeof item !== 'undefined')) {\n                            throw new Error(`All elements in the ${name} array should be of type ${type.nonModel}, [${typeof item}] received. ${item}`);\n                        }\n                        if (!isNullOrUndefined(item)) {\n                            Object.keys(subNonModelDefinition.fields).forEach(subKey => {\n                                modelValidator(subKey, item[subKey]);\n                            });\n                        }\n                    });\n                }\n                else {\n                    if (typeof v !== 'object') {\n                        throw new Error(`Field ${name} should be of type ${type.nonModel}, ${typeof v} recieved. ${v}`);\n                    }\n                    Object.keys(subNonModelDefinition.fields).forEach(subKey => {\n                        modelValidator(subKey, v[subKey]);\n                    });\n                }\n            }\n        }\n    }\n};\nconst castInstanceType = (modelDefinition, k, v) => {\n    const { isArray, type } = modelDefinition.fields[k] || {};\n    // attempt to parse stringified JSON\n    if (typeof v === 'string' &&\n        (isArray ||\n            type === 'AWSJSON' ||\n            isNonModelFieldType(type) ||\n            isModelFieldType(type))) {\n        try {\n            return JSON.parse(v);\n        }\n        catch {\n            // if JSON is invalid, don't throw and let modelValidator handle it\n        }\n    }\n    // cast from numeric representation of boolean to JS boolean\n    if (typeof v === 'number' && type === 'Boolean') {\n        return Boolean(v);\n    }\n    return v;\n};\n/**\n * Records the patches (as if against an empty object) used to initialize\n * an instance of a Model. This can be used for determining which fields to\n * send to the cloud durnig a CREATE mutation.\n */\nconst initPatches = new WeakMap();\n/**\n * Attempts to apply type-aware, casted field values from a given `init`\n * object to the given `draft`.\n *\n * @param init The initialization object to extract field values from.\n * @param modelDefinition The definition describing the target object shape.\n * @param draft The draft to apply field values to.\n */\nconst initializeInstance = (init, modelDefinition, draft) => {\n    const modelValidator = validateModelFields(modelDefinition);\n    Object.entries(init).forEach(([k, v]) => {\n        const parsedValue = castInstanceType(modelDefinition, k, v);\n        modelValidator(k, parsedValue);\n        draft[k] = parsedValue;\n    });\n};\n/**\n * Updates a draft to standardize its customer-defined fields so that they are\n * consistent with the data as it would look after having been synchronized from\n * Cloud storage.\n *\n * The exceptions to this are:\n *\n * 1. Non-schema/Internal [sync] metadata fields.\n * 2. Cloud-managed fields, which are `null` until set by cloud storage.\n *\n * This function should be expanded if/when deviations between canonical Cloud\n * storage data and locally managed data are found. For now, the known areas\n * that require normalization are:\n *\n * 1. Ensuring all non-metadata fields are *defined*. (I.e., turn `undefined` -> `null`.)\n *\n * @param modelDefinition Definition for the draft. Used to discover all fields.\n * @param draft The instance draft to apply normalizations to.\n */\nconst normalize = (modelDefinition, draft) => {\n    for (const k of Object.keys(modelDefinition.fields)) {\n        if (draft[k] === undefined)\n            draft[k] = null;\n    }\n};\nconst createModelClass = (modelDefinition) => {\n    const clazz = class Model {\n        constructor(init) {\n            // we create a base instance first so we can distinguish which fields were explicitly\n            // set by customer code versus those set by normalization. only those fields\n            // which are explicitly set by customers should be part of create mutations.\n            let patches = [];\n            const baseInstance = produce(this, (draft) => {\n                initializeInstance(init, modelDefinition, draft);\n                // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n                const isInternallyInitialized = instancesMetadata.has(init);\n                const modelInstanceMetadata = isInternallyInitialized\n                    ? init\n                    : {};\n                const { id: _id } = modelInstanceMetadata;\n                if (isIdManaged(modelDefinition)) {\n                    const isInternalModel = _id !== null && _id !== undefined;\n                    const id = isInternalModel\n                        ? _id\n                        : modelDefinition.syncable\n                            ? amplifyUuid()\n                            : ulid();\n                    draft.id = id;\n                }\n                else if (isIdOptionallyManaged(modelDefinition)) {\n                    // only auto-populate if the id was not provided\n                    draft.id =\n                        draft.id || amplifyUuid();\n                }\n                if (!isInternallyInitialized) {\n                    checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n                }\n                const { _version, _lastChangedAt, _deleted } = modelInstanceMetadata;\n                if (modelDefinition.syncable) {\n                    draft._version = _version;\n                    draft._lastChangedAt = _lastChangedAt;\n                    draft._deleted = _deleted;\n                }\n            }, p => (patches = p));\n            // now that we have a list of patches that encapsulate the explicit, customer-provided\n            // fields, we can normalize. patches from normalization are ignored, because the changes\n            // are only create to provide a consistent view of the data for fields pre/post sync\n            // where possible. (not all fields can be normalized pre-sync, because they're generally\n            // \"cloud managed\" fields, like createdAt and updatedAt.)\n            const normalized = produce(baseInstance, (draft) => normalize(modelDefinition, draft));\n            initPatches.set(normalized, patches);\n            return normalized;\n        }\n        static copyOf(source, fn) {\n            const modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n                const msg = 'The source object is not a valid model';\n                logger.error(msg, { source });\n                throw new Error(msg);\n            }\n            let patches = [];\n            const model = produce(source, draft => {\n                fn(draft);\n                const keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n                // Keys are immutable\n                keyNames.forEach(key => {\n                    if (draft[key] !== source[key]) {\n                        logger.warn(`copyOf() does not update PK fields. The '${key}' update is being ignored.`, { source });\n                    }\n                    draft[key] = source[key];\n                });\n                const modelValidator = validateModelFields(modelDefinition);\n                Object.entries(draft).forEach(([k, v]) => {\n                    const parsedValue = castInstanceType(modelDefinition, k, v);\n                    modelValidator(k, parsedValue);\n                });\n                normalize(modelDefinition, draft);\n            }, p => (patches = p));\n            const hasExistingPatches = modelPatchesMap.has(source);\n            if (patches.length || hasExistingPatches) {\n                if (hasExistingPatches) {\n                    const [existingPatches, existingSource] = modelPatchesMap.get(source);\n                    const mergedPatches = mergePatches(existingSource, existingPatches, patches);\n                    modelPatchesMap.set(model, [mergedPatches, existingSource]);\n                    checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n                }\n                else {\n                    modelPatchesMap.set(model, [patches, source]);\n                    checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n                }\n            }\n            else {\n                // always register patches when performing a copyOf, even if the\n                // patches list is empty. this allows `save()` to recognize when an\n                // instance is the result of a `copyOf()`. without more significant\n                // refactoring, this is the only way for `save()` to know which\n                // diffs (patches) are relevant for `storage` to use in building\n                // the list of \"changed\" fields for mutations.\n                modelPatchesMap.set(model, [[], source]);\n            }\n            return attached(model, ModelAttachment.DataStore);\n        }\n        // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n        // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n        static fromJSON(json) {\n            if (Array.isArray(json)) {\n                return json.map(init => this.fromJSON(init));\n            }\n            const instance = modelInstanceCreator(clazz, json);\n            const modelValidator = validateModelFields(modelDefinition);\n            Object.entries(instance).forEach(([k, v]) => {\n                modelValidator(k, v);\n            });\n            return attached(instance, ModelAttachment.DataStore);\n        }\n    };\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: modelDefinition.name });\n    // Add getters/setters for relationship fields.\n    //  getter - for lazy loading\n    //  setter - for FK management\n    const allModelRelationships = ModelRelationship.allFrom({\n        builder: clazz,\n        schema: modelDefinition,\n        pkField: extractPrimaryKeyFieldNames(modelDefinition),\n    });\n    for (const relationship of allModelRelationships) {\n        const field = relationship.field;\n        Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n            set(model) {\n                if (!(typeof model === 'object' || typeof model === 'undefined'))\n                    return;\n                // if model is undefined or null, the connection should be removed\n                if (model) {\n                    // Avoid validation error when processing AppSync response with nested\n                    // selection set. Nested entitites lack version field and can not be validated\n                    // TODO: explore a more reliable method to solve this\n                    if (model.hasOwnProperty('_version')) {\n                        const modelConstructor = Object.getPrototypeOf(model || {})\n                            .constructor;\n                        if (!isValidModelConstructor(modelConstructor)) {\n                            const msg = `Value passed to ${modelDefinition.name}.${field} is not a valid instance of a model`;\n                            logger.error(msg, { model });\n                            throw new Error(msg);\n                        }\n                        if (modelConstructor.name.toLowerCase() !==\n                            relationship.remoteModelConstructor.name.toLowerCase()) {\n                            const msg = `Value passed to ${modelDefinition.name}.${field} is not an instance of ${relationship.remoteModelConstructor.name}`;\n                            logger.error(msg, { model });\n                            throw new Error(msg);\n                        }\n                    }\n                }\n                // if the relationship can be managed automagically, set the FK's\n                if (relationship.isComplete) {\n                    for (let i = 0; i < relationship.localJoinFields.length; i++) {\n                        this[relationship.localJoinFields[i]] =\n                            model?.[relationship.remoteJoinFields[i]];\n                    }\n                    const instanceMemos = modelInstanceAssociationsMap.has(this)\n                        ? modelInstanceAssociationsMap.get(this)\n                        : modelInstanceAssociationsMap.set(this, {}).get(this);\n                    instanceMemos[field] = model || undefined;\n                }\n            },\n            get() {\n                /**\n                 * Bucket for holding related models instances specific to `this` instance.\n                 */\n                const instanceMemos = modelInstanceAssociationsMap.has(this)\n                    ? modelInstanceAssociationsMap.get(this)\n                    : modelInstanceAssociationsMap.set(this, {}).get(this);\n                // if the memos already has a result for this field, we'll use it.\n                // there is no \"cache\" invalidation of any kind; memos are permanent to\n                // keep an immutable perception of the instance.\n                if (!instanceMemos.hasOwnProperty(field)) {\n                    // before we populate the memo, we need to know where to look for relatives.\n                    // today, this only supports DataStore. Models aren't managed elsewhere in Amplify.\n                    if (getAttachment(this) === ModelAttachment.DataStore) {\n                        // when we fetch the results using a query constructed under the guidance\n                        // of the relationship metadata, we DO NOT AWAIT resolution. we want to\n                        // drop the promise into the memo's synchronously, eliminating the chance\n                        // for a race.\n                        const resultPromise = instance.query(relationship.remoteModelConstructor, base => base.and(q => {\n                            return relationship.remoteJoinFields.map((field, index) => {\n                                // TODO: anything we can use instead of `any` here?\n                                return q[field].eq(this[relationship.localJoinFields[index]]);\n                            });\n                        }));\n                        // results in hand, how we return them to the caller depends on the relationship type.\n                        if (relationship.type === 'HAS_MANY') {\n                            // collections should support async iteration, even though we don't\n                            // leverage it fully [yet].\n                            instanceMemos[field] = new AsyncCollection(resultPromise);\n                        }\n                        else {\n                            // non-collections should only ever return 1 value *or nothing*.\n                            // if we have more than 1 record, something's amiss. it's not our job\n                            // pick a result for the customer. it's our job to say \"something's wrong.\"\n                            instanceMemos[field] = resultPromise.then(rows => {\n                                if (rows.length > 1) {\n                                    // should never happen for a HAS_ONE or BELONGS_TO.\n                                    const err = new Error(`\n\t\t\t\t\t\t\t\t\tData integrity error.\n\t\t\t\t\t\t\t\t\tToo many records found for a HAS_ONE/BELONGS_TO field '${modelDefinition.name}.${field}'\n\t\t\t\t\t\t\t\t`);\n                                    console.error(err);\n                                    throw err;\n                                }\n                                else {\n                                    return rows[0];\n                                }\n                            });\n                        }\n                    }\n                    else if (getAttachment(this) === ModelAttachment.API) {\n                        throw new Error('Lazy loading from API is not yet supported!');\n                    }\n                    else {\n                        if (relationship.type === 'HAS_MANY') {\n                            return new AsyncCollection([]);\n                        }\n                        else {\n                            return Promise.resolve(undefined);\n                        }\n                    }\n                }\n                return instanceMemos[field];\n            },\n        });\n    }\n    return clazz;\n};\n/**\n * An eventually loaded related model instance.\n */\nexport class AsyncItem extends Promise {\n}\n/**\n * A collection of related model instances.\n *\n * This collection can be async-iterated or turned directly into an array using `toArray()`.\n */\nexport class AsyncCollection {\n    constructor(values) {\n        this.values = values;\n    }\n    /**\n     * Facilitates async iteration.\n     *\n     * ```ts\n     * for await (const item of collection) {\n     *   handle(item)\n     * }\n     * ```\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n     */\n    [Symbol.asyncIterator]() {\n        let values;\n        let index = 0;\n        return {\n            next: async () => {\n                if (!values)\n                    values = await this.values;\n                if (index < values.length) {\n                    const result = {\n                        value: values[index],\n                        done: false,\n                    };\n                    index++;\n                    return result;\n                }\n                return {\n                    value: null,\n                    done: true,\n                };\n            },\n        };\n    }\n    /**\n     * Turns the collection into an array, up to the amount specified in `max` param.\n     *\n     * ```ts\n     * const all = await collection.toArray();\n     * const first100 = await collection.toArray({max: 100});\n     * ```\n     */\n    async toArray({ max = Number.MAX_SAFE_INTEGER, } = {}) {\n        const output = [];\n        let i = 0;\n        for await (const element of this) {\n            if (i < max) {\n                output.push(element);\n                i++;\n            }\n            else {\n                break;\n            }\n        }\n        return output;\n    }\n}\nconst checkReadOnlyPropertyOnCreate = (draft, modelDefinition) => {\n    const modelKeys = Object.keys(draft);\n    const { fields } = modelDefinition;\n    modelKeys.forEach(key => {\n        if (fields[key] && fields[key].isReadOnly) {\n            throw new Error(`${key} is read-only.`);\n        }\n    });\n};\nconst checkReadOnlyPropertyOnUpdate = (patches, modelDefinition) => {\n    const patchArray = patches.map(p => [p.path[0], p.value]);\n    const { fields } = modelDefinition;\n    patchArray.forEach(([key, val]) => {\n        if (!val || !fields[key])\n            return;\n        if (fields[key].isReadOnly) {\n            throw new Error(`${key} is read-only.`);\n        }\n    });\n};\nconst createNonModelClass = (typeDefinition) => {\n    const clazz = class Model {\n        constructor(init) {\n            const instance = produce(this, (draft) => {\n                initializeInstance(init, typeDefinition, draft);\n            });\n            return instance;\n        }\n    };\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: typeDefinition.name });\n    registerNonModelClass(clazz);\n    return clazz;\n};\nfunction isQueryOne(obj) {\n    return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n    const { localModel, modelConstructor, remoteModel } = conflictData;\n    const { _version } = remoteModel;\n    return modelInstanceCreator(modelConstructor, { ...localModel, _version });\n}\nfunction defaultErrorHandler(error) {\n    logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n    let result;\n    switch (namespaceName) {\n        case DATASTORE:\n            result = dataStoreClasses[modelName];\n            break;\n        case USER:\n            result = userClasses[modelName];\n            break;\n        case SYNC:\n            result = syncClasses[modelName];\n            break;\n        case STORAGE:\n            result = storageClasses[modelName];\n            break;\n        default:\n            throw new Error(`Invalid namespace: ${namespaceName}`);\n    }\n    if (isValidModelConstructor(result)) {\n        return result;\n    }\n    else {\n        const msg = `Model name is not valid for namespace. modelName: ${modelName}, namespace: ${namespaceName}`;\n        logger.error(msg);\n        throw new Error(msg);\n    }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nasync function checkSchemaVersion(storage, version) {\n    const Setting = dataStoreClasses.Setting;\n    const modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n    await storage.runExclusive(async (s) => {\n        const [schemaVersionSetting] = await s.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {\n            and: { key: { eq: SETTING_SCHEMA_VERSION } },\n        }), { page: 0, limit: 1 });\n        if (schemaVersionSetting !== undefined &&\n            schemaVersionSetting.value !== undefined) {\n            const storedValue = JSON.parse(schemaVersionSetting.value);\n            if (storedValue !== version) {\n                await s.clear(false);\n            }\n        }\n        else {\n            await s.save(modelInstanceCreator(Setting, {\n                key: SETTING_SCHEMA_VERSION,\n                value: JSON.stringify(version),\n            }));\n        }\n    });\n}\nlet syncSubscription;\nfunction getNamespace() {\n    const namespace = {\n        name: DATASTORE,\n        relationships: {},\n        enums: {},\n        nonModels: {},\n        models: {\n            Setting: {\n                name: 'Setting',\n                pluralName: 'Settings',\n                syncable: false,\n                fields: {\n                    id: {\n                        name: 'id',\n                        type: 'ID',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    key: {\n                        name: 'key',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    value: {\n                        name: 'value',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                },\n            },\n        },\n    };\n    return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n    DataStoreState[\"NotRunning\"] = \"Not Running\";\n    DataStoreState[\"Starting\"] = \"Starting\";\n    DataStoreState[\"Running\"] = \"Running\";\n    DataStoreState[\"Stopping\"] = \"Stopping\";\n    DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\n// TODO: How can we get rid of the non-null assertions?\n// https://github.com/aws-amplify/amplify-js/pull/10477/files#r1007363485\nclass DataStore {\n    constructor() {\n        // reference to configured category instances. Used for preserving SSR context\n        this.InternalAPI = InternalAPI;\n        this.Cache = Cache;\n        // Non-null assertions (bang operator) have been added to most of these properties\n        // to make TS happy. These properties are all expected to be set immediately after\n        // construction.\n        // TODO: Refactor to use proper DI if possible. If not possible, change these to\n        // optionals and implement conditional checks throughout. Rinse/repeat on all\n        // sync engine processors, storage engine, adapters, etc..\n        this.amplifyConfig = {};\n        this.syncPredicates = new WeakMap();\n        // object that gets passed to descendent classes. Allows us to pass these down by reference\n        this.amplifyContext = {\n            InternalAPI: this.InternalAPI,\n        };\n        /**\n         * **IMPORTANT!**\n         *\n         * Accumulator for background things that can **and MUST** be called when\n         * DataStore stops.\n         *\n         * These jobs **MUST** be *idempotent promises* that resolve ONLY\n         * once the intended jobs are completely finished and/or otherwise destroyed\n         * and cleaned up with ZERO outstanding:\n         *\n         * 1. side effects (e.g., state changes)\n         * 1. callbacks\n         * 1. subscriptions\n         * 1. calls to storage\n         * 1. *etc.*\n         *\n         * Methods that create pending promises, subscriptions, callbacks, or any\n         * type of side effect **MUST** be registered with the manager. And, a new\n         * manager must be created after each `exit()`.\n         *\n         * Failure to comply will put DataStore into a highly unpredictable state\n         * when it needs to stop or clear -- which occurs when restarting with new\n         * sync expressions, during testing, and potentially during app code\n         * recovery handling, etc..\n         *\n         * It is up to the discretion of each disposer whether to wait for job\n         * completion or to cancel operations and issue failures *as long as the\n         * disposer returns in a reasonable amount of time.*\n         *\n         * (Reasonable = *seconds*, not minutes.)\n         */\n        this.runningProcesses = new BackgroundProcessManager();\n        /**\n         * Indicates what state DataStore is in.\n         *\n         * Not [yet?] used for actual state management; but for messaging\n         * when errors occur, to help troubleshoot.\n         */\n        this.state = DataStoreState.NotRunning;\n        /**\n         * If not already done:\n         * 1. Attaches and initializes storage.\n         * 2. Loads the schema and records metadata.\n         * 3. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n         * attaches a sync engine, starts it, and subscribes.\n         */\n        this.start = async () => {\n            return this.runningProcesses\n                .add(async () => {\n                this.state = DataStoreState.Starting;\n                if (this.initialized === undefined) {\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise((res, rej) => {\n                        this.initResolve = res;\n                        this.initReject = rej;\n                    });\n                }\n                else {\n                    await this.initialized;\n                    return;\n                }\n                this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                await this.storage.init();\n                checkSchemaInitialized();\n                await checkSchemaVersion(this.storage, schema.version);\n                const { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n                if (aws_appsync_graphqlEndpoint) {\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    this.syncPredicates = await this.processSyncExpressions();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    const fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60; // fullSyncInterval from param is in minutes\n                    syncSubscription = this.sync\n                        .start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n                        .subscribe({\n                        next: ({ type, data }) => {\n                            /**\n                             * In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                             * In non-Node environments (the browser or React Native), we can begin returning data\n                             * once subscriptions are in place.\n                             */\n                            const readyType = isNode()\n                                ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                            if (type === readyType) {\n                                this.initResolve();\n                            }\n                            Hub.dispatch('datastore', {\n                                event: type,\n                                data,\n                            });\n                        },\n                        error: err => {\n                            logger.warn('Sync error', err);\n                            this.initReject();\n                        },\n                    });\n                }\n                else {\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                        config: this.amplifyConfig,\n                    });\n                    this.initResolve();\n                }\n                await this.initialized;\n                this.state = DataStoreState.Running;\n            }, 'datastore start')\n                .catch(this.handleAddProcError('DataStore.start()'));\n        };\n        this.query = async (modelConstructor, identifierOrCriteria, paginationProducer) => {\n            return this.runningProcesses\n                .add(async () => {\n                await this.start();\n                let result;\n                if (!this.storage) {\n                    throw new Error('No storage to query');\n                }\n                //#region Input validation\n                if (!isValidModelConstructor(modelConstructor)) {\n                    const msg = 'Constructor is not for a valid model';\n                    logger.error(msg, { modelConstructor });\n                    throw new Error(msg);\n                }\n                if (typeof identifierOrCriteria === 'string') {\n                    if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                    }\n                }\n                const modelDefinition = getModelDefinition(modelConstructor);\n                if (!modelDefinition) {\n                    throw new Error('Invalid model definition provided!');\n                }\n                const pagination = this.processPagination(modelDefinition, paginationProducer);\n                const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                if (isQueryOne(identifierOrCriteria)) {\n                    if (keyFields.length > 1) {\n                        const msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                        logger.error(msg, { keyFields });\n                        throw new Error(msg);\n                    }\n                    const predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, { [keyFields[0]]: identifierOrCriteria });\n                    result = await this.storage.query(modelConstructor, predicate, pagination);\n                }\n                else {\n                    // Object is being queried using object literal syntax\n                    if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        const predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                        result = await this.storage.query(modelConstructor, predicate, pagination);\n                    }\n                    else if (!identifierOrCriteria ||\n                        isPredicatesAll(identifierOrCriteria)) {\n                        result = await this.storage?.query(modelConstructor, undefined, pagination);\n                    }\n                    else {\n                        const seedPredicate = recursivePredicateFor({\n                            builder: modelConstructor,\n                            schema: modelDefinition,\n                            pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                        });\n                        const predicate = internals(identifierOrCriteria(seedPredicate));\n                        result = (await predicate.fetch(this.storage));\n                        result = inMemoryPagination(result, pagination);\n                    }\n                }\n                //#endregion\n                const returnOne = isQueryOne(identifierOrCriteria) ||\n                    isIdentifierObject(identifierOrCriteria, modelDefinition);\n                return attached(returnOne ? result[0] : result, ModelAttachment.DataStore);\n            }, 'datastore query')\n                .catch(this.handleAddProcError('DataStore.query()'));\n        };\n        this.save = async (model, condition) => {\n            return this.runningProcesses\n                .add(async () => {\n                await this.start();\n                if (!this.storage) {\n                    throw new Error('No storage to save to');\n                }\n                // Immer patches for constructing a correct update mutation input\n                // Allows us to only include changed fields for updates\n                const updatedPatchesTuple = modelPatchesMap.get(model);\n                // Immer patches for initial object construction. These are used if\n                // there are no `update` patches under the assumption we're performing\n                // a CREATE and wish to send only explicitly specified fields to the cloud.\n                const initPatchesTuple = initPatches.has(model)\n                    ? [initPatches.get(model), {}]\n                    : undefined;\n                // favor update patches over init/create patches, because init patches\n                // are ALWAYS present, whereas update patches are only present if copyOf\n                // was used to create the instance.\n                const patchesTuple = updatedPatchesTuple || initPatchesTuple;\n                const modelConstructor = model ? model.constructor : undefined;\n                if (!isValidModelConstructor(modelConstructor)) {\n                    const msg = 'Object is not an instance of a valid model';\n                    logger.error(msg, { model });\n                    throw new Error(msg);\n                }\n                const modelDefinition = getModelDefinition(modelConstructor);\n                if (!modelDefinition) {\n                    throw new Error('Model Definition could not be found for model');\n                }\n                const modelMeta = {\n                    builder: modelConstructor,\n                    schema: modelDefinition,\n                    pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                };\n                await this.storage.runExclusive(async (s) => {\n                    // no enforcement for HAS_MANY on save, because the ~related~ entities\n                    // hold the FK in that case.\n                    const nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(r => r.type === 'BELONGS_TO');\n                    for (const relationship of nonHasManyRelationships) {\n                        const queryObject = relationship.createRemoteQueryObject(model);\n                        if (queryObject !== null) {\n                            const related = await s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject));\n                            if (related.length === 0) {\n                                throw new Error([\n                                    `Data integrity error. You tried to save a ${modelDefinition.name} (${JSON.stringify(model)})`,\n                                    `but the instance assigned to the \"${relationship.field}\" property`,\n                                    `does not exist in the local database. If you're trying to create the related`,\n                                    `\"${relationship.remoteDefinition?.name}\", you must save it independently first.`,\n                                ].join(' '));\n                            }\n                        }\n                    }\n                });\n                const producedCondition = condition\n                    ? internals(condition(predicateFor(modelMeta))).toStoragePredicate()\n                    : undefined;\n                const [savedModel] = await this.storage.runExclusive(async (s) => {\n                    const saved = await s.save(model, producedCondition, undefined, patchesTuple);\n                    return s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model));\n                });\n                return attached(savedModel, ModelAttachment.DataStore);\n            }, 'datastore save')\n                .catch(this.handleAddProcError('DataStore.save()'));\n        };\n        this.setConflictHandler = (config) => {\n            const { DataStore: configDataStore } = config;\n            const conflictHandlerIsDefault = () => this.conflictHandler === defaultConflictHandler;\n            if (configDataStore && configDataStore.conflictHandler) {\n                return configDataStore.conflictHandler;\n            }\n            if (conflictHandlerIsDefault() && config.conflictHandler) {\n                return config.conflictHandler;\n            }\n            return this.conflictHandler || defaultConflictHandler;\n        };\n        this.setErrorHandler = (config) => {\n            const { DataStore: configDataStore } = config;\n            const errorHandlerIsDefault = () => this.errorHandler === defaultErrorHandler;\n            if (configDataStore && configDataStore.errorHandler) {\n                return configDataStore.errorHandler;\n            }\n            if (errorHandlerIsDefault() && config.errorHandler) {\n                return config.errorHandler;\n            }\n            return this.errorHandler || defaultErrorHandler;\n        };\n        this.delete = async (modelOrConstructor, identifierOrCriteria) => {\n            return this.runningProcesses\n                .add(async () => {\n                await this.start();\n                if (!this.storage) {\n                    throw new Error('No storage to delete from');\n                }\n                let condition;\n                if (!modelOrConstructor) {\n                    const msg = 'Model or Model Constructor required';\n                    logger.error(msg, { modelOrConstructor });\n                    throw new Error(msg);\n                }\n                if (isValidModelConstructor(modelOrConstructor)) {\n                    const modelConstructor = modelOrConstructor;\n                    if (!identifierOrCriteria) {\n                        const msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, { identifierOrCriteria });\n                        throw new Error(msg);\n                    }\n                    const modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                        throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                        const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                        if (keyFields.length > 1) {\n                            const msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                            logger.error(msg, { keyFields });\n                            throw new Error(msg);\n                        }\n                        condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, { [keyFields[0]]: identifierOrCriteria });\n                    }\n                    else {\n                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                            condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                        }\n                        else {\n                            condition = internals(identifierOrCriteria(predicateFor({\n                                builder: modelConstructor,\n                                schema: modelDefinition,\n                                pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                            }))).toStoragePredicate();\n                        }\n                        if (!condition ||\n                            !ModelPredicateCreator.isValidPredicate(condition)) {\n                            const msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                            logger.error(msg, { condition });\n                            throw new Error(msg);\n                        }\n                    }\n                    const [deleted] = await this.storage.delete(modelConstructor, condition);\n                    return attached(deleted, ModelAttachment.DataStore);\n                }\n                else {\n                    const model = modelOrConstructor;\n                    const modelConstructor = Object.getPrototypeOf(model || {})\n                        .constructor;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                        const msg = 'Object is not an instance of a valid model';\n                        logger.error(msg, { model });\n                        throw new Error(msg);\n                    }\n                    const modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                        throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    const pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                    if (identifierOrCriteria) {\n                        if (typeof identifierOrCriteria !== 'function') {\n                            const msg = 'Invalid criteria';\n                            logger.error(msg, { identifierOrCriteria });\n                            throw new Error(msg);\n                        }\n                        condition = internals(identifierOrCriteria(predicateFor({\n                            builder: modelConstructor,\n                            schema: modelDefinition,\n                            pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                        }))).toStoragePredicate();\n                    }\n                    else {\n                        condition = pkPredicate;\n                    }\n                    const [[deleted]] = await this.storage.delete(model, condition);\n                    return attached(deleted, ModelAttachment.DataStore);\n                }\n            }, 'datastore delete')\n                .catch(this.handleAddProcError('DataStore.delete()'));\n        };\n        this.observe = (modelOrConstructor, identifierOrCriteria) => {\n            let executivePredicate;\n            const modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor)\n                ? modelOrConstructor\n                : undefined;\n            if (modelOrConstructor && modelConstructor === undefined) {\n                const model = modelOrConstructor;\n                const modelConstructor = model && Object.getPrototypeOf(model).constructor;\n                if (isValidModelConstructor(modelConstructor)) {\n                    if (identifierOrCriteria) {\n                        logger.warn('idOrCriteria is ignored when using a model instance', {\n                            model,\n                            identifierOrCriteria,\n                        });\n                    }\n                    return this.observe(modelConstructor, model.id);\n                }\n                else {\n                    const msg = 'The model is not an instance of a PersistentModelConstructor';\n                    logger.error(msg, { model });\n                    throw new Error(msg);\n                }\n            }\n            // observe should not accept object literal syntax\n            if (identifierOrCriteria &&\n                modelConstructor &&\n                isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n                const msg = errorMessages.observeWithObjectLiteral;\n                logger.error(msg, { objectLiteral: identifierOrCriteria });\n                throw new Error(msg);\n            }\n            if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n                const msg = 'Cannot provide criteria without a modelConstructor';\n                logger.error(msg, identifierOrCriteria);\n                throw new Error(msg);\n            }\n            if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n                const msg = 'Constructor is not for a valid model';\n                logger.error(msg, { modelConstructor });\n                throw new Error(msg);\n            }\n            if (modelConstructor && typeof identifierOrCriteria === 'string') {\n                const buildIdPredicate = seed => seed.id.eq(identifierOrCriteria);\n                executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n            }\n            else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n                executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n            }\n            return new Observable(observer => {\n                let source;\n                this.runningProcesses\n                    .add(async () => {\n                    await this.start();\n                    // Filter the events returned by Storage according to namespace,\n                    // append original element data, and subscribe to the observable\n                    source = this.storage.observe(modelConstructor)\n                        .pipe(filter(({ model }) => namespaceResolver(model) === USER))\n                        .subscribe({\n                        next: item => this.runningProcesses.isOpen &&\n                            this.runningProcesses.add(async () => {\n                                // the `element` doesn't necessarily contain all item details or\n                                // have related records attached consistently with that of a query()\n                                // result item. for consistency, we attach them here.\n                                let message = item;\n                                // as long as we're not dealing with a DELETE, we need to fetch a fresh\n                                // item from storage to ensure it's fully populated.\n                                if (item.opType !== 'DELETE') {\n                                    const modelDefinition = getModelDefinition(item.model);\n                                    const keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                    const primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                    const freshElement = await this.query(item.model, primaryKeysAndValues);\n                                    message = {\n                                        ...message,\n                                        element: freshElement,\n                                    };\n                                }\n                                if (!executivePredicate ||\n                                    (await executivePredicate.matches(message.element))) {\n                                    observer.next(message);\n                                }\n                            }, 'datastore observe message handler'),\n                        error: err => observer.error(err),\n                        complete: () => observer.complete(),\n                    });\n                }, 'datastore observe observable initialization')\n                    .catch(this.handleAddProcError('DataStore.observe()'))\n                    .catch(error => {\n                    observer.error(error);\n                });\n                // better than no cleaner, but if the subscriber is handling the\n                // complete() message async and not registering with the context,\n                // this will still be problematic.\n                return this.runningProcesses.addCleaner(async () => {\n                    if (source) {\n                        source.unsubscribe();\n                    }\n                }, 'DataStore.observe() cleanup');\n            });\n        };\n        this.observeQuery = (model, criteria, options) => {\n            return new Observable(observer => {\n                const items = new Map();\n                const itemsChanged = new Map();\n                let deletedItemIds = [];\n                let handle;\n                // let predicate: ModelPredicate<T> | undefined;\n                let executivePredicate;\n                /**\n                 * As the name suggests, this geneates a snapshot in the form of\n                 * \t`{items: T[], isSynced: boolean}`\n                 * and sends it to the observer.\n                 *\n                 * SIDE EFFECT: The underlying generation and emission methods may touch:\n                 * `items`, `itemsChanged`, and `deletedItemIds`.\n                 *\n                 * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n                 */\n                const generateAndEmitSnapshot = () => {\n                    const snapshot = generateSnapshot();\n                    emitSnapshot(snapshot);\n                };\n                // a mechanism to return data after X amount of seconds OR after the\n                // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n                const limitTimerRace = new DeferredCallbackResolver({\n                    callback: generateAndEmitSnapshot,\n                    errorHandler: observer.error,\n                    maxInterval: 2000,\n                });\n                const { sort } = options || {};\n                const sortOptions = sort ? { sort } : undefined;\n                const modelDefinition = getModelDefinition(model);\n                if (!modelDefinition) {\n                    throw new Error('Could not find model definition.');\n                }\n                if (model && typeof criteria === 'function') {\n                    executivePredicate = internals(criteria(buildSeedPredicate(model)));\n                }\n                else if (isPredicatesAll(criteria)) {\n                    executivePredicate = undefined;\n                }\n                this.runningProcesses\n                    .add(async () => {\n                    try {\n                        // first, query and return any locally-available records\n                        (await this.query(model, criteria, sortOptions)).forEach(item => {\n                            const itemModelDefinition = getModelDefinition(model);\n                            const idOrPk = getIdentifierValue(itemModelDefinition, item);\n                            items.set(idOrPk, item);\n                        });\n                        // Observe the model and send a stream of updates (debounced).\n                        // We need to post-filter results instead of passing criteria through\n                        // to have visibility into items that move from in-set to out-of-set.\n                        // We need to explicitly remove those items from the existing snapshot.\n                        handle = this.observe(model).subscribe(({ element, model, opType }) => this.runningProcesses.isOpen &&\n                            this.runningProcesses.add(async () => {\n                                const itemModelDefinition = getModelDefinition(model);\n                                const idOrPk = getIdentifierValue(itemModelDefinition, element);\n                                if (executivePredicate &&\n                                    !(await executivePredicate.matches(element))) {\n                                    if (opType === 'UPDATE' &&\n                                        (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                        // tracking as a \"deleted item\" will include the item in\n                                        // page limit calculations and ensure it is removed from the\n                                        // final items collection, regardless of which collection(s)\n                                        // it is currently in. (I mean, it could be in both, right!?)\n                                        deletedItemIds.push(idOrPk);\n                                    }\n                                    else {\n                                        // ignore updates for irrelevant/filtered items.\n                                        return;\n                                    }\n                                }\n                                // Flag items which have been recently deleted\n                                // NOTE: Merging of separate operations to the same model instance is handled upstream\n                                // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                                // depends on the LATEST record (for a given id).\n                                if (opType === 'DELETE') {\n                                    deletedItemIds.push(idOrPk);\n                                }\n                                else {\n                                    itemsChanged.set(idOrPk, element);\n                                }\n                                const isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n                                const limit = itemsChanged.size - deletedItemIds.length >=\n                                    this.syncPageSize;\n                                if (limit || isSynced) {\n                                    limitTimerRace.resolve();\n                                }\n                                // kicks off every subsequent race as results sync down\n                                limitTimerRace.start();\n                            }, 'handle observeQuery observed event'));\n                        // returns a set of initial/locally-available results\n                        generateAndEmitSnapshot();\n                    }\n                    catch (err) {\n                        observer.error(err);\n                    }\n                }, 'datastore observequery startup')\n                    .catch(this.handleAddProcError('DataStore.observeQuery()'))\n                    .catch(error => {\n                    observer.error(error);\n                });\n                /**\n                 * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n                 * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n                 *\n                 * SIDE EFFECT: The shared `items` collection is recreated.\n                 */\n                const generateSnapshot = () => {\n                    const isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n                    const itemsArray = [\n                        ...Array.from(items.values()),\n                        ...Array.from(itemsChanged.values()),\n                    ];\n                    items.clear();\n                    itemsArray.forEach(item => {\n                        const itemModelDefinition = getModelDefinition(model);\n                        const idOrPk = getIdentifierValue(itemModelDefinition, item);\n                        items.set(idOrPk, item);\n                    });\n                    // remove deleted items from the final result set\n                    deletedItemIds.forEach(idOrPk => items.delete(idOrPk));\n                    const snapshot = Array.from(items.values());\n                    // we sort after we merge the snapshots (items, itemsChanged)\n                    // otherwise, the merge may not\n                    if (options?.sort) {\n                        sortItems(snapshot);\n                    }\n                    return {\n                        items: snapshot,\n                        isSynced,\n                    };\n                };\n                /**\n                 * Emits the list of items to the observer.\n                 *\n                 * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n                 * for the next snapshot.\n                 *\n                 * @param snapshot The generated items data to emit.\n                 */\n                const emitSnapshot = (snapshot) => {\n                    // send the generated snapshot to the primary subscription.\n                    // NOTE: This observer's handler *could* be async ...\n                    observer.next(snapshot);\n                    // reset the changed items sets\n                    itemsChanged.clear();\n                    deletedItemIds = [];\n                };\n                /**\n                 * Sorts an `Array` of `T` according to the sort instructions given in the\n                 * original  `observeQuery()` call.\n                 *\n                 * @param itemsToSort A array of model type.\n                 */\n                const sortItems = (itemsToSort) => {\n                    const modelDefinition = getModelDefinition(model);\n                    const pagination = this.processPagination(modelDefinition, options);\n                    const sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                    if (sortPredicates.length) {\n                        const compareFn = sortCompareFunction(sortPredicates);\n                        itemsToSort.sort(compareFn);\n                    }\n                };\n                /**\n                 * Force one last snapshot when the model is fully synced.\n                 *\n                 * This reduces latency for that last snapshot, which will otherwise\n                 * wait for the configured timeout.\n                 *\n                 * @param payload The payload from the Hub event.\n                 */\n                const hubCallback = ({ payload }) => {\n                    const { event, data } = payload;\n                    if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n                        data?.model?.name === model.name) {\n                        generateAndEmitSnapshot();\n                        hubRemove();\n                    }\n                };\n                const hubRemove = Hub.listen('datastore', hubCallback);\n                return this.runningProcesses.addCleaner(async () => {\n                    if (handle) {\n                        handle.unsubscribe();\n                    }\n                }, 'datastore observequery cleaner');\n            });\n        };\n        this.configure = (config = {}) => {\n            this.amplifyContext.InternalAPI = this.InternalAPI;\n            const { DataStore: configDataStore, authModeStrategyType: configAuthModeStrategyType, conflictHandler: configConflictHandler, errorHandler: configErrorHandler, maxRecordsToSync: configMaxRecordsToSync, syncPageSize: configSyncPageSize, fullSyncInterval: configFullSyncInterval, syncExpressions: configSyncExpressions, authProviders: configAuthProviders, storageAdapter: configStorageAdapter, ...configFromAmplify } = config;\n            const currentAppSyncConfig = Amplify.getConfig().API?.GraphQL;\n            const appSyncConfig = {\n                aws_appsync_graphqlEndpoint: currentAppSyncConfig?.endpoint,\n                aws_appsync_authenticationType: currentAppSyncConfig?.defaultAuthMode,\n                aws_appsync_region: currentAppSyncConfig?.region,\n                aws_appsync_apiKey: currentAppSyncConfig?.apiKey,\n            };\n            this.amplifyConfig = {\n                ...this.amplifyConfig,\n                ...configFromAmplify,\n                ...(currentAppSyncConfig && appSyncConfig),\n            };\n            this.conflictHandler = this.setConflictHandler(config);\n            this.errorHandler = this.setErrorHandler(config);\n            const authModeStrategyType = (configDataStore && configDataStore.authModeStrategyType) ||\n                configAuthModeStrategyType ||\n                AuthModeStrategyType.DEFAULT;\n            switch (authModeStrategyType) {\n                case AuthModeStrategyType.MULTI_AUTH:\n                    this.authModeStrategy = multiAuthStrategy(this.amplifyContext);\n                    break;\n                case AuthModeStrategyType.DEFAULT:\n                    this.authModeStrategy = defaultAuthStrategy;\n                    break;\n                default:\n                    this.authModeStrategy = defaultAuthStrategy;\n                    break;\n            }\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            this.amplifyConfig.authProviders =\n                (configDataStore && configDataStore.authProviders) || configAuthProviders;\n            this.syncExpressions =\n                (configDataStore && configDataStore.syncExpressions) ||\n                    configSyncExpressions ||\n                    this.syncExpressions;\n            this.maxRecordsToSync =\n                (configDataStore && configDataStore.maxRecordsToSync) ||\n                    configMaxRecordsToSync ||\n                    this.maxRecordsToSync ||\n                    10000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            this.amplifyConfig.maxRecordsToSync = this.maxRecordsToSync;\n            this.syncPageSize =\n                (configDataStore && configDataStore.syncPageSize) ||\n                    configSyncPageSize ||\n                    this.syncPageSize ||\n                    1000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            this.amplifyConfig.syncPageSize = this.syncPageSize;\n            this.fullSyncInterval =\n                (configDataStore && configDataStore.fullSyncInterval) ||\n                    configFullSyncInterval ||\n                    this.fullSyncInterval ||\n                    24 * 60; // 1 day\n            this.storageAdapter =\n                (configDataStore && configDataStore.storageAdapter) ||\n                    configStorageAdapter ||\n                    this.storageAdapter ||\n                    undefined;\n            this.sessionId = this.retrieveSessionId();\n        };\n    }\n    getModuleName() {\n        return 'DataStore';\n    }\n    /**\n     * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n     * more instructive errors for customers.\n     *\n     * @param operation The name of the operation (usually a Datastore method) the customer\n     * tried to call.\n     */\n    handleAddProcError(operation) {\n        /**\n         * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n         * and replaced with a friendlier message that instructs the App Developer.\n         *\n         * @param err An error to test.\n         */\n        const handler = (err) => {\n            if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n                throw new Error([\n                    `DataStoreStateError: Tried to execute \\`${operation}\\` while DataStore was \"${this.state}\".`,\n                    `This can only be done while DataStore is \"Started\" or \"Stopped\". To remedy:`,\n                    'Ensure all calls to `stop()` and `clear()` have completed first.',\n                    'If this is not possible, retry the operation until it succeeds.',\n                ].join('\\n'));\n            }\n            else {\n                throw err;\n            }\n        };\n        return handler;\n    }\n    /**\n     * Clears all data from storage and removes all data, schema info, other\n     * initialization details, and then stops DataStore.\n     *\n     * That said, reinitialization is required after clearing. This can be done\n     * by explicitiliy calling `start()` or any method that implicitly starts\n     * DataStore, such as `query()`, `save()`, or `delete()`.\n     */\n    async clear() {\n        checkSchemaInitialized();\n        this.state = DataStoreState.Clearing;\n        await this.runningProcesses.close();\n        if (this.storage === undefined) {\n            // connect to storage so that it can be cleared without fully starting DataStore\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            await this.storage.init();\n        }\n        if (syncSubscription && !syncSubscription.closed) {\n            syncSubscription.unsubscribe();\n        }\n        if (this.sync) {\n            await this.sync.stop();\n        }\n        await this.storage.clear();\n        this.initialized = undefined; // Should re-initialize when start() is called.\n        this.storage = undefined;\n        this.sync = undefined;\n        this.syncPredicates = new WeakMap();\n        await this.runningProcesses.open();\n        this.state = DataStoreState.NotRunning;\n    }\n    /**\n     * Stops all DataStore sync activities.\n     *\n     * TODO: \"Waits for graceful termination of\n     * running queries and terminates subscriptions.\"\n     */\n    async stop() {\n        this.state = DataStoreState.Stopping;\n        await this.runningProcesses.close();\n        if (syncSubscription && !syncSubscription.closed) {\n            syncSubscription.unsubscribe();\n        }\n        if (this.sync) {\n            await this.sync.stop();\n        }\n        this.initialized = undefined; // Should re-initialize when start() is called.\n        this.sync = undefined;\n        await this.runningProcesses.open();\n        this.state = DataStoreState.NotRunning;\n    }\n    /**\n     * Validates given pagination input from a query and creates a pagination\n     * argument for use against the storage layer.\n     *\n     * @param modelDefinition\n     * @param paginationProducer\n     */\n    processPagination(modelDefinition, paginationProducer) {\n        let sortPredicate;\n        const { limit, page, sort } = paginationProducer || {};\n        if (limit === undefined && page === undefined && sort === undefined) {\n            return undefined;\n        }\n        if (page !== undefined && limit === undefined) {\n            throw new Error('Limit is required when requesting a page');\n        }\n        if (page !== undefined) {\n            if (typeof page !== 'number') {\n                throw new Error('Page should be a number');\n            }\n            if (page < 0) {\n                throw new Error(\"Page can't be negative\");\n            }\n        }\n        if (limit !== undefined) {\n            if (typeof limit !== 'number') {\n                throw new Error('Limit should be a number');\n            }\n            if (limit < 0) {\n                throw new Error(\"Limit can't be negative\");\n            }\n        }\n        if (sort) {\n            sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n        }\n        return {\n            limit,\n            page,\n            sort: sortPredicate,\n        };\n    }\n    /**\n     * Examines the configured `syncExpressions` and produces a WeakMap of\n     * SchemaModel -> predicate to use during sync.\n     */\n    async processSyncExpressions() {\n        if (!this.syncExpressions || !this.syncExpressions.length) {\n            return new WeakMap();\n        }\n        const syncPredicates = await Promise.all(this.syncExpressions.map(async (syncExpression) => {\n            const { modelConstructor, conditionProducer } = await syncExpression;\n            const modelDefinition = getModelDefinition(modelConstructor);\n            // conditionProducer is either a predicate, e.g. (c) => c.field.eq(1)\n            // OR a function/promise that returns a predicate\n            const condition = await this.unwrapPromise(conditionProducer);\n            if (isPredicatesAll(condition)) {\n                return [modelDefinition, null];\n            }\n            const predicate = internals(condition(predicateFor({\n                builder: modelConstructor,\n                schema: modelDefinition,\n                pkField: extractPrimaryKeyFieldNames(modelDefinition),\n            }))).toStoragePredicate();\n            return [modelDefinition, predicate];\n        }));\n        return this.weakMapFromEntries(syncPredicates);\n    }\n    async unwrapPromise(conditionProducer) {\n        try {\n            const condition = await conditionProducer();\n            return condition || conditionProducer;\n        }\n        catch (error) {\n            if (error instanceof TypeError) {\n                return conditionProducer;\n            }\n            throw error;\n        }\n    }\n    weakMapFromEntries(entries) {\n        return entries.reduce((map, [modelDefinition, predicate]) => {\n            if (map.has(modelDefinition)) {\n                const { name } = modelDefinition;\n                logger.warn(`You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the ${name} model will be ignored.`);\n                return map;\n            }\n            if (predicate) {\n                map.set(modelDefinition, predicate);\n            }\n            return map;\n        }, new WeakMap());\n    }\n    /**\n     * A session ID to allow CMS to open databases against multiple apps.\n     * This session ID is only expected be set by AWS Amplify Studio.\n     */\n    retrieveSessionId() {\n        try {\n            const sessionId = sessionStorage.getItem('datastoreSessionId');\n            if (sessionId) {\n                const { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n                const appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n                const [appSyncId] = appSyncUrl.split('.');\n                return `${sessionId}-${appSyncId}`;\n            }\n        }\n        catch { }\n        return undefined;\n    }\n}\nconst instance = new DataStore();\ninstance.configure({});\nHub.listen('core', capsule => {\n    if (capsule.payload.event === 'configure') {\n        instance.configure({});\n    }\n});\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}