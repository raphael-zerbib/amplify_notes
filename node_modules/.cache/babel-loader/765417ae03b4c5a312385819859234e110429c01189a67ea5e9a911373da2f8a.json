{"ast":null,"code":"import { extendedEncodeURIComponent } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { StorageError } from '../../../../../errors/StorageError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst assignStringVariables = values => {\n  const queryParams = {};\n  for (const [key, value] of Object.entries(values)) {\n    if (value != null) {\n      queryParams[key] = value.toString();\n    }\n  }\n  return queryParams;\n};\n/**\n * Serailize the parameters for configuring the S3 object. Currently used by\n * `putObject` and `createMultipartUpload` API.\n *\n * @internal\n */\nconst serializeObjectConfigsToHeaders = async input => {\n  var _input$Expires;\n  return {\n    ...assignStringVariables({\n      'x-amz-acl': input.ACL,\n      'cache-control': input.CacheControl,\n      'content-disposition': input.ContentDisposition,\n      'content-language': input.ContentLanguage,\n      'content-encoding': input.ContentEncoding,\n      'content-type': input.ContentType,\n      expires: (_input$Expires = input.Expires) === null || _input$Expires === void 0 ? void 0 : _input$Expires.toUTCString(),\n      'x-amz-tagging': input.Tagging,\n      ...serializeMetadata(input.Metadata)\n    })\n  };\n};\nconst serializeMetadata = function () {\n  let metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(metadata).reduce((acc, suffix) => {\n    acc[\"x-amz-meta-\".concat(suffix.toLowerCase())] = metadata[suffix];\n    return acc;\n  }, {});\n};\n/**\n * Serialize the object key to a URL pathname.\n * @see https://github.com/aws/aws-sdk-js-v3/blob/7ed7101dcc4e81038b6c7f581162b959e6b33a04/clients/client-s3/src/protocols/Aws_restXml.ts#L1108\n *\n * @internal\n */\nconst serializePathnameObjectKey = (url, key) => {\n  return url.pathname.replace(/\\/$/, '') + \"/\".concat(key.split('/').map(extendedEncodeURIComponent).join('/'));\n};\nfunction validateS3RequiredParameter(assertion, paramName) {\n  if (!assertion) {\n    throw new StorageError({\n      name: AmplifyErrorCode.Unknown,\n      message: 'An unknown error has occurred.',\n      underlyingError: new TypeError(\"Expected a non-null value for S3 parameter \".concat(paramName)),\n      recoverySuggestion: 'This is likely to be a bug. Please reach out to library authors.'\n    });\n  }\n}\nexport { assignStringVariables, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter };","map":{"version":3,"names":["assignStringVariables","values","queryParams","key","value","Object","entries","toString","serializeObjectConfigsToHeaders","input","_input$Expires","ACL","CacheControl","ContentDisposition","ContentLanguage","ContentEncoding","ContentType","expires","Expires","toUTCString","Tagging","serializeMetadata","Metadata","metadata","arguments","length","undefined","keys","reduce","acc","suffix","concat","toLowerCase","serializePathnameObjectKey","url","pathname","replace","split","map","extendedEncodeURIComponent","join","validateS3RequiredParameter","assertion","paramName","StorageError","name","AmplifyErrorCode","Unknown","message","underlyingError","TypeError","recoverySuggestion"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/utils/serializeHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { extendedEncodeURIComponent } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { StorageError } from '../../../../../errors/StorageError';\n/**\n * @internal\n */\nexport const assignStringVariables = (values) => {\n    const queryParams = {};\n    for (const [key, value] of Object.entries(values)) {\n        if (value != null) {\n            queryParams[key] = value.toString();\n        }\n    }\n    return queryParams;\n};\n/**\n * Serailize the parameters for configuring the S3 object. Currently used by\n * `putObject` and `createMultipartUpload` API.\n *\n * @internal\n */\nexport const serializeObjectConfigsToHeaders = async (input) => ({\n    ...assignStringVariables({\n        'x-amz-acl': input.ACL,\n        'cache-control': input.CacheControl,\n        'content-disposition': input.ContentDisposition,\n        'content-language': input.ContentLanguage,\n        'content-encoding': input.ContentEncoding,\n        'content-type': input.ContentType,\n        expires: input.Expires?.toUTCString(),\n        'x-amz-tagging': input.Tagging,\n        ...serializeMetadata(input.Metadata),\n    }),\n});\nconst serializeMetadata = (metadata = {}) => Object.keys(metadata).reduce((acc, suffix) => {\n    acc[`x-amz-meta-${suffix.toLowerCase()}`] = metadata[suffix];\n    return acc;\n}, {});\n/**\n * Serialize the object key to a URL pathname.\n * @see https://github.com/aws/aws-sdk-js-v3/blob/7ed7101dcc4e81038b6c7f581162b959e6b33a04/clients/client-s3/src/protocols/Aws_restXml.ts#L1108\n *\n * @internal\n */\nexport const serializePathnameObjectKey = (url, key) => {\n    return (url.pathname.replace(/\\/$/, '') +\n        `/${key.split('/').map(extendedEncodeURIComponent).join('/')}`);\n};\nexport function validateS3RequiredParameter(assertion, paramName) {\n    if (!assertion) {\n        throw new StorageError({\n            name: AmplifyErrorCode.Unknown,\n            message: 'An unknown error has occurred.',\n            underlyingError: new TypeError(`Expected a non-null value for S3 parameter ${paramName}`),\n            recoverySuggestion: 'This is likely to be a bug. Please reach out to library authors.',\n        });\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AAIA;AACA;AACA;AACY,MAACA,qBAAqB,GAAIC,MAAM,IAAK;EAC7C,MAAMC,WAAW,GAAG,EAAE;EACtB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,MAAM,CAAC,EAAE;IAC/C,IAAIG,KAAK,IAAI,IAAI,EAAE;MACfF,WAAW,CAACC,GAAG,CAAC,GAAGC,KAAK,CAACG,QAAQ,EAAE;IAC/C;EACA;EACI,OAAOL,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACM,+BAA+B,GAAG,MAAOC,KAAK;EAAA,IAAAC,cAAA;EAAA,OAAM;IAC7D,GAAGV,qBAAqB,CAAC;MACrB,WAAW,EAAES,KAAK,CAACE,GAAG;MACtB,eAAe,EAAEF,KAAK,CAACG,YAAY;MACnC,qBAAqB,EAAEH,KAAK,CAACI,kBAAkB;MAC/C,kBAAkB,EAAEJ,KAAK,CAACK,eAAe;MACzC,kBAAkB,EAAEL,KAAK,CAACM,eAAe;MACzC,cAAc,EAAEN,KAAK,CAACO,WAAW;MACjCC,OAAO,GAAAP,cAAA,GAAED,KAAK,CAACS,OAAO,cAAAR,cAAA,uBAAbA,cAAA,CAAeS,WAAW,EAAE;MACrC,eAAe,EAAEV,KAAK,CAACW,OAAO;MAC9B,GAAGC,iBAAiB,CAACZ,KAAK,CAACa,QAAQ;IAC3C,CAAK;EACL,CAAC;AAAA;AACD,MAAMD,iBAAiB,GAAG,SAAAA,CAAA;EAAA,IAACE,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OAAKnB,MAAM,CAACsB,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;IACvFD,GAAG,eAAAE,MAAA,CAAeD,MAAM,CAACE,WAAW,EAAE,EAAG,GAAGT,QAAQ,CAACO,MAAM,CAAC;IAC5D,OAAOD,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;AAAA;AACN;AACA;AACA;AACA;AACA;AACA;AACY,MAACI,0BAA0B,GAAGA,CAACC,GAAG,EAAE/B,GAAG,KAAK;EACpD,OAAQ+B,GAAG,CAACC,QAAQ,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,OAAAL,MAAA,CAC/B5B,GAAG,CAACkC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,0BAA0B,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAE;AACtE;AACO,SAASC,2BAA2BA,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC9D,IAAI,CAACD,SAAS,EAAE;IACZ,MAAM,IAAIE,YAAY,CAAC;MACnBC,IAAI,EAAEC,gBAAgB,CAACC,OAAO;MAC9BC,OAAO,EAAE,gCAAgC;MACzCC,eAAe,EAAE,IAAIC,SAAS,+CAAAnB,MAAA,CAA+CY,SAAS,CAAE,CAAC;MACzFQ,kBAAkB,EAAE;IAChC,CAAS,CAAC;EACV;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}