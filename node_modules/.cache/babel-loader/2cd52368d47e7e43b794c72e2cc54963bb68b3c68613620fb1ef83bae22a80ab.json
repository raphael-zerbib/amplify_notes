{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../utils/resolveS3ConfigAndInput.mjs';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { createDownloadTask } from '../utils/transferTask.mjs';\nimport '../utils/client/base.mjs';\nimport { getObject } from '../utils/client/getObject.mjs';\nimport '../utils/client/listObjectsV2.mjs';\nimport '../utils/client/putObject.mjs';\nimport '../utils/client/createMultipartUpload.mjs';\nimport '../utils/client/uploadPart.mjs';\nimport '../utils/client/completeMultipartUpload.mjs';\nimport '../utils/client/listParts.mjs';\nimport '../utils/client/abortMultipartUpload.mjs';\nimport '../utils/client/copyObject.mjs';\nimport '../utils/client/headObject.mjs';\nimport '../utils/client/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../utils/userAgent.mjs';\nimport '../../../errors/types/validation.mjs';\nimport { logger } from '../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Download S3 object data to memory\n *\n * @param input - The DownloadDataInput object.\n * @returns A cancelable task exposing result promise from `result` property.\n * @throws service: {@link S3Exception} - thrown when checking for existence of the object\n * @throws validation: {@link StorageValidationErrorCode } - Validation errors\n *\n * @example\n * ```ts\n * // Download a file from s3 bucket\n * const { body, eTag } = await downloadData({ key, data: file, options: {\n *   onProgress, // Optional progress callback.\n * } }).result;\n * ```\n * @example\n * ```ts\n * // Cancel a task\n * const downloadTask = downloadData({ key, data: file });\n * //...\n * downloadTask.cancel();\n * try {\n * \tawait downloadTask.result;\n * } catch (error) {\n * \tif(isCancelError(error)) {\n *    // Handle error thrown by task cancelation.\n * \t}\n * }\n *```\n */\nconst downloadData = input => {\n  const abortController = new AbortController();\n  const downloadTask = createDownloadTask({\n    job: downloadDataJob(input, abortController.signal),\n    onCancel: message => {\n      abortController.abort(message);\n    }\n  });\n  return downloadTask;\n};\nconst downloadDataJob = (_ref, abortSignal) => {\n  let {\n    options: downloadDataOptions,\n    key\n  } = _ref;\n  return async () => {\n    const {\n      bucket,\n      keyPrefix,\n      s3Config\n    } = await resolveS3ConfigAndInput(Amplify, downloadDataOptions);\n    const finalKey = keyPrefix + key;\n    logger.debug(\"download \".concat(key, \" from \").concat(finalKey, \".\"));\n    const {\n      Body: body,\n      LastModified: lastModified,\n      ContentLength: size,\n      ETag: eTag,\n      Metadata: metadata,\n      VersionId: versionId,\n      ContentType: contentType\n    } = await getObject({\n      ...s3Config,\n      abortSignal,\n      onDownloadProgress: downloadDataOptions === null || downloadDataOptions === void 0 ? void 0 : downloadDataOptions.onProgress,\n      userAgentValue: getStorageUserAgentValue(StorageAction.DownloadData)\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      ...((downloadDataOptions === null || downloadDataOptions === void 0 ? void 0 : downloadDataOptions.bytesRange) && {\n        Range: \"bytes=\".concat(downloadDataOptions.bytesRange.start, \"-\").concat(downloadDataOptions.bytesRange.end)\n      })\n    });\n    return {\n      key,\n      body,\n      lastModified,\n      size,\n      contentType,\n      eTag,\n      metadata,\n      versionId\n    };\n  };\n};\nexport { downloadData };","map":{"version":3,"names":["downloadData","input","abortController","AbortController","downloadTask","createDownloadTask","job","downloadDataJob","signal","onCancel","message","abort","_ref","abortSignal","options","downloadDataOptions","key","bucket","keyPrefix","s3Config","resolveS3ConfigAndInput","Amplify","finalKey","logger","debug","concat","Body","body","LastModified","lastModified","ContentLength","size","ETag","eTag","Metadata","metadata","VersionId","versionId","ContentType","contentType","getObject","onDownloadProgress","onProgress","userAgentValue","getStorageUserAgentValue","StorageAction","DownloadData","Bucket","Key","bytesRange","Range","start","end"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/storage/src/providers/s3/apis/downloadData.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput } from '../utils/resolveS3ConfigAndInput';\nimport { createDownloadTask } from '../utils';\nimport { getObject } from '../utils/client';\nimport { getStorageUserAgentValue } from '../utils/userAgent';\nimport { logger } from '../../../utils';\n/**\n * Download S3 object data to memory\n *\n * @param input - The DownloadDataInput object.\n * @returns A cancelable task exposing result promise from `result` property.\n * @throws service: {@link S3Exception} - thrown when checking for existence of the object\n * @throws validation: {@link StorageValidationErrorCode } - Validation errors\n *\n * @example\n * ```ts\n * // Download a file from s3 bucket\n * const { body, eTag } = await downloadData({ key, data: file, options: {\n *   onProgress, // Optional progress callback.\n * } }).result;\n * ```\n * @example\n * ```ts\n * // Cancel a task\n * const downloadTask = downloadData({ key, data: file });\n * //...\n * downloadTask.cancel();\n * try {\n * \tawait downloadTask.result;\n * } catch (error) {\n * \tif(isCancelError(error)) {\n *    // Handle error thrown by task cancelation.\n * \t}\n * }\n *```\n */\nexport const downloadData = (input) => {\n    const abortController = new AbortController();\n    const downloadTask = createDownloadTask({\n        job: downloadDataJob(input, abortController.signal),\n        onCancel: (message) => {\n            abortController.abort(message);\n        },\n    });\n    return downloadTask;\n};\nconst downloadDataJob = ({ options: downloadDataOptions, key }, abortSignal) => async () => {\n    const { bucket, keyPrefix, s3Config } = await resolveS3ConfigAndInput(Amplify, downloadDataOptions);\n    const finalKey = keyPrefix + key;\n    logger.debug(`download ${key} from ${finalKey}.`);\n    const { Body: body, LastModified: lastModified, ContentLength: size, ETag: eTag, Metadata: metadata, VersionId: versionId, ContentType: contentType, } = await getObject({\n        ...s3Config,\n        abortSignal,\n        onDownloadProgress: downloadDataOptions?.onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.DownloadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ...(downloadDataOptions?.bytesRange && {\n            Range: `bytes=${downloadDataOptions.bytesRange.start}-${downloadDataOptions.bytesRange.end}`,\n        }),\n    });\n    return {\n        key,\n        body,\n        lastModified,\n        size,\n        contentType,\n        eTag,\n        metadata,\n        versionId,\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,eAAe,GAAG,IAAIC,eAAe,EAAE;EAC7C,MAAMC,YAAY,GAAGC,kBAAkB,CAAC;IACpCC,GAAG,EAAEC,eAAe,CAACN,KAAK,EAAEC,eAAe,CAACM,MAAM,CAAC;IACnDC,QAAQ,EAAGC,OAAO,IAAK;MACnBR,eAAe,CAACS,KAAK,CAACD,OAAO,CAAC;IAC1C;EACA,CAAK,CAAC;EACF,OAAON,YAAY;AACvB;AACA,MAAMG,eAAe,GAAGA,CAAAK,IAAA,EAAwCC,WAAW;EAAA,IAAlD;IAAEC,OAAO,EAAEC,mBAAmB;IAAEC;EAAG,CAAE,GAAAJ,IAAA;EAAA,OAAkB,YAAY;IACxF,MAAM;MAAEK,MAAM;MAAEC,SAAS;MAAEC;IAAQ,CAAE,GAAG,MAAMC,uBAAuB,CAACC,OAAO,EAAEN,mBAAmB,CAAC;IACnG,MAAMO,QAAQ,GAAGJ,SAAS,GAAGF,GAAG;IAChCO,MAAM,CAACC,KAAK,aAAAC,MAAA,CAAaT,GAAG,YAAAS,MAAA,CAASH,QAAQ,MAAG,CAAC;IACjD,MAAM;MAAEI,IAAI,EAAEC,IAAI;MAAEC,YAAY,EAAEC,YAAY;MAAEC,aAAa,EAAEC,IAAI;MAAEC,IAAI,EAAEC,IAAI;MAAEC,QAAQ,EAAEC,QAAQ;MAAEC,SAAS,EAAEC,SAAS;MAAEC,WAAW,EAAEC;IAAW,CAAG,GAAG,MAAMC,SAAS,CAAC;MACrK,GAAGrB,QAAQ;MACXN,WAAW;MACX4B,kBAAkB,EAAE1B,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAE2B,UAAU;MACnDC,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,YAAY;IAC3E,CAAK,EAAE;MACCC,MAAM,EAAE9B,MAAM;MACd+B,GAAG,EAAE1B,QAAQ;MACb,IAAI,CAAAP,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEkC,UAAU,KAAI;QACnCC,KAAK,WAAAzB,MAAA,CAAWV,mBAAmB,CAACkC,UAAU,CAACE,KAAK,OAAA1B,MAAA,CAAIV,mBAAmB,CAACkC,UAAU,CAACG,GAAG;MACtG,CAAS;IACT,CAAK,CAAC;IACF,OAAO;MACHpC,GAAG;MACHW,IAAI;MACJE,YAAY;MACZE,IAAI;MACJQ,WAAW;MACXN,IAAI;MACJE,QAAQ;MACRE;IACR,CAAK;EACL,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}