{"ast":null,"code":"import { PredicateInternalsKey } from '../types.mjs';\nimport { comparisonKeys, ModelPredicateCreator } from './index.mjs';\nimport { ModelRelationship } from '../storage/relationship.mjs';\nimport { asyncSome, asyncEvery } from '../util.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst ops = [...comparisonKeys];\n/**\n * A map from keys (exposed to customers) to the internal predicate data\n * structures invoking code should not muck with.\n */\nconst predicateInternalsMap = new Map();\n/**\n * Creates a link between a key (and generates a key if needed) and an internal\n * `GroupCondition`, which allows us to return a key object instead of the gory\n * conditions details to customers/invoking code.\n *\n * @param condition The internal condition to keep hidden.\n * @param key The object DataStore will use to find the internal condition.\n * If no key is given, an empty one is created.\n */\nconst registerPredicateInternals = (condition, key) => {\n  const finalKey = key || new PredicateInternalsKey();\n  predicateInternalsMap.set(finalKey, condition);\n  return finalKey;\n};\n/**\n * Takes a key object from `registerPredicateInternals()` to fetch an internal\n * `GroupCondition` object, which can then be used to query storage or\n * test/match objects.\n *\n * This indirection exists to hide `GroupCondition` from public interfaces, since\n * `GroupCondition` contains extra methods and properties that public callers\n * should not use.\n *\n * @param key A key object previously returned by `registerPredicateInternals()`\n */\nconst internals = key => {\n  if (!predicateInternalsMap.has(key)) {\n    throw new Error(\"Invalid predicate. Terminate your predicate with a valid condition (e.g., `p => p.field.eq('value')`) or pass `Predicates.ALL`.\");\n  }\n  return predicateInternalsMap.get(key);\n};\n/**\n * Maps operators to negated operators.\n * Used to facilitate propagation of negation down a tree of conditions.\n */\nconst negations = {\n  and: 'or',\n  or: 'and',\n  not: 'and',\n  eq: 'ne',\n  ne: 'eq',\n  gt: 'le',\n  ge: 'lt',\n  lt: 'ge',\n  le: 'gt',\n  contains: 'notContains',\n  notContains: 'contains'\n};\n/**\n * A condition that can operate against a single \"primitive\" field of a model or item.\n * @member field The field of *some record* to test against.\n * @member operator The equality or comparison operator to use.\n * @member operands The operands for the equality/comparison check.\n */\nclass FieldCondition {\n  constructor(field, operator, operands) {\n    this.field = field;\n    this.operator = operator;\n    this.operands = operands;\n    this.validate();\n  }\n  /**\n   * Creates a copy of self.\n   * @param extract Not used. Present only to fulfill the `UntypedCondition` interface.\n   * @returns A new, identitical `FieldCondition`.\n   */\n  copy(extract) {\n    return [new FieldCondition(this.field, this.operator, [...this.operands]), undefined];\n  }\n  /**\n   * Produces a tree structure similar to a graphql condition. The returned\n   * structure is \"dumb\" and is intended for another query/condition\n   * generation mechanism to interpret, such as the cloud or storage query\n   * builders.\n   *\n   * E.g.,\n   *\n   * ```json\n   * {\n   * \t\"name\": {\n   * \t\t\"eq\": \"robert\"\n   * \t}\n   * }\n   * ```\n   */\n  toAST() {\n    return {\n      [this.field]: {\n        [this.operator]: this.operator === 'between' ? [this.operands[0], this.operands[1]] : this.operands[0]\n      }\n    };\n  }\n  /**\n   * Produces a new condition (`FieldCondition` or `GroupCondition`) that\n   * matches the opposite of this condition.\n   *\n   * Intended to be used when applying De Morgan's Law, which can be done to\n   * produce more efficient queries against the storage layer if a negation\n   * appears in the query tree.\n   *\n   * For example:\n   *\n   * 1. `name.eq('robert')` becomes `name.ne('robert')`\n   * 2. `price.between(100, 200)` becomes `m => m.or(m => [m.price.lt(100), m.price.gt(200)])`\n   *\n   * @param model The model meta to use when construction a new `GroupCondition`\n   * for cases where the negation requires multiple `FieldCondition`'s.\n   */\n  negated(model) {\n    if (this.operator === 'between') {\n      return new GroupCondition(model, undefined, undefined, 'or', [new FieldCondition(this.field, 'lt', [this.operands[0]]), new FieldCondition(this.field, 'gt', [this.operands[1]])]);\n    } else if (this.operator === 'beginsWith') {\n      // beginsWith negation doesn't have a good, safe optimation right now.\n      // just re-wrap it in negation. The adapter will have to scan-and-filter,\n      // as is likely optimal for negated beginsWith conditions *anyway*.\n      return new GroupCondition(model, undefined, undefined, 'not', [new FieldCondition(this.field, 'beginsWith', [this.operands[0]])]);\n    } else {\n      return new FieldCondition(this.field, negations[this.operator], this.operands);\n    }\n  }\n  /**\n   * Not implemented. Not needed. GroupCondition instead consumes FieldConditions and\n   * transforms them into legacy predicates. (*For now.*)\n   * @param storage N/A. If ever implemented, the storage adapter to query.\n   * @returns N/A. If ever implemented, return items from `storage` that match.\n   */\n  async fetch(storage) {\n    return Promise.reject('No implementation needed [yet].');\n  }\n  /**\n   * Determins whether a given item matches the expressed condition.\n   * @param item The item to test.\n   * @returns `Promise<boolean>`, `true` if matches; `false` otherwise.\n   */\n  async matches(item) {\n    const v = item[this.field];\n    const operations = {\n      eq: () => v === this.operands[0],\n      ne: () => v !== this.operands[0],\n      gt: () => v > this.operands[0],\n      ge: () => v >= this.operands[0],\n      lt: () => v < this.operands[0],\n      le: () => v <= this.operands[0],\n      contains: () => (v === null || v === void 0 ? void 0 : v.indexOf(this.operands[0])) > -1,\n      notContains: () => !v ? true : v.indexOf(this.operands[0]) === -1,\n      beginsWith: () => v === null || v === void 0 ? void 0 : v.startsWith(this.operands[0]),\n      between: () => v >= this.operands[0] && v <= this.operands[1]\n    };\n    const operation = operations[this.operator];\n    if (operation) {\n      const result = operation();\n      return result;\n    } else {\n      throw new Error(\"Invalid operator given: \".concat(this.operator));\n    }\n  }\n  /**\n   * Checks `this.operands` for compatibility with `this.operator`.\n   */\n  validate() {\n    /**\n     * Creates a validator that checks for a particular `operands` count.\n     * Throws an exception if the `count` disagrees with `operands.length`.\n     * @param count The number of `operands` expected.\n     */\n    const argumentCount = count => {\n      const argsClause = count === 1 ? 'argument is' : 'arguments are';\n      return () => {\n        if (this.operands.length !== count) {\n          return \"Exactly \".concat(count, \" \").concat(argsClause, \" required.\");\n        }\n      };\n    };\n    // NOTE: validations should return a message on failure.\n    // hence, they should be \"joined\" together with logical OR's\n    // as seen in the `between:` entry.\n    const validations = {\n      eq: argumentCount(1),\n      ne: argumentCount(1),\n      gt: argumentCount(1),\n      ge: argumentCount(1),\n      lt: argumentCount(1),\n      le: argumentCount(1),\n      contains: argumentCount(1),\n      notContains: argumentCount(1),\n      beginsWith: argumentCount(1),\n      between: () => argumentCount(2)() || (this.operands[0] > this.operands[1] ? 'The first argument must be less than or equal to the second argument.' : null)\n    };\n    const validate = validations[this.operator];\n    if (validate) {\n      const e = validate();\n      if (typeof e === 'string') throw new Error(\"Incorrect usage of `\".concat(this.operator, \"()`: \").concat(e));\n    } else {\n      throw new Error(\"Non-existent operator: `\".concat(this.operator, \"()`\"));\n    }\n  }\n}\n/**\n * Small utility function to generate a monotonically increasing ID.\n * Used by GroupCondition to help keep track of which group is doing what,\n * when, and where during troubleshooting.\n */\nconst getGroupId = (() => {\n  let seed = 1;\n  return () => \"group_\".concat(seed++);\n})();\n/**\n * A set of sub-conditions to operate against a model, optionally scoped to\n * a specific field, combined with the given operator (one of `and`, `or`, or `not`).\n * @member groupId Used to distinguish between GroupCondition instances for\n * debugging and troublehsooting.\n * @member model A metadata object that tells GroupCondition what to query and how.\n * @member field The field on the model that the sub-conditions apply to.\n * @member operator How to group child conditions together.\n * @member operands The child conditions.\n */\nclass GroupCondition {\n  constructor(\n  /**\n   * The `ModelMeta` of the model to query and/or filter against.\n   * Expected to contain:\n   *\n   * ```js\n   * {\n   * \tbuilder: ModelConstructor,\n   * \tschema: SchemaModel,\n   * \tpkField: string[]\n   * }\n   * ```\n   */\n  model,\n  /**\n   * If populated, this group specifices a condition on a relationship.\n   *\n   * If `field` does *not* point to a related model, that's an error. It\n   * could indicate that the `GroupCondition` was instantiated with bad\n   * data, or that the model metadata is incorrect.\n   */\n  field,\n  /**\n   * If a `field` is given, whether the relationship is a `HAS_ONE`,\n   * 'HAS_MANY`, or `BELONGS_TO`.\n   *\n   * TODO: Remove this and replace with derivation using\n   * `ModelRelationship.from(this.model, this.field).relationship`;\n   */\n  relationshipType,\n  /**\n   *\n   */\n  operator,\n  /**\n   *\n   */\n  operands) {\n    let isOptimized = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    this.model = model;\n    this.field = field;\n    this.relationshipType = relationshipType;\n    this.operator = operator;\n    this.operands = operands;\n    this.isOptimized = isOptimized;\n    // `groupId` was used for development/debugging.\n    // Should we leave this in for future troubleshooting?\n    this.groupId = getGroupId();\n  }\n  /**\n   * Returns a copy of a GroupCondition, which also returns the copy of a\n   * given reference node to \"extract\".\n   * @param extract A node of interest. Its copy will *also* be returned if the node exists.\n   * @returns [The full copy, the copy of `extract` | undefined]\n   */\n  copy(extract) {\n    const copied = new GroupCondition(this.model, this.field, this.relationshipType, this.operator, []);\n    let extractedCopy = extract === this ? copied : undefined;\n    this.operands.forEach(o => {\n      const [operandCopy, extractedFromOperand] = o.copy(extract);\n      copied.operands.push(operandCopy);\n      extractedCopy = extractedCopy || extractedFromOperand;\n    });\n    return [copied, extractedCopy];\n  }\n  /**\n   * Creates a new `GroupCondition` that contains only the local field conditions,\n   * omitting related model conditions. That resulting `GroupCondition` can be\n   * used to produce predicates that are compatible with the storage adapters and\n   * Cloud storage.\n   *\n   * @param negate Whether the condition tree should be negated according\n   * to De Morgan's law.\n   */\n  withFieldConditionsOnly(negate) {\n    const negateChildren = negate !== (this.operator === 'not');\n    return new GroupCondition(this.model, undefined, undefined, negate ? negations[this.operator] : this.operator, this.operands.filter(o => o instanceof FieldCondition).map(o => negateChildren ? o.negated(this.model) : o));\n  }\n  /**\n   * Returns a version of the predicate tree with unnecessary logical groups\n   * condensed and merged together. This is intended to create a dense tree\n   * with leaf nodes (`FieldCondition`'s) aggregated under as few group conditions\n   * as possible for the most efficient fetching possible -- it allows `fetch()`.\n   *\n   * E.g. a grouping like this:\n   *\n   * ```yaml\n   * and:\n   * \tand:\n   * \t\tid:\n   * \t\t\teq: \"abc\"\n   * \tand:\n   * \t\tname:\n   * \t\t\teq: \"xyz\"\n   * ```\n   *\n   * Will become this:\n   *\n   * ```yaml\n   * and:\n   * \tid:\n   * \t\teq: \"abc\"\n   * \tname:\n   * \t\teq: \"xyz\"\n   * ```\n   *\n   * This allows `fetch()` to pass both the `id` and `name` conditions to the adapter\n   * together, which can then decide what index to use based on both fields together.\n   *\n   * @param preserveNode Whether to preserve the current node and to explicitly not eliminate\n   * it during optimization. Used internally to preserve the root node and children of\n   * `not` groups. `not` groups will always have a single child, so there's nothing to\n   * optimize below a `not` (for now), and it makes the query logic simpler later.\n   */\n  optimized() {\n    let preserveNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const operands = this.operands.map(o => o instanceof GroupCondition ? o.optimized(this.operator === 'not') : o);\n    // we're only collapsing and/or groups that contains a single child for now,\n    // because they're much more common and much more trivial to collapse. basically,\n    // an `and`/`or` that contains a single child doesn't require the layer of\n    // logical grouping.\n    if (!preserveNode && ['and', 'or'].includes(this.operator) && !this.field && operands.length === 1) {\n      const operand = operands[0];\n      if (operand instanceof FieldCondition) {\n        // between conditions should NOT be passed up the chain. if they\n        // need to be *negated* later, it is important that they be properly\n        // contained in an AND group. when de morgan's law is applied, the\n        // conditions are reversed and the AND group flips to an OR. this\n        // doesn't work right if the a `between` doesn't live in an AND group.\n        if (operand.operator !== 'between') {\n          return operand;\n        }\n      } else {\n        return operand;\n      }\n    }\n    return new GroupCondition(this.model, this.field, this.relationshipType, this.operator, operands, true);\n  }\n  /**\n   * Fetches matching records from a given storage adapter using legacy predicates (for now).\n   * @param storage The storage adapter this predicate will query against.\n   * @param breadcrumb For debugging/troubleshooting. A list of the `groupId`'s this\n   * GroupdCondition.fetch is nested within.\n   * @param negate Whether to match on the `NOT` of `this`.\n   * @returns An `Promise` of `any[]` from `storage` matching the child conditions.\n   */\n  async fetch(storage) {\n    var _resultIndex;\n    let breadcrumb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let negate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!this.isOptimized) {\n      return this.optimized().fetch(storage);\n    }\n    const resultGroups = [];\n    const operator = negate ? negations[this.operator] : this.operator;\n    const negateChildren = negate !== (this.operator === 'not');\n    /**\n     * Conditions that must be branched out and used to generate a base, \"candidate\"\n     * result set.\n     *\n     * If `field` is populated, these groups select *related* records, and the base,\n     * candidate results are selected to match those.\n     */\n    const groups = this.operands.filter(op => op instanceof GroupCondition);\n    /**\n     * Simple conditions that must match the target model of `this`.\n     */\n    const conditions = this.operands.filter(op => op instanceof FieldCondition);\n    for (const g of groups) {\n      const relatives = await g.fetch(storage, [...breadcrumb, this.groupId], negateChildren);\n      // no relatives -> no need to attempt to perform a \"join\" query for\n      // candidate results:\n      //\n      // select a.* from a,b where b.id in EMPTY_SET ==> EMPTY_SET\n      //\n      // Additionally, the entire (sub)-query can be short-circuited if\n      // the operator is `AND`. Illustrated in SQL:\n      //\n      // select a.* from a where\n      //   id in [a,b,c]\n      //     AND                        <\n      //   id in EMTPY_SET            <<< Look!\n      //     AND                        <\n      //   id in [x,y,z]\n      //\n      // YIELDS: EMPTY_SET           // <-- Easy peasy. Lemon squeezy.\n      //\n      if (relatives.length === 0) {\n        // aggressively short-circuit as soon as we know the group condition will fail\n        if (operator === 'and') {\n          return [];\n        }\n        // less aggressive short-circuit if we know the relatives will produce no\n        // candidate results; but aren't sure yet how this affects the group condition.\n        resultGroups.push([]);\n        continue;\n      }\n      if (g.field) {\n        // `relatives` are actual relatives. We'll skim them for FK query values.\n        // Use the relatives to add candidate result sets (`resultGroups`)\n        const relationship = ModelRelationship.from(this.model, g.field);\n        if (relationship) {\n          const allJoinConditions = [];\n          for (const relative of relatives) {\n            const relativeConditions = [];\n            for (let i = 0; i < relationship.localJoinFields.length; i++) {\n              relativeConditions.push({\n                [relationship.localJoinFields[i]]: {\n                  eq: relative[relationship.remoteJoinFields[i]]\n                }\n              });\n            }\n            allJoinConditions.push({\n              and: relativeConditions\n            });\n          }\n          const predicate = ModelPredicateCreator.createFromAST(this.model.schema, {\n            or: allJoinConditions\n          });\n          resultGroups.push(await storage.query(this.model.builder, predicate));\n        } else {\n          throw new Error('Missing field metadata.');\n        }\n      } else {\n        // relatives are not actually relatives. they're candidate results.\n        resultGroups.push(relatives);\n      }\n    }\n    // if conditions is empty at this point, child predicates found no matches.\n    // i.e., we can stop looking and return empty.\n    if (conditions.length > 0) {\n      const predicate = this.withFieldConditionsOnly(negateChildren).toStoragePredicate();\n      resultGroups.push(await storage.query(this.model.builder, predicate));\n    } else if (conditions.length === 0 && resultGroups.length === 0) {\n      resultGroups.push(await storage.query(this.model.builder));\n    }\n    // PK might be a single field, like `id`, or it might be several fields.\n    // so, we'll need to extract the list of PK fields from an object\n    // and stringify the list for easy comparison / merging.\n    const getPKValue = item => JSON.stringify(this.model.pkField.map(name => item[name]));\n    // will be used for intersecting or unioning results\n    let resultIndex;\n    if (operator === 'and') {\n      if (resultGroups.length === 0) {\n        return [];\n      }\n      // for each group, we intersect, removing items from the result index\n      // that aren't present in each subsequent group.\n      for (const group of resultGroups) {\n        if (resultIndex === undefined) {\n          resultIndex = new Map(group.map(item => [getPKValue(item), item]));\n        } else {\n          const intersectWith = new Map(group.map(item => [getPKValue(item), item]));\n          for (const k of resultIndex.keys()) {\n            if (!intersectWith.has(k)) {\n              resultIndex.delete(k);\n            }\n          }\n        }\n      }\n    } else if (operator === 'or' || operator === 'not') {\n      // it's OK to handle NOT here, because NOT must always only negate\n      // a single child predicate. NOT logic will have been distributed down\n      // to the leaf conditions already.\n      resultIndex = new Map();\n      // just merge the groups, performing DISTINCT-ification by ID.\n      for (const group of resultGroups) {\n        for (const item of group) {\n          resultIndex.set(getPKValue(item), item);\n        }\n      }\n    }\n    return Array.from(((_resultIndex = resultIndex) === null || _resultIndex === void 0 ? void 0 : _resultIndex.values()) || []);\n  }\n  /**\n   * Determines whether a single item matches the conditions of `this`.\n   * When checking the target `item`'s properties, each property will be `await`'d\n   * to ensure lazy-loading is respected where applicable.\n   * @param item The item to match against.\n   * @param ignoreFieldName Tells `match()` that the field name has already been dereferenced.\n   * (Used for iterating over children on HAS_MANY checks.)\n   * @returns A boolean (promise): `true` if matched, `false` otherwise.\n   */\n  async matches(item) {\n    let ignoreFieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const itemToCheck = this.field && !ignoreFieldName ? await item[this.field] : item;\n    // if there is no item to check, we can stop recursing immediately.\n    // a condition cannot match against an item that does not exist. this\n    // can occur when `item.field` is optional in the schema.\n    if (!itemToCheck) {\n      return false;\n    }\n    if (this.relationshipType === 'HAS_MANY' && typeof itemToCheck[Symbol.asyncIterator] === 'function') {\n      for await (const singleItem of itemToCheck) {\n        if (await this.matches(singleItem, true)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (this.operator === 'or') {\n      return asyncSome(this.operands, c => c.matches(itemToCheck));\n    } else if (this.operator === 'and') {\n      return asyncEvery(this.operands, c => c.matches(itemToCheck));\n    } else if (this.operator === 'not') {\n      if (this.operands.length !== 1) {\n        throw new Error('Invalid arguments! `not()` accepts exactly one predicate expression.');\n      }\n      return !(await this.operands[0].matches(itemToCheck));\n    } else {\n      throw new Error('Invalid group operator!');\n    }\n  }\n  /**\n   * Tranfsorm to a AppSync GraphQL compatible AST.\n   * (Does not support filtering in nested types.)\n   */\n  toAST() {\n    if (this.field) throw new Error('Nested type conditions are not supported!');\n    return {\n      [this.operator]: this.operands.map(operand => operand.toAST())\n    };\n  }\n  /**\n   * Turn this predicate group into something a storage adapter\n   * understands how to use.\n   */\n  toStoragePredicate() {\n    return ModelPredicateCreator.createFromAST(this.model.schema, this.toAST());\n  }\n  /**\n   * A JSON representation that's good for debugging.\n   */\n  toJSON() {\n    return {\n      ...this,\n      model: this.model.schema.name\n    };\n  }\n}\n/**\n * Creates a \"seed\" predicate that can be used to build an executable condition.\n * This is used in `query()`, for example, to seed customer- E.g.,\n *\n * ```\n * const p = predicateFor({builder: modelConstructor, schema: modelSchema, pkField: string[]});\n * p.and(child => [\n *   child.field.eq('whatever'),\n *   child.childModel.childField.eq('whatever else'),\n *   child.childModel.or(child => [\n *     child.otherField.contains('x'),\n *     child.otherField.contains('y'),\n *     child.otherField.contains('z'),\n *   ])\n * ])\n * ```\n *\n * `predicateFor()` returns objecst with recursive getters. To facilitate this,\n * a `query` and `tail` can be provided to \"accumulate\" nested conditions.\n *\n * @param ModelType The ModelMeta used to build child properties.\n * @param field Scopes the query branch to a field.\n * @param query A base query to build on. Omit to start a new query.\n * @param tail The point in an existing `query` to attach new conditions to.\n * @returns A ModelPredicate (builder) that customers can create queries with.\n * (As shown in function description.)\n */\nfunction recursivePredicateFor(ModelType) {\n  let allowRecursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let field = arguments.length > 2 ? arguments[2] : undefined;\n  let query = arguments.length > 3 ? arguments[3] : undefined;\n  let tail = arguments.length > 4 ? arguments[4] : undefined;\n  // to be used if we don't have a base query or tail to build onto\n  const starter = new GroupCondition(ModelType, field, undefined, 'and', []);\n  const baseCondition = query && tail ? query : starter;\n  const tailCondition = query && tail ? tail : starter;\n  // our eventual return object, which can be built upon.\n  // next steps will be to add or(), and(), not(), and field.op() methods.\n  const link = {};\n  // so it can be looked up later with in the internals when processing conditions.\n  registerPredicateInternals(baseCondition, link);\n  const copyLink = () => {\n    const [query, newTail] = baseCondition.copy(tailCondition);\n    const newLink = recursivePredicateFor(ModelType, allowRecursion, undefined, query, newTail);\n    return {\n      query,\n      newTail,\n      newLink\n    };\n  };\n  // Adds .or() and .and() methods to the link.\n  // TODO: If revisiting this code, consider writing a Proxy instead.\n  ['and', 'or'].forEach(op => {\n    link[op] = builder => {\n      // or() and and() will return a copy of the original link\n      // to head off mutability concerns.\n      const {\n        query,\n        newTail\n      } = copyLink();\n      const childConditions = builder(recursivePredicateFor(ModelType, allowRecursion));\n      if (!Array.isArray(childConditions)) {\n        throw new Error(\"Invalid predicate. `\".concat(op, \"` groups must return an array of child conditions.\"));\n      }\n      // the customer will supply a child predicate, which apply to the `model.field`\n      // of the tail GroupCondition.\n      newTail === null || newTail === void 0 || newTail.operands.push(new GroupCondition(ModelType, field, undefined, op, childConditions.map(c => internals(c))));\n      // FinalPredicate\n      return registerPredicateInternals(query);\n    };\n  });\n  // TODO: If revisiting this code, consider proxy.\n  link.not = builder => {\n    // not() will return a copy of the original link\n    // to head off mutability concerns.\n    const {\n      query,\n      newTail\n    } = copyLink();\n    // unlike and() and or(), the customer will supply a \"singular\" child predicate.\n    // the difference being: not() does not accept an array of predicate-like objects.\n    // it negates only a *single* predicate subtree.\n    newTail === null || newTail === void 0 || newTail.operands.push(new GroupCondition(ModelType, field, undefined, 'not', [internals(builder(recursivePredicateFor(ModelType, allowRecursion)))]));\n    // A `FinalModelPredicate`.\n    // Return a thing that can no longer be extended, but instead used to `async filter(items)`\n    // or query storage: `.__query.fetch(storage)`.\n    return registerPredicateInternals(query);\n  };\n  // For each field on the model schema, we want to add a getter\n  // that creates the appropriate new `link` in the query chain.\n  // TODO: If revisiting, consider a proxy.\n  for (const fieldName in ModelType.schema.allFields) {\n    Object.defineProperty(link, fieldName, {\n      enumerable: true,\n      get: () => {\n        const def = ModelType.schema.allFields[fieldName];\n        if (!def.association) {\n          // we're looking at a value field. we need to return a\n          // \"field matcher object\", which contains all of the comparison\n          // functions ('eq', 'ne', 'gt', etc.), scoped to operate\n          // against the target field (fieldName).\n          return ops.reduce((fieldMatcher, operator) => {\n            return {\n              ...fieldMatcher,\n              // each operator on the fieldMatcher objcect is a function.\n              // when the customer calls the function, it returns a new link\n              // in the chain -- for now -- this is the \"leaf\" link that\n              // cannot be further extended.\n              [operator]: function () {\n                // build off a fresh copy of the existing `link`, just in case\n                // the same link is being used elsewhere by the customer.\n                const {\n                  query,\n                  newTail\n                } = copyLink();\n                // normalize operands. if any of the values are `undefiend`, use\n                // `null` instead, because that's what will be stored cross-platform.\n                for (var _len = arguments.length, operands = new Array(_len), _key = 0; _key < _len; _key++) {\n                  operands[_key] = arguments[_key];\n                }\n                const normalizedOperands = operands.map(o => o === undefined ? null : o);\n                // add the given condition to the link's TAIL node.\n                // remember: the base link might go N nodes deep! e.g.,\n                newTail === null || newTail === void 0 || newTail.operands.push(new FieldCondition(fieldName, operator, normalizedOperands));\n                // A `FinalModelPredicate`.\n                // Return a thing that can no longer be extended, but instead used to `async filter(items)`\n                // or query storage: `.__query.fetch(storage)`.\n                return registerPredicateInternals(query);\n              }\n            };\n          }, {});\n        } else {\n          if (!allowRecursion) {\n            throw new Error('Predication on releated models is not supported in this context.');\n          } else if (def.association.connectionType === 'BELONGS_TO' || def.association.connectionType === 'HAS_ONE' || def.association.connectionType === 'HAS_MANY') {\n            // the use has just typed '.someRelatedModel'. we need to given them\n            // back a predicate chain.\n            const relatedMeta = def.type.modelConstructor;\n            if (!relatedMeta) {\n              throw new Error('Related model metadata is missing. This is a bug! Please report it.');\n            }\n            // `Model.reletedModelField` returns a copy of the original link,\n            // and will contains copies of internal GroupConditions\n            // to head off mutability concerns.\n            const [newquery, oldtail] = baseCondition.copy(tailCondition);\n            const newtail = new GroupCondition(relatedMeta, fieldName, def.association.connectionType, 'and', []);\n            // `oldtail` here refers to the *copy* of the old tail.\n            // so, it's safe to modify at this point. and we need to modify\n            // it to push the *new* tail onto the end of it.\n            oldtail.operands.push(newtail);\n            const newlink = recursivePredicateFor(relatedMeta, allowRecursion, undefined, newquery, newtail);\n            return newlink;\n          } else {\n            throw new Error(\"Related model definition doesn't have a typedef. This is a bug! Please report it.\");\n          }\n        }\n      }\n    });\n  }\n  return link;\n}\nfunction predicateFor(ModelType) {\n  // the cast here is just a cheap way to reduce the surface area from\n  // the recursive type.\n  return recursivePredicateFor(ModelType, false);\n}\nexport { FieldCondition, GroupCondition, internals, predicateFor, recursivePredicateFor };","map":{"version":3,"names":["ops","comparisonKeys","predicateInternalsMap","Map","registerPredicateInternals","condition","key","finalKey","PredicateInternalsKey","set","internals","has","Error","get","negations","and","or","not","eq","ne","gt","ge","lt","le","contains","notContains","FieldCondition","constructor","field","operator","operands","validate","copy","extract","undefined","toAST","negated","model","GroupCondition","fetch","storage","Promise","reject","matches","item","v","operations","indexOf","beginsWith","startsWith","between","operation","result","concat","argumentCount","count","argsClause","length","validations","e","getGroupId","seed","relationshipType","isOptimized","arguments","groupId","copied","extractedCopy","forEach","o","operandCopy","extractedFromOperand","push","withFieldConditionsOnly","negate","negateChildren","filter","map","optimized","preserveNode","includes","operand","_resultIndex","breadcrumb","resultGroups","groups","op","conditions","g","relatives","relationship","ModelRelationship","from","allJoinConditions","relative","relativeConditions","i","localJoinFields","remoteJoinFields","predicate","ModelPredicateCreator","createFromAST","schema","query","builder","toStoragePredicate","getPKValue","JSON","stringify","pkField","name","resultIndex","group","intersectWith","k","keys","delete","Array","values","ignoreFieldName","itemToCheck","Symbol","asyncIterator","singleItem","asyncSome","c","asyncEvery","toJSON","recursivePredicateFor","ModelType","allowRecursion","tail","starter","baseCondition","tailCondition","link","copyLink","newTail","newLink","childConditions","isArray","fieldName","allFields","Object","defineProperty","enumerable","def","association","reduce","fieldMatcher","_len","_key","normalizedOperands","connectionType","relatedMeta","type","modelConstructor","newquery","oldtail","newtail","newlink","predicateFor"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/predicates/next.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PredicateInternalsKey, } from '../types';\nimport { ModelPredicateCreator as FlatModelPredicateCreator, comparisonKeys, } from './index';\nimport { ModelRelationship } from '../storage/relationship';\nimport { asyncSome, asyncEvery } from '../util';\nconst ops = [...comparisonKeys];\n/**\n * A map from keys (exposed to customers) to the internal predicate data\n * structures invoking code should not muck with.\n */\nconst predicateInternalsMap = new Map();\n/**\n * Creates a link between a key (and generates a key if needed) and an internal\n * `GroupCondition`, which allows us to return a key object instead of the gory\n * conditions details to customers/invoking code.\n *\n * @param condition The internal condition to keep hidden.\n * @param key The object DataStore will use to find the internal condition.\n * If no key is given, an empty one is created.\n */\nconst registerPredicateInternals = (condition, key) => {\n    const finalKey = key || new PredicateInternalsKey();\n    predicateInternalsMap.set(finalKey, condition);\n    return finalKey;\n};\n/**\n * Takes a key object from `registerPredicateInternals()` to fetch an internal\n * `GroupCondition` object, which can then be used to query storage or\n * test/match objects.\n *\n * This indirection exists to hide `GroupCondition` from public interfaces, since\n * `GroupCondition` contains extra methods and properties that public callers\n * should not use.\n *\n * @param key A key object previously returned by `registerPredicateInternals()`\n */\nexport const internals = (key) => {\n    if (!predicateInternalsMap.has(key)) {\n        throw new Error(\"Invalid predicate. Terminate your predicate with a valid condition (e.g., `p => p.field.eq('value')`) or pass `Predicates.ALL`.\");\n    }\n    return predicateInternalsMap.get(key);\n};\n/**\n * Maps operators to negated operators.\n * Used to facilitate propagation of negation down a tree of conditions.\n */\nconst negations = {\n    and: 'or',\n    or: 'and',\n    not: 'and',\n    eq: 'ne',\n    ne: 'eq',\n    gt: 'le',\n    ge: 'lt',\n    lt: 'ge',\n    le: 'gt',\n    contains: 'notContains',\n    notContains: 'contains',\n};\n/**\n * A condition that can operate against a single \"primitive\" field of a model or item.\n * @member field The field of *some record* to test against.\n * @member operator The equality or comparison operator to use.\n * @member operands The operands for the equality/comparison check.\n */\nexport class FieldCondition {\n    constructor(field, operator, operands) {\n        this.field = field;\n        this.operator = operator;\n        this.operands = operands;\n        this.validate();\n    }\n    /**\n     * Creates a copy of self.\n     * @param extract Not used. Present only to fulfill the `UntypedCondition` interface.\n     * @returns A new, identitical `FieldCondition`.\n     */\n    copy(extract) {\n        return [\n            new FieldCondition(this.field, this.operator, [...this.operands]),\n            undefined,\n        ];\n    }\n    /**\n     * Produces a tree structure similar to a graphql condition. The returned\n     * structure is \"dumb\" and is intended for another query/condition\n     * generation mechanism to interpret, such as the cloud or storage query\n     * builders.\n     *\n     * E.g.,\n     *\n     * ```json\n     * {\n     * \t\"name\": {\n     * \t\t\"eq\": \"robert\"\n     * \t}\n     * }\n     * ```\n     */\n    toAST() {\n        return {\n            [this.field]: {\n                [this.operator]: this.operator === 'between'\n                    ? [this.operands[0], this.operands[1]]\n                    : this.operands[0],\n            },\n        };\n    }\n    /**\n     * Produces a new condition (`FieldCondition` or `GroupCondition`) that\n     * matches the opposite of this condition.\n     *\n     * Intended to be used when applying De Morgan's Law, which can be done to\n     * produce more efficient queries against the storage layer if a negation\n     * appears in the query tree.\n     *\n     * For example:\n     *\n     * 1. `name.eq('robert')` becomes `name.ne('robert')`\n     * 2. `price.between(100, 200)` becomes `m => m.or(m => [m.price.lt(100), m.price.gt(200)])`\n     *\n     * @param model The model meta to use when construction a new `GroupCondition`\n     * for cases where the negation requires multiple `FieldCondition`'s.\n     */\n    negated(model) {\n        if (this.operator === 'between') {\n            return new GroupCondition(model, undefined, undefined, 'or', [\n                new FieldCondition(this.field, 'lt', [this.operands[0]]),\n                new FieldCondition(this.field, 'gt', [this.operands[1]]),\n            ]);\n        }\n        else if (this.operator === 'beginsWith') {\n            // beginsWith negation doesn't have a good, safe optimation right now.\n            // just re-wrap it in negation. The adapter will have to scan-and-filter,\n            // as is likely optimal for negated beginsWith conditions *anyway*.\n            return new GroupCondition(model, undefined, undefined, 'not', [\n                new FieldCondition(this.field, 'beginsWith', [this.operands[0]]),\n            ]);\n        }\n        else {\n            return new FieldCondition(this.field, negations[this.operator], this.operands);\n        }\n    }\n    /**\n     * Not implemented. Not needed. GroupCondition instead consumes FieldConditions and\n     * transforms them into legacy predicates. (*For now.*)\n     * @param storage N/A. If ever implemented, the storage adapter to query.\n     * @returns N/A. If ever implemented, return items from `storage` that match.\n     */\n    async fetch(storage) {\n        return Promise.reject('No implementation needed [yet].');\n    }\n    /**\n     * Determins whether a given item matches the expressed condition.\n     * @param item The item to test.\n     * @returns `Promise<boolean>`, `true` if matches; `false` otherwise.\n     */\n    async matches(item) {\n        const v = item[this.field];\n        const operations = {\n            eq: () => v === this.operands[0],\n            ne: () => v !== this.operands[0],\n            gt: () => v > this.operands[0],\n            ge: () => v >= this.operands[0],\n            lt: () => v < this.operands[0],\n            le: () => v <= this.operands[0],\n            contains: () => v?.indexOf(this.operands[0]) > -1,\n            notContains: () => (!v ? true : v.indexOf(this.operands[0]) === -1),\n            beginsWith: () => v?.startsWith(this.operands[0]),\n            between: () => v >= this.operands[0] && v <= this.operands[1],\n        };\n        const operation = operations[this.operator];\n        if (operation) {\n            const result = operation();\n            return result;\n        }\n        else {\n            throw new Error(`Invalid operator given: ${this.operator}`);\n        }\n    }\n    /**\n     * Checks `this.operands` for compatibility with `this.operator`.\n     */\n    validate() {\n        /**\n         * Creates a validator that checks for a particular `operands` count.\n         * Throws an exception if the `count` disagrees with `operands.length`.\n         * @param count The number of `operands` expected.\n         */\n        const argumentCount = count => {\n            const argsClause = count === 1 ? 'argument is' : 'arguments are';\n            return () => {\n                if (this.operands.length !== count) {\n                    return `Exactly ${count} ${argsClause} required.`;\n                }\n            };\n        };\n        // NOTE: validations should return a message on failure.\n        // hence, they should be \"joined\" together with logical OR's\n        // as seen in the `between:` entry.\n        const validations = {\n            eq: argumentCount(1),\n            ne: argumentCount(1),\n            gt: argumentCount(1),\n            ge: argumentCount(1),\n            lt: argumentCount(1),\n            le: argumentCount(1),\n            contains: argumentCount(1),\n            notContains: argumentCount(1),\n            beginsWith: argumentCount(1),\n            between: () => argumentCount(2)() ||\n                (this.operands[0] > this.operands[1]\n                    ? 'The first argument must be less than or equal to the second argument.'\n                    : null),\n        };\n        const validate = validations[this.operator];\n        if (validate) {\n            const e = validate();\n            if (typeof e === 'string')\n                throw new Error(`Incorrect usage of \\`${this.operator}()\\`: ${e}`);\n        }\n        else {\n            throw new Error(`Non-existent operator: \\`${this.operator}()\\``);\n        }\n    }\n}\n/**\n * Small utility function to generate a monotonically increasing ID.\n * Used by GroupCondition to help keep track of which group is doing what,\n * when, and where during troubleshooting.\n */\nconst getGroupId = (() => {\n    let seed = 1;\n    return () => `group_${seed++}`;\n})();\n/**\n * A set of sub-conditions to operate against a model, optionally scoped to\n * a specific field, combined with the given operator (one of `and`, `or`, or `not`).\n * @member groupId Used to distinguish between GroupCondition instances for\n * debugging and troublehsooting.\n * @member model A metadata object that tells GroupCondition what to query and how.\n * @member field The field on the model that the sub-conditions apply to.\n * @member operator How to group child conditions together.\n * @member operands The child conditions.\n */\nexport class GroupCondition {\n    constructor(\n    /**\n     * The `ModelMeta` of the model to query and/or filter against.\n     * Expected to contain:\n     *\n     * ```js\n     * {\n     * \tbuilder: ModelConstructor,\n     * \tschema: SchemaModel,\n     * \tpkField: string[]\n     * }\n     * ```\n     */\n    model, \n    /**\n     * If populated, this group specifices a condition on a relationship.\n     *\n     * If `field` does *not* point to a related model, that's an error. It\n     * could indicate that the `GroupCondition` was instantiated with bad\n     * data, or that the model metadata is incorrect.\n     */\n    field, \n    /**\n     * If a `field` is given, whether the relationship is a `HAS_ONE`,\n     * 'HAS_MANY`, or `BELONGS_TO`.\n     *\n     * TODO: Remove this and replace with derivation using\n     * `ModelRelationship.from(this.model, this.field).relationship`;\n     */\n    relationshipType, \n    /**\n     *\n     */\n    operator, \n    /**\n     *\n     */\n    operands, \n    /**\n     * Whether this GroupCondition is the result of an optimize call.\n     *\n     * This is used to guard against infinitely fetch -> optimize -> fetch\n     * recursion.\n     */\n    isOptimized = false) {\n        this.model = model;\n        this.field = field;\n        this.relationshipType = relationshipType;\n        this.operator = operator;\n        this.operands = operands;\n        this.isOptimized = isOptimized;\n        // `groupId` was used for development/debugging.\n        // Should we leave this in for future troubleshooting?\n        this.groupId = getGroupId();\n    }\n    /**\n     * Returns a copy of a GroupCondition, which also returns the copy of a\n     * given reference node to \"extract\".\n     * @param extract A node of interest. Its copy will *also* be returned if the node exists.\n     * @returns [The full copy, the copy of `extract` | undefined]\n     */\n    copy(extract) {\n        const copied = new GroupCondition(this.model, this.field, this.relationshipType, this.operator, []);\n        let extractedCopy = extract === this ? copied : undefined;\n        this.operands.forEach(o => {\n            const [operandCopy, extractedFromOperand] = o.copy(extract);\n            copied.operands.push(operandCopy);\n            extractedCopy = extractedCopy || extractedFromOperand;\n        });\n        return [copied, extractedCopy];\n    }\n    /**\n     * Creates a new `GroupCondition` that contains only the local field conditions,\n     * omitting related model conditions. That resulting `GroupCondition` can be\n     * used to produce predicates that are compatible with the storage adapters and\n     * Cloud storage.\n     *\n     * @param negate Whether the condition tree should be negated according\n     * to De Morgan's law.\n     */\n    withFieldConditionsOnly(negate) {\n        const negateChildren = negate !== (this.operator === 'not');\n        return new GroupCondition(this.model, undefined, undefined, (negate ? negations[this.operator] : this.operator), this.operands\n            .filter(o => o instanceof FieldCondition)\n            .map(o => negateChildren ? o.negated(this.model) : o));\n    }\n    /**\n     * Returns a version of the predicate tree with unnecessary logical groups\n     * condensed and merged together. This is intended to create a dense tree\n     * with leaf nodes (`FieldCondition`'s) aggregated under as few group conditions\n     * as possible for the most efficient fetching possible -- it allows `fetch()`.\n     *\n     * E.g. a grouping like this:\n     *\n     * ```yaml\n     * and:\n     * \tand:\n     * \t\tid:\n     * \t\t\teq: \"abc\"\n     * \tand:\n     * \t\tname:\n     * \t\t\teq: \"xyz\"\n     * ```\n     *\n     * Will become this:\n     *\n     * ```yaml\n     * and:\n     * \tid:\n     * \t\teq: \"abc\"\n     * \tname:\n     * \t\teq: \"xyz\"\n     * ```\n     *\n     * This allows `fetch()` to pass both the `id` and `name` conditions to the adapter\n     * together, which can then decide what index to use based on both fields together.\n     *\n     * @param preserveNode Whether to preserve the current node and to explicitly not eliminate\n     * it during optimization. Used internally to preserve the root node and children of\n     * `not` groups. `not` groups will always have a single child, so there's nothing to\n     * optimize below a `not` (for now), and it makes the query logic simpler later.\n     */\n    optimized(preserveNode = true) {\n        const operands = this.operands.map(o => o instanceof GroupCondition ? o.optimized(this.operator === 'not') : o);\n        // we're only collapsing and/or groups that contains a single child for now,\n        // because they're much more common and much more trivial to collapse. basically,\n        // an `and`/`or` that contains a single child doesn't require the layer of\n        // logical grouping.\n        if (!preserveNode &&\n            ['and', 'or'].includes(this.operator) &&\n            !this.field &&\n            operands.length === 1) {\n            const operand = operands[0];\n            if (operand instanceof FieldCondition) {\n                // between conditions should NOT be passed up the chain. if they\n                // need to be *negated* later, it is important that they be properly\n                // contained in an AND group. when de morgan's law is applied, the\n                // conditions are reversed and the AND group flips to an OR. this\n                // doesn't work right if the a `between` doesn't live in an AND group.\n                if (operand.operator !== 'between') {\n                    return operand;\n                }\n            }\n            else {\n                return operand;\n            }\n        }\n        return new GroupCondition(this.model, this.field, this.relationshipType, this.operator, operands, true);\n    }\n    /**\n     * Fetches matching records from a given storage adapter using legacy predicates (for now).\n     * @param storage The storage adapter this predicate will query against.\n     * @param breadcrumb For debugging/troubleshooting. A list of the `groupId`'s this\n     * GroupdCondition.fetch is nested within.\n     * @param negate Whether to match on the `NOT` of `this`.\n     * @returns An `Promise` of `any[]` from `storage` matching the child conditions.\n     */\n    async fetch(storage, breadcrumb = [], negate = false) {\n        if (!this.isOptimized) {\n            return this.optimized().fetch(storage);\n        }\n        const resultGroups = [];\n        const operator = (negate ? negations[this.operator] : this.operator);\n        const negateChildren = negate !== (this.operator === 'not');\n        /**\n         * Conditions that must be branched out and used to generate a base, \"candidate\"\n         * result set.\n         *\n         * If `field` is populated, these groups select *related* records, and the base,\n         * candidate results are selected to match those.\n         */\n        const groups = this.operands.filter(op => op instanceof GroupCondition);\n        /**\n         * Simple conditions that must match the target model of `this`.\n         */\n        const conditions = this.operands.filter(op => op instanceof FieldCondition);\n        for (const g of groups) {\n            const relatives = await g.fetch(storage, [...breadcrumb, this.groupId], negateChildren);\n            // no relatives -> no need to attempt to perform a \"join\" query for\n            // candidate results:\n            //\n            // select a.* from a,b where b.id in EMPTY_SET ==> EMPTY_SET\n            //\n            // Additionally, the entire (sub)-query can be short-circuited if\n            // the operator is `AND`. Illustrated in SQL:\n            //\n            // select a.* from a where\n            //   id in [a,b,c]\n            //     AND                        <\n            //   id in EMTPY_SET            <<< Look!\n            //     AND                        <\n            //   id in [x,y,z]\n            //\n            // YIELDS: EMPTY_SET           // <-- Easy peasy. Lemon squeezy.\n            //\n            if (relatives.length === 0) {\n                // aggressively short-circuit as soon as we know the group condition will fail\n                if (operator === 'and') {\n                    return [];\n                }\n                // less aggressive short-circuit if we know the relatives will produce no\n                // candidate results; but aren't sure yet how this affects the group condition.\n                resultGroups.push([]);\n                continue;\n            }\n            if (g.field) {\n                // `relatives` are actual relatives. We'll skim them for FK query values.\n                // Use the relatives to add candidate result sets (`resultGroups`)\n                const relationship = ModelRelationship.from(this.model, g.field);\n                if (relationship) {\n                    const allJoinConditions = [];\n                    for (const relative of relatives) {\n                        const relativeConditions = [];\n                        for (let i = 0; i < relationship.localJoinFields.length; i++) {\n                            relativeConditions.push({\n                                [relationship.localJoinFields[i]]: {\n                                    eq: relative[relationship.remoteJoinFields[i]],\n                                },\n                            });\n                        }\n                        allJoinConditions.push({ and: relativeConditions });\n                    }\n                    const predicate = FlatModelPredicateCreator.createFromAST(this.model.schema, {\n                        or: allJoinConditions,\n                    });\n                    resultGroups.push(await storage.query(this.model.builder, predicate));\n                }\n                else {\n                    throw new Error('Missing field metadata.');\n                }\n            }\n            else {\n                // relatives are not actually relatives. they're candidate results.\n                resultGroups.push(relatives);\n            }\n        }\n        // if conditions is empty at this point, child predicates found no matches.\n        // i.e., we can stop looking and return empty.\n        if (conditions.length > 0) {\n            const predicate = this.withFieldConditionsOnly(negateChildren).toStoragePredicate();\n            resultGroups.push(await storage.query(this.model.builder, predicate));\n        }\n        else if (conditions.length === 0 && resultGroups.length === 0) {\n            resultGroups.push(await storage.query(this.model.builder));\n        }\n        // PK might be a single field, like `id`, or it might be several fields.\n        // so, we'll need to extract the list of PK fields from an object\n        // and stringify the list for easy comparison / merging.\n        const getPKValue = item => JSON.stringify(this.model.pkField.map(name => item[name]));\n        // will be used for intersecting or unioning results\n        let resultIndex;\n        if (operator === 'and') {\n            if (resultGroups.length === 0) {\n                return [];\n            }\n            // for each group, we intersect, removing items from the result index\n            // that aren't present in each subsequent group.\n            for (const group of resultGroups) {\n                if (resultIndex === undefined) {\n                    resultIndex = new Map(group.map(item => [getPKValue(item), item]));\n                }\n                else {\n                    const intersectWith = new Map(group.map(item => [getPKValue(item), item]));\n                    for (const k of resultIndex.keys()) {\n                        if (!intersectWith.has(k)) {\n                            resultIndex.delete(k);\n                        }\n                    }\n                }\n            }\n        }\n        else if (operator === 'or' || operator === 'not') {\n            // it's OK to handle NOT here, because NOT must always only negate\n            // a single child predicate. NOT logic will have been distributed down\n            // to the leaf conditions already.\n            resultIndex = new Map();\n            // just merge the groups, performing DISTINCT-ification by ID.\n            for (const group of resultGroups) {\n                for (const item of group) {\n                    resultIndex.set(getPKValue(item), item);\n                }\n            }\n        }\n        return Array.from(resultIndex?.values() || []);\n    }\n    /**\n     * Determines whether a single item matches the conditions of `this`.\n     * When checking the target `item`'s properties, each property will be `await`'d\n     * to ensure lazy-loading is respected where applicable.\n     * @param item The item to match against.\n     * @param ignoreFieldName Tells `match()` that the field name has already been dereferenced.\n     * (Used for iterating over children on HAS_MANY checks.)\n     * @returns A boolean (promise): `true` if matched, `false` otherwise.\n     */\n    async matches(item, ignoreFieldName = false) {\n        const itemToCheck = this.field && !ignoreFieldName ? await item[this.field] : item;\n        // if there is no item to check, we can stop recursing immediately.\n        // a condition cannot match against an item that does not exist. this\n        // can occur when `item.field` is optional in the schema.\n        if (!itemToCheck) {\n            return false;\n        }\n        if (this.relationshipType === 'HAS_MANY' &&\n            typeof itemToCheck[Symbol.asyncIterator] === 'function') {\n            for await (const singleItem of itemToCheck) {\n                if (await this.matches(singleItem, true)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (this.operator === 'or') {\n            return asyncSome(this.operands, c => c.matches(itemToCheck));\n        }\n        else if (this.operator === 'and') {\n            return asyncEvery(this.operands, c => c.matches(itemToCheck));\n        }\n        else if (this.operator === 'not') {\n            if (this.operands.length !== 1) {\n                throw new Error('Invalid arguments! `not()` accepts exactly one predicate expression.');\n            }\n            return !(await this.operands[0].matches(itemToCheck));\n        }\n        else {\n            throw new Error('Invalid group operator!');\n        }\n    }\n    /**\n     * Tranfsorm to a AppSync GraphQL compatible AST.\n     * (Does not support filtering in nested types.)\n     */\n    toAST() {\n        if (this.field)\n            throw new Error('Nested type conditions are not supported!');\n        return {\n            [this.operator]: this.operands.map(operand => operand.toAST()),\n        };\n    }\n    /**\n     * Turn this predicate group into something a storage adapter\n     * understands how to use.\n     */\n    toStoragePredicate() {\n        return FlatModelPredicateCreator.createFromAST(this.model.schema, this.toAST());\n    }\n    /**\n     * A JSON representation that's good for debugging.\n     */\n    toJSON() {\n        return {\n            ...this,\n            model: this.model.schema.name,\n        };\n    }\n}\n/**\n * Creates a \"seed\" predicate that can be used to build an executable condition.\n * This is used in `query()`, for example, to seed customer- E.g.,\n *\n * ```\n * const p = predicateFor({builder: modelConstructor, schema: modelSchema, pkField: string[]});\n * p.and(child => [\n *   child.field.eq('whatever'),\n *   child.childModel.childField.eq('whatever else'),\n *   child.childModel.or(child => [\n *     child.otherField.contains('x'),\n *     child.otherField.contains('y'),\n *     child.otherField.contains('z'),\n *   ])\n * ])\n * ```\n *\n * `predicateFor()` returns objecst with recursive getters. To facilitate this,\n * a `query` and `tail` can be provided to \"accumulate\" nested conditions.\n *\n * @param ModelType The ModelMeta used to build child properties.\n * @param field Scopes the query branch to a field.\n * @param query A base query to build on. Omit to start a new query.\n * @param tail The point in an existing `query` to attach new conditions to.\n * @returns A ModelPredicate (builder) that customers can create queries with.\n * (As shown in function description.)\n */\nexport function recursivePredicateFor(ModelType, allowRecursion = true, field, query, tail) {\n    // to be used if we don't have a base query or tail to build onto\n    const starter = new GroupCondition(ModelType, field, undefined, 'and', []);\n    const baseCondition = query && tail ? query : starter;\n    const tailCondition = query && tail ? tail : starter;\n    // our eventual return object, which can be built upon.\n    // next steps will be to add or(), and(), not(), and field.op() methods.\n    const link = {};\n    // so it can be looked up later with in the internals when processing conditions.\n    registerPredicateInternals(baseCondition, link);\n    const copyLink = () => {\n        const [query, newTail] = baseCondition.copy(tailCondition);\n        const newLink = recursivePredicateFor(ModelType, allowRecursion, undefined, query, newTail);\n        return { query, newTail, newLink };\n    };\n    // Adds .or() and .and() methods to the link.\n    // TODO: If revisiting this code, consider writing a Proxy instead.\n    ['and', 'or'].forEach(op => {\n        link[op] = (builder) => {\n            // or() and and() will return a copy of the original link\n            // to head off mutability concerns.\n            const { query, newTail } = copyLink();\n            const childConditions = builder(recursivePredicateFor(ModelType, allowRecursion));\n            if (!Array.isArray(childConditions)) {\n                throw new Error(`Invalid predicate. \\`${op}\\` groups must return an array of child conditions.`);\n            }\n            // the customer will supply a child predicate, which apply to the `model.field`\n            // of the tail GroupCondition.\n            newTail?.operands.push(new GroupCondition(ModelType, field, undefined, op, childConditions.map(c => internals(c))));\n            // FinalPredicate\n            return registerPredicateInternals(query);\n        };\n    });\n    // TODO: If revisiting this code, consider proxy.\n    link.not = (builder) => {\n        // not() will return a copy of the original link\n        // to head off mutability concerns.\n        const { query, newTail } = copyLink();\n        // unlike and() and or(), the customer will supply a \"singular\" child predicate.\n        // the difference being: not() does not accept an array of predicate-like objects.\n        // it negates only a *single* predicate subtree.\n        newTail?.operands.push(new GroupCondition(ModelType, field, undefined, 'not', [\n            internals(builder(recursivePredicateFor(ModelType, allowRecursion))),\n        ]));\n        // A `FinalModelPredicate`.\n        // Return a thing that can no longer be extended, but instead used to `async filter(items)`\n        // or query storage: `.__query.fetch(storage)`.\n        return registerPredicateInternals(query);\n    };\n    // For each field on the model schema, we want to add a getter\n    // that creates the appropriate new `link` in the query chain.\n    // TODO: If revisiting, consider a proxy.\n    for (const fieldName in ModelType.schema.allFields) {\n        Object.defineProperty(link, fieldName, {\n            enumerable: true,\n            get: () => {\n                const def = ModelType.schema.allFields[fieldName];\n                if (!def.association) {\n                    // we're looking at a value field. we need to return a\n                    // \"field matcher object\", which contains all of the comparison\n                    // functions ('eq', 'ne', 'gt', etc.), scoped to operate\n                    // against the target field (fieldName).\n                    return ops.reduce((fieldMatcher, operator) => {\n                        return {\n                            ...fieldMatcher,\n                            // each operator on the fieldMatcher objcect is a function.\n                            // when the customer calls the function, it returns a new link\n                            // in the chain -- for now -- this is the \"leaf\" link that\n                            // cannot be further extended.\n                            [operator]: (...operands) => {\n                                // build off a fresh copy of the existing `link`, just in case\n                                // the same link is being used elsewhere by the customer.\n                                const { query, newTail } = copyLink();\n                                // normalize operands. if any of the values are `undefiend`, use\n                                // `null` instead, because that's what will be stored cross-platform.\n                                const normalizedOperands = operands.map(o => o === undefined ? null : o);\n                                // add the given condition to the link's TAIL node.\n                                // remember: the base link might go N nodes deep! e.g.,\n                                newTail?.operands.push(new FieldCondition(fieldName, operator, normalizedOperands));\n                                // A `FinalModelPredicate`.\n                                // Return a thing that can no longer be extended, but instead used to `async filter(items)`\n                                // or query storage: `.__query.fetch(storage)`.\n                                return registerPredicateInternals(query);\n                            },\n                        };\n                    }, {});\n                }\n                else {\n                    if (!allowRecursion) {\n                        throw new Error('Predication on releated models is not supported in this context.');\n                    }\n                    else if (def.association.connectionType === 'BELONGS_TO' ||\n                        def.association.connectionType === 'HAS_ONE' ||\n                        def.association.connectionType === 'HAS_MANY') {\n                        // the use has just typed '.someRelatedModel'. we need to given them\n                        // back a predicate chain.\n                        const relatedMeta = def.type.modelConstructor;\n                        if (!relatedMeta) {\n                            throw new Error('Related model metadata is missing. This is a bug! Please report it.');\n                        }\n                        // `Model.reletedModelField` returns a copy of the original link,\n                        // and will contains copies of internal GroupConditions\n                        // to head off mutability concerns.\n                        const [newquery, oldtail] = baseCondition.copy(tailCondition);\n                        const newtail = new GroupCondition(relatedMeta, fieldName, def.association.connectionType, 'and', []);\n                        // `oldtail` here refers to the *copy* of the old tail.\n                        // so, it's safe to modify at this point. and we need to modify\n                        // it to push the *new* tail onto the end of it.\n                        oldtail.operands.push(newtail);\n                        const newlink = recursivePredicateFor(relatedMeta, allowRecursion, undefined, newquery, newtail);\n                        return newlink;\n                    }\n                    else {\n                        throw new Error(\"Related model definition doesn't have a typedef. This is a bug! Please report it.\");\n                    }\n                }\n            },\n        });\n    }\n    return link;\n}\nexport function predicateFor(ModelType) {\n    // the cast here is just a cheap way to reduce the surface area from\n    // the recursive type.\n    return recursivePredicateFor(ModelType, false);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}