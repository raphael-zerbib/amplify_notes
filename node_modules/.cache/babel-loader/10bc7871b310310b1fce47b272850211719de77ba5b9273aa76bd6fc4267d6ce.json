{"ast":null,"code":"var _jsxFileName = \"/Users/raphaperso/Documents/Hub/FreeCodeCamp/amplify_notes/src/ui-components/NoteCreateForm.jsx\",\n  _s = $RefreshSig$();\n/***************************************************************************\n * The contents of this file were generated with Amplify Studio.           *\n * Please refrain from making any modifications to this file.              *\n * Any changes to this file will be overwritten when running amplify pull. *\n **************************************************************************/\n\n/* eslint-disable */\nimport * as React from \"react\";\nimport { Button, Flex, Grid, TextField } from \"@aws-amplify/ui-react\";\nimport { Note } from \"../models\";\nimport { fetchByPath, getOverrideProps, validateField } from \"./utils\";\nimport { DataStore } from \"aws-amplify/datastore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteCreateForm(props) {\n  _s();\n  var _errors$title2, _errors$title3, _errors$text2, _errors$text3, _errors$_lastChangetA2, _errors$_lastChangetA3;\n  const {\n    clearOnSuccess = true,\n    onSuccess,\n    onError,\n    onSubmit,\n    onValidate,\n    onChange,\n    overrides,\n    ...rest\n  } = props;\n  const initialValues = {\n    title: \"\",\n    text: \"\",\n    _lastChangetAt: \"\"\n  };\n  const [title, setTitle] = React.useState(initialValues.title);\n  const [text, setText] = React.useState(initialValues.text);\n  const [_lastChangetAt, set_lastChangetAt] = React.useState(initialValues._lastChangetAt);\n  const [errors, setErrors] = React.useState({});\n  const resetStateValues = () => {\n    setTitle(initialValues.title);\n    setText(initialValues.text);\n    set_lastChangetAt(initialValues._lastChangetAt);\n    setErrors({});\n  };\n  const validations = {\n    title: [],\n    text: [],\n    _lastChangetAt: []\n  };\n  const runValidationTasks = async (fieldName, currentValue, getDisplayValue) => {\n    const value = currentValue && getDisplayValue ? getDisplayValue(currentValue) : currentValue;\n    let validationResponse = validateField(value, validations[fieldName]);\n    const customValidator = fetchByPath(onValidate, fieldName);\n    if (customValidator) {\n      validationResponse = await customValidator(value, validationResponse);\n    }\n    setErrors(errors => ({\n      ...errors,\n      [fieldName]: validationResponse\n    }));\n    return validationResponse;\n  };\n  const convertTimeStampToDate = ts => {\n    if (Math.abs(Date.now() - ts) < Math.abs(Date.now() - ts * 1000)) {\n      return new Date(ts);\n    }\n    return new Date(ts * 1000);\n  };\n  const convertToLocal = date => {\n    const df = new Intl.DateTimeFormat(\"default\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      calendar: \"iso8601\",\n      numberingSystem: \"latn\",\n      hourCycle: \"h23\"\n    });\n    const parts = df.formatToParts(date).reduce((acc, part) => {\n      acc[part.type] = part.value;\n      return acc;\n    }, {});\n    return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    as: \"form\",\n    rowGap: \"15px\",\n    columnGap: \"15px\",\n    padding: \"20px\",\n    onSubmit: async event => {\n      event.preventDefault();\n      let modelFields = {\n        title,\n        text,\n        _lastChangetAt\n      };\n      const validationResponses = await Promise.all(Object.keys(validations).reduce((promises, fieldName) => {\n        if (Array.isArray(modelFields[fieldName])) {\n          promises.push(...modelFields[fieldName].map(item => runValidationTasks(fieldName, item)));\n          return promises;\n        }\n        promises.push(runValidationTasks(fieldName, modelFields[fieldName]));\n        return promises;\n      }, []));\n      if (validationResponses.some(r => r.hasError)) {\n        return;\n      }\n      if (onSubmit) {\n        modelFields = onSubmit(modelFields);\n      }\n      try {\n        Object.entries(modelFields).forEach(([key, value]) => {\n          if (typeof value === \"string\" && value === \"\") {\n            modelFields[key] = null;\n          }\n        });\n        await DataStore.save(new Note(modelFields));\n        if (onSuccess) {\n          onSuccess(modelFields);\n        }\n        if (clearOnSuccess) {\n          resetStateValues();\n        }\n      } catch (err) {\n        if (onError) {\n          onError(modelFields, err.message);\n        }\n      }\n    },\n    ...getOverrideProps(overrides, \"NoteCreateForm\"),\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Title\",\n      isRequired: false,\n      isReadOnly: false,\n      value: title,\n      onChange: e => {\n        var _errors$title;\n        let {\n          value\n        } = e.target;\n        if (onChange) {\n          var _result$title;\n          const modelFields = {\n            title: value,\n            text,\n            _lastChangetAt\n          };\n          const result = onChange(modelFields);\n          value = (_result$title = result === null || result === void 0 ? void 0 : result.title) !== null && _result$title !== void 0 ? _result$title : value;\n        }\n        if ((_errors$title = errors.title) !== null && _errors$title !== void 0 && _errors$title.hasError) {\n          runValidationTasks(\"title\", value);\n        }\n        setTitle(value);\n      },\n      onBlur: () => runValidationTasks(\"title\", title),\n      errorMessage: (_errors$title2 = errors.title) === null || _errors$title2 === void 0 ? void 0 : _errors$title2.errorMessage,\n      hasError: (_errors$title3 = errors.title) === null || _errors$title3 === void 0 ? void 0 : _errors$title3.hasError,\n      ...getOverrideProps(overrides, \"title\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Text\",\n      isRequired: false,\n      isReadOnly: false,\n      value: text,\n      onChange: e => {\n        var _errors$text;\n        let {\n          value\n        } = e.target;\n        if (onChange) {\n          var _result$text;\n          const modelFields = {\n            title,\n            text: value,\n            _lastChangetAt\n          };\n          const result = onChange(modelFields);\n          value = (_result$text = result === null || result === void 0 ? void 0 : result.text) !== null && _result$text !== void 0 ? _result$text : value;\n        }\n        if ((_errors$text = errors.text) !== null && _errors$text !== void 0 && _errors$text.hasError) {\n          runValidationTasks(\"text\", value);\n        }\n        setText(value);\n      },\n      onBlur: () => runValidationTasks(\"text\", text),\n      errorMessage: (_errors$text2 = errors.text) === null || _errors$text2 === void 0 ? void 0 : _errors$text2.errorMessage,\n      hasError: (_errors$text3 = errors.text) === null || _errors$text3 === void 0 ? void 0 : _errors$text3.hasError,\n      ...getOverrideProps(overrides, \"text\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Last changet at\",\n      isRequired: false,\n      isReadOnly: false,\n      type: \"datetime-local\",\n      value: _lastChangetAt && convertToLocal(convertTimeStampToDate(_lastChangetAt)),\n      onChange: e => {\n        var _errors$_lastChangetA;\n        let value = e.target.value === \"\" ? \"\" : Number(new Date(e.target.value));\n        if (onChange) {\n          var _result$_lastChangetA;\n          const modelFields = {\n            title,\n            text,\n            _lastChangetAt: value\n          };\n          const result = onChange(modelFields);\n          value = (_result$_lastChangetA = result === null || result === void 0 ? void 0 : result._lastChangetAt) !== null && _result$_lastChangetA !== void 0 ? _result$_lastChangetA : value;\n        }\n        if ((_errors$_lastChangetA = errors._lastChangetAt) !== null && _errors$_lastChangetA !== void 0 && _errors$_lastChangetA.hasError) {\n          runValidationTasks(\"_lastChangetAt\", value);\n        }\n        set_lastChangetAt(value);\n      },\n      onBlur: () => runValidationTasks(\"_lastChangetAt\", _lastChangetAt),\n      errorMessage: (_errors$_lastChangetA2 = errors._lastChangetAt) === null || _errors$_lastChangetA2 === void 0 ? void 0 : _errors$_lastChangetA2.errorMessage,\n      hasError: (_errors$_lastChangetA3 = errors._lastChangetAt) === null || _errors$_lastChangetA3 === void 0 ? void 0 : _errors$_lastChangetA3.hasError,\n      ...getOverrideProps(overrides, \"_lastChangetAt\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      ...getOverrideProps(overrides, \"CTAFlex\"),\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        children: \"Clear\",\n        type: \"reset\",\n        onClick: event => {\n          event.preventDefault();\n          resetStateValues();\n        },\n        ...getOverrideProps(overrides, \"ClearButton\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        gap: \"15px\",\n        ...getOverrideProps(overrides, \"RightAlignCTASubFlex\"),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Submit\",\n          type: \"submit\",\n          variation: \"primary\",\n          isDisabled: Object.values(errors).some(e => e === null || e === void 0 ? void 0 : e.hasError),\n          ...getOverrideProps(overrides, \"SubmitButton\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteCreateForm, \"DuYU7F77gavwbffDNWRP5LqMhZw=\");\n_c = NoteCreateForm;\nvar _c;\n$RefreshReg$(_c, \"NoteCreateForm\");","map":{"version":3,"names":["React","Button","Flex","Grid","TextField","Note","fetchByPath","getOverrideProps","validateField","DataStore","jsxDEV","_jsxDEV","NoteCreateForm","props","_s","_errors$title2","_errors$title3","_errors$text2","_errors$text3","_errors$_lastChangetA2","_errors$_lastChangetA3","clearOnSuccess","onSuccess","onError","onSubmit","onValidate","onChange","overrides","rest","initialValues","title","text","_lastChangetAt","setTitle","useState","setText","set_lastChangetAt","errors","setErrors","resetStateValues","validations","runValidationTasks","fieldName","currentValue","getDisplayValue","value","validationResponse","customValidator","convertTimeStampToDate","ts","Math","abs","Date","now","convertToLocal","date","df","Intl","DateTimeFormat","year","month","day","hour","minute","calendar","numberingSystem","hourCycle","parts","formatToParts","reduce","acc","part","type","as","rowGap","columnGap","padding","event","preventDefault","modelFields","validationResponses","Promise","all","Object","keys","promises","Array","isArray","push","map","item","some","r","hasError","entries","forEach","key","save","err","message","children","label","isRequired","isReadOnly","e","_errors$title","target","_result$title","result","onBlur","errorMessage","fileName","_jsxFileName","lineNumber","columnNumber","_errors$text","_result$text","_errors$_lastChangetA","Number","_result$_lastChangetA","justifyContent","onClick","gap","variation","isDisabled","values","_c","$RefreshReg$"],"sources":["/Users/raphaperso/Documents/Hub/FreeCodeCamp/amplify_notes/src/ui-components/NoteCreateForm.jsx"],"sourcesContent":["/***************************************************************************\n * The contents of this file were generated with Amplify Studio.           *\n * Please refrain from making any modifications to this file.              *\n * Any changes to this file will be overwritten when running amplify pull. *\n **************************************************************************/\n\n/* eslint-disable */\nimport * as React from \"react\";\nimport { Button, Flex, Grid, TextField } from \"@aws-amplify/ui-react\";\nimport { Note } from \"../models\";\nimport { fetchByPath, getOverrideProps, validateField } from \"./utils\";\nimport { DataStore } from \"aws-amplify/datastore\";\nexport default function NoteCreateForm(props) {\n  const {\n    clearOnSuccess = true,\n    onSuccess,\n    onError,\n    onSubmit,\n    onValidate,\n    onChange,\n    overrides,\n    ...rest\n  } = props;\n  const initialValues = {\n    title: \"\",\n    text: \"\",\n    _lastChangetAt: \"\",\n  };\n  const [title, setTitle] = React.useState(initialValues.title);\n  const [text, setText] = React.useState(initialValues.text);\n  const [_lastChangetAt, set_lastChangetAt] = React.useState(\n    initialValues._lastChangetAt\n  );\n  const [errors, setErrors] = React.useState({});\n  const resetStateValues = () => {\n    setTitle(initialValues.title);\n    setText(initialValues.text);\n    set_lastChangetAt(initialValues._lastChangetAt);\n    setErrors({});\n  };\n  const validations = {\n    title: [],\n    text: [],\n    _lastChangetAt: [],\n  };\n  const runValidationTasks = async (\n    fieldName,\n    currentValue,\n    getDisplayValue\n  ) => {\n    const value =\n      currentValue && getDisplayValue\n        ? getDisplayValue(currentValue)\n        : currentValue;\n    let validationResponse = validateField(value, validations[fieldName]);\n    const customValidator = fetchByPath(onValidate, fieldName);\n    if (customValidator) {\n      validationResponse = await customValidator(value, validationResponse);\n    }\n    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));\n    return validationResponse;\n  };\n  const convertTimeStampToDate = (ts) => {\n    if (Math.abs(Date.now() - ts) < Math.abs(Date.now() - ts * 1000)) {\n      return new Date(ts);\n    }\n    return new Date(ts * 1000);\n  };\n  const convertToLocal = (date) => {\n    const df = new Intl.DateTimeFormat(\"default\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      calendar: \"iso8601\",\n      numberingSystem: \"latn\",\n      hourCycle: \"h23\",\n    });\n    const parts = df.formatToParts(date).reduce((acc, part) => {\n      acc[part.type] = part.value;\n      return acc;\n    }, {});\n    return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}`;\n  };\n  return (\n    <Grid\n      as=\"form\"\n      rowGap=\"15px\"\n      columnGap=\"15px\"\n      padding=\"20px\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        let modelFields = {\n          title,\n          text,\n          _lastChangetAt,\n        };\n        const validationResponses = await Promise.all(\n          Object.keys(validations).reduce((promises, fieldName) => {\n            if (Array.isArray(modelFields[fieldName])) {\n              promises.push(\n                ...modelFields[fieldName].map((item) =>\n                  runValidationTasks(fieldName, item)\n                )\n              );\n              return promises;\n            }\n            promises.push(\n              runValidationTasks(fieldName, modelFields[fieldName])\n            );\n            return promises;\n          }, [])\n        );\n        if (validationResponses.some((r) => r.hasError)) {\n          return;\n        }\n        if (onSubmit) {\n          modelFields = onSubmit(modelFields);\n        }\n        try {\n          Object.entries(modelFields).forEach(([key, value]) => {\n            if (typeof value === \"string\" && value === \"\") {\n              modelFields[key] = null;\n            }\n          });\n          await DataStore.save(new Note(modelFields));\n          if (onSuccess) {\n            onSuccess(modelFields);\n          }\n          if (clearOnSuccess) {\n            resetStateValues();\n          }\n        } catch (err) {\n          if (onError) {\n            onError(modelFields, err.message);\n          }\n        }\n      }}\n      {...getOverrideProps(overrides, \"NoteCreateForm\")}\n      {...rest}\n    >\n      <TextField\n        label=\"Title\"\n        isRequired={false}\n        isReadOnly={false}\n        value={title}\n        onChange={(e) => {\n          let { value } = e.target;\n          if (onChange) {\n            const modelFields = {\n              title: value,\n              text,\n              _lastChangetAt,\n            };\n            const result = onChange(modelFields);\n            value = result?.title ?? value;\n          }\n          if (errors.title?.hasError) {\n            runValidationTasks(\"title\", value);\n          }\n          setTitle(value);\n        }}\n        onBlur={() => runValidationTasks(\"title\", title)}\n        errorMessage={errors.title?.errorMessage}\n        hasError={errors.title?.hasError}\n        {...getOverrideProps(overrides, \"title\")}\n      ></TextField>\n      <TextField\n        label=\"Text\"\n        isRequired={false}\n        isReadOnly={false}\n        value={text}\n        onChange={(e) => {\n          let { value } = e.target;\n          if (onChange) {\n            const modelFields = {\n              title,\n              text: value,\n              _lastChangetAt,\n            };\n            const result = onChange(modelFields);\n            value = result?.text ?? value;\n          }\n          if (errors.text?.hasError) {\n            runValidationTasks(\"text\", value);\n          }\n          setText(value);\n        }}\n        onBlur={() => runValidationTasks(\"text\", text)}\n        errorMessage={errors.text?.errorMessage}\n        hasError={errors.text?.hasError}\n        {...getOverrideProps(overrides, \"text\")}\n      ></TextField>\n      <TextField\n        label=\"Last changet at\"\n        isRequired={false}\n        isReadOnly={false}\n        type=\"datetime-local\"\n        value={\n          _lastChangetAt &&\n          convertToLocal(convertTimeStampToDate(_lastChangetAt))\n        }\n        onChange={(e) => {\n          let value =\n            e.target.value === \"\" ? \"\" : Number(new Date(e.target.value));\n          if (onChange) {\n            const modelFields = {\n              title,\n              text,\n              _lastChangetAt: value,\n            };\n            const result = onChange(modelFields);\n            value = result?._lastChangetAt ?? value;\n          }\n          if (errors._lastChangetAt?.hasError) {\n            runValidationTasks(\"_lastChangetAt\", value);\n          }\n          set_lastChangetAt(value);\n        }}\n        onBlur={() => runValidationTasks(\"_lastChangetAt\", _lastChangetAt)}\n        errorMessage={errors._lastChangetAt?.errorMessage}\n        hasError={errors._lastChangetAt?.hasError}\n        {...getOverrideProps(overrides, \"_lastChangetAt\")}\n      ></TextField>\n      <Flex\n        justifyContent=\"space-between\"\n        {...getOverrideProps(overrides, \"CTAFlex\")}\n      >\n        <Button\n          children=\"Clear\"\n          type=\"reset\"\n          onClick={(event) => {\n            event.preventDefault();\n            resetStateValues();\n          }}\n          {...getOverrideProps(overrides, \"ClearButton\")}\n        ></Button>\n        <Flex\n          gap=\"15px\"\n          {...getOverrideProps(overrides, \"RightAlignCTASubFlex\")}\n        >\n          <Button\n            children=\"Submit\"\n            type=\"submit\"\n            variation=\"primary\"\n            isDisabled={Object.values(errors).some((e) => e?.hasError)}\n            {...getOverrideProps(overrides, \"SubmitButton\")}\n          ></Button>\n        </Flex>\n      </Flex>\n    </Grid>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}