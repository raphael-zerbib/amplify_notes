{"ast":null,"code":"import * as React from 'react';\nimport { useRange, ELLIPSIS } from './useRange.mjs';\nimport { PaginationItem } from './PaginationItem.mjs';\nimport { ComponentText } from '../shared/constants.mjs';\n\n/**\n * This hook will be used to get the pagination items to be rendered in the pagination primitive\n * @param currentPage current page number\n * @param totalPages total number of pages\n * @param siblingCount the number of siblings on each side of\n * @param onNext callback function triggered when the next-page button is pressed\n * @param onPrevious callback function triggered when the prev-page button is pressed\n * @param onChange callback function triggered every time the page changes\n * @returns an array of pagination items\n */\nconst usePaginationItems = _ref => {\n  let {\n    currentPage,\n    totalPages,\n    hasMorePages,\n    siblingCount,\n    currentPageLabel = ComponentText.PaginationItem.currentPageLabel,\n    pageLabel = ComponentText.PaginationItem.pageLabel,\n    previousLabel = ComponentText.PaginationItem.previousLabel,\n    nextLabel = ComponentText.PaginationItem.nextLabel,\n    onNext,\n    onPrevious,\n    onChange\n  } = _ref;\n  const previousItem = React.createElement(PaginationItem, {\n    type: \"previous\",\n    key: \"previous\",\n    currentPage: currentPage,\n    onClick: onPrevious,\n    isDisabled: currentPage <= 1,\n    ariaLabel: previousLabel\n  });\n  const nextItem = React.createElement(PaginationItem, {\n    type: \"next\",\n    key: \"next\",\n    currentPage: currentPage,\n    onClick: onNext,\n    isDisabled: currentPage >= totalPages && !hasMorePages,\n    ariaLabel: nextLabel\n  });\n  // To get the range of page numbers to be rendered in the pagination primitive\n  const range = useRange(currentPage, totalPages, siblingCount);\n  const pageItems = React.useMemo(() => range.map((item, idx) => {\n    if (item === ELLIPSIS) {\n      return React.createElement(PaginationItem, {\n        type: \"ellipsis\",\n        key: idx === 1 ? 'start-ellipsis' : 'end-ellipsis'\n      });\n    }\n    return (\n      // Note: Do NOT use index for `key` and instead use page number\n      // otherwise, react cannot update the component correctly with its diff mechanism\n      React.createElement(PaginationItem, {\n        key: item,\n        type: \"page\",\n        page: item,\n        currentPage: currentPage,\n        currentPageLabel: currentPageLabel,\n        onClick: () => onChange === null || onChange === void 0 ? void 0 : onChange(item, currentPage),\n        /**\n         * @todo We should consider how we would support interpolation in our string translations.\n         * This works for \"Go to page 31\" or \"translatedText {s}\" as the supplied string\n         * But for Arabic or Japanese or some other languages the supplied string might look like: \"{s} translatedText\".\n         */\n        ariaLabel: \"\".concat(pageLabel, \" \").concat(item)\n      })\n    );\n  }), [range, currentPage, currentPageLabel, pageLabel, onChange]);\n  return [previousItem, ...pageItems, nextItem];\n};\nexport { usePaginationItems };","map":{"version":3,"names":["React","useRange","ELLIPSIS","PaginationItem","ComponentText","usePaginationItems","_ref","currentPage","totalPages","hasMorePages","siblingCount","currentPageLabel","pageLabel","previousLabel","nextLabel","onNext","onPrevious","onChange","previousItem","createElement","type","key","onClick","isDisabled","ariaLabel","nextItem","range","pageItems","useMemo","map","item","idx","page","concat"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/usePaginationItems.mjs"],"sourcesContent":["import * as React from 'react';\nimport { useRange, ELLIPSIS } from './useRange.mjs';\nimport { PaginationItem } from './PaginationItem.mjs';\nimport { ComponentText } from '../shared/constants.mjs';\n\n/**\n * This hook will be used to get the pagination items to be rendered in the pagination primitive\n * @param currentPage current page number\n * @param totalPages total number of pages\n * @param siblingCount the number of siblings on each side of\n * @param onNext callback function triggered when the next-page button is pressed\n * @param onPrevious callback function triggered when the prev-page button is pressed\n * @param onChange callback function triggered every time the page changes\n * @returns an array of pagination items\n */\nconst usePaginationItems = ({ currentPage, totalPages, hasMorePages, siblingCount, currentPageLabel = ComponentText.PaginationItem.currentPageLabel, pageLabel = ComponentText.PaginationItem.pageLabel, previousLabel = ComponentText.PaginationItem.previousLabel, nextLabel = ComponentText.PaginationItem.nextLabel, onNext, onPrevious, onChange, }) => {\n    const previousItem = (React.createElement(PaginationItem, { type: \"previous\", key: \"previous\", currentPage: currentPage, onClick: onPrevious, isDisabled: currentPage <= 1, ariaLabel: previousLabel }));\n    const nextItem = (React.createElement(PaginationItem, { type: \"next\", key: \"next\", currentPage: currentPage, onClick: onNext, isDisabled: currentPage >= totalPages && !hasMorePages, ariaLabel: nextLabel }));\n    // To get the range of page numbers to be rendered in the pagination primitive\n    const range = useRange(currentPage, totalPages, siblingCount);\n    const pageItems = React.useMemo(() => range.map((item, idx) => {\n        if (item === ELLIPSIS) {\n            return (React.createElement(PaginationItem, { type: \"ellipsis\", key: idx === 1 ? 'start-ellipsis' : 'end-ellipsis' }));\n        }\n        return (\n        // Note: Do NOT use index for `key` and instead use page number\n        // otherwise, react cannot update the component correctly with its diff mechanism\n        React.createElement(PaginationItem, { key: item, type: \"page\", page: item, currentPage: currentPage, currentPageLabel: currentPageLabel, onClick: () => onChange?.(item, currentPage), \n            /**\n             * @todo We should consider how we would support interpolation in our string translations.\n             * This works for \"Go to page 31\" or \"translatedText {s}\" as the supplied string\n             * But for Arabic or Japanese or some other languages the supplied string might look like: \"{s} translatedText\".\n             */\n            ariaLabel: `${pageLabel} ${item}` }));\n    }), [range, currentPage, currentPageLabel, pageLabel, onChange]);\n    return [previousItem, ...pageItems, nextItem];\n};\n\nexport { usePaginationItems };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,gBAAgB;AACnD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,aAAa,QAAQ,yBAAyB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGC,IAAA,IAAkU;EAAA,IAAjU;IAAEC,WAAW;IAAEC,UAAU;IAAEC,YAAY;IAAEC,YAAY;IAAEC,gBAAgB,GAAGP,aAAa,CAACD,cAAc,CAACQ,gBAAgB;IAAEC,SAAS,GAAGR,aAAa,CAACD,cAAc,CAACS,SAAS;IAAEC,aAAa,GAAGT,aAAa,CAACD,cAAc,CAACU,aAAa;IAAEC,SAAS,GAAGV,aAAa,CAACD,cAAc,CAACW,SAAS;IAAEC,MAAM;IAAEC,UAAU;IAAEC;EAAU,CAAC,GAAAX,IAAA;EACpV,MAAMY,YAAY,GAAIlB,KAAK,CAACmB,aAAa,CAAChB,cAAc,EAAE;IAAEiB,IAAI,EAAE,UAAU;IAAEC,GAAG,EAAE,UAAU;IAAEd,WAAW,EAAEA,WAAW;IAAEe,OAAO,EAAEN,UAAU;IAAEO,UAAU,EAAEhB,WAAW,IAAI,CAAC;IAAEiB,SAAS,EAAEX;EAAc,CAAC,CAAE;EACxM,MAAMY,QAAQ,GAAIzB,KAAK,CAACmB,aAAa,CAAChB,cAAc,EAAE;IAAEiB,IAAI,EAAE,MAAM;IAAEC,GAAG,EAAE,MAAM;IAAEd,WAAW,EAAEA,WAAW;IAAEe,OAAO,EAAEP,MAAM;IAAEQ,UAAU,EAAEhB,WAAW,IAAIC,UAAU,IAAI,CAACC,YAAY;IAAEe,SAAS,EAAEV;EAAU,CAAC,CAAE;EAC9M;EACA,MAAMY,KAAK,GAAGzB,QAAQ,CAACM,WAAW,EAAEC,UAAU,EAAEE,YAAY,CAAC;EAC7D,MAAMiB,SAAS,GAAG3B,KAAK,CAAC4B,OAAO,CAAC,MAAMF,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;IAC3D,IAAID,IAAI,KAAK5B,QAAQ,EAAE;MACnB,OAAQF,KAAK,CAACmB,aAAa,CAAChB,cAAc,EAAE;QAAEiB,IAAI,EAAE,UAAU;QAAEC,GAAG,EAAEU,GAAG,KAAK,CAAC,GAAG,gBAAgB,GAAG;MAAe,CAAC,CAAC;IACzH;IACA;MACA;MACA;MACA/B,KAAK,CAACmB,aAAa,CAAChB,cAAc,EAAE;QAAEkB,GAAG,EAAES,IAAI;QAAEV,IAAI,EAAE,MAAM;QAAEY,IAAI,EAAEF,IAAI;QAAEvB,WAAW,EAAEA,WAAW;QAAEI,gBAAgB,EAAEA,gBAAgB;QAAEW,OAAO,EAAEA,CAAA,KAAML,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGa,IAAI,EAAEvB,WAAW,CAAC;QACjL;AACZ;AACA;AACA;AACA;QACYiB,SAAS,KAAAS,MAAA,CAAKrB,SAAS,OAAAqB,MAAA,CAAIH,IAAI;MAAG,CAAC;IAAC;EAC5C,CAAC,CAAC,EAAE,CAACJ,KAAK,EAAEnB,WAAW,EAAEI,gBAAgB,EAAEC,SAAS,EAAEK,QAAQ,CAAC,CAAC;EAChE,OAAO,CAACC,YAAY,EAAE,GAAGS,SAAS,EAAEF,QAAQ,CAAC;AACjD,CAAC;AAED,SAASpB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}