{"ast":null,"code":"import { DEFAULT_REST_IAM_SIGNING_SERVICE, DEFAULT_IAM_SIGNING_REGION, APIG_HOSTNAME_PATTERN } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Infer the signing service and region from the given URL, and for REST API only, from the Amplify configuration.\n * It supports raw API Gateway endpoint and AppSync endpoint.\n *\n * @internal\n */\nconst parseSigningInfo = (url, restApiOptions) => {\n  var _restApiOptions$ampli, _restApiOptions$ampli2, _APIG_HOSTNAME_PATTER;\n  const {\n    service: signingService = DEFAULT_REST_IAM_SIGNING_SERVICE,\n    region: signingRegion = DEFAULT_IAM_SIGNING_REGION\n  } = (_restApiOptions$ampli = restApiOptions === null || restApiOptions === void 0 || (_restApiOptions$ampli2 = restApiOptions.amplify.getConfig()) === null || _restApiOptions$ampli2 === void 0 || (_restApiOptions$ampli2 = _restApiOptions$ampli2.API) === null || _restApiOptions$ampli2 === void 0 || (_restApiOptions$ampli2 = _restApiOptions$ampli2.REST) === null || _restApiOptions$ampli2 === void 0 ? void 0 : _restApiOptions$ampli2[restApiOptions === null || restApiOptions === void 0 ? void 0 : restApiOptions.apiName]) !== null && _restApiOptions$ampli !== void 0 ? _restApiOptions$ampli : {};\n  const {\n    hostname\n  } = url;\n  const [, service, region] = (_APIG_HOSTNAME_PATTER = APIG_HOSTNAME_PATTERN.exec(hostname)) !== null && _APIG_HOSTNAME_PATTER !== void 0 ? _APIG_HOSTNAME_PATTER : [];\n  if (service === DEFAULT_REST_IAM_SIGNING_SERVICE) {\n    // The configured endpoint is an API Gateway endpoint\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-call-api.html\n    return {\n      service,\n      region: region !== null && region !== void 0 ? region : signingRegion\n    };\n  } else if (service === 'appsync-api') {\n    // AppSync endpoint is internally supported because GraphQL operation will send request using POST handler.\n    // example: https://xxxx.appsync-api.us-east-1.amazonaws.com/graphql\n    return {\n      service: 'appsync',\n      region: region !== null && region !== void 0 ? region : signingRegion\n    };\n  } else {\n    return {\n      service: signingService,\n      region: signingRegion\n    };\n  }\n};\nexport { parseSigningInfo };","map":{"version":3,"names":["parseSigningInfo","url","restApiOptions","_restApiOptions$ampli","_restApiOptions$ampli2","_APIG_HOSTNAME_PATTER","service","signingService","DEFAULT_REST_IAM_SIGNING_SERVICE","region","signingRegion","DEFAULT_IAM_SIGNING_REGION","amplify","getConfig","API","REST","apiName","hostname","APIG_HOSTNAME_PATTERN","exec"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-rest/src/utils/parseSigningInfo.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { APIG_HOSTNAME_PATTERN, DEFAULT_IAM_SIGNING_REGION, DEFAULT_REST_IAM_SIGNING_SERVICE, } from './constants';\n/**\n * Infer the signing service and region from the given URL, and for REST API only, from the Amplify configuration.\n * It supports raw API Gateway endpoint and AppSync endpoint.\n *\n * @internal\n */\nexport const parseSigningInfo = (url, restApiOptions) => {\n    const { service: signingService = DEFAULT_REST_IAM_SIGNING_SERVICE, region: signingRegion = DEFAULT_IAM_SIGNING_REGION, } = restApiOptions?.amplify.getConfig()?.API?.REST?.[restApiOptions?.apiName] ??\n        {};\n    const { hostname } = url;\n    const [, service, region] = APIG_HOSTNAME_PATTERN.exec(hostname) ?? [];\n    if (service === DEFAULT_REST_IAM_SIGNING_SERVICE) {\n        // The configured endpoint is an API Gateway endpoint\n        // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-call-api.html\n        return {\n            service,\n            region: region ?? signingRegion,\n        };\n    }\n    else if (service === 'appsync-api') {\n        // AppSync endpoint is internally supported because GraphQL operation will send request using POST handler.\n        // example: https://xxxx.appsync-api.us-east-1.amazonaws.com/graphql\n        return {\n            service: 'appsync',\n            region: region ?? signingRegion,\n        };\n    }\n    else {\n        return {\n            service: signingService,\n            region: signingRegion,\n        };\n    }\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,cAAc,KAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA;EACrD,MAAM;IAAEC,OAAO,EAAEC,cAAc,GAAGC,gCAAgC;IAAEC,MAAM,EAAEC,aAAa,GAAGC;EAA0B,CAAG,IAAAR,qBAAA,GAAGD,cAAc,aAAdA,cAAc,gBAAAE,sBAAA,GAAdF,cAAc,CAAEU,OAAO,CAACC,SAAS,EAAE,cAAAT,sBAAA,gBAAAA,sBAAA,GAAnCA,sBAAA,CAAqCU,GAAG,cAAAV,sBAAA,gBAAAA,sBAAA,GAAxCA,sBAAA,CAA0CW,IAAI,cAAAX,sBAAA,uBAA9CA,sBAAA,CAAiDF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEc,OAAO,CAAC,cAAAb,qBAAA,cAAAA,qBAAA,GACjM,EAAE;EACN,MAAM;IAAEc;EAAQ,CAAE,GAAGhB,GAAG;EACxB,MAAM,GAAGK,OAAO,EAAEG,MAAM,CAAC,IAAAJ,qBAAA,GAAGa,qBAAqB,CAACC,IAAI,CAACF,QAAQ,CAAC,cAAAZ,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EACtE,IAAIC,OAAO,KAAKE,gCAAgC,EAAE;IACtD;IACA;IACQ,OAAO;MACHF,OAAO;MACPG,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIC;IAC9B,CAAS;EACT,CAAK,MACI,IAAIJ,OAAO,KAAK,aAAa,EAAE;IACxC;IACA;IACQ,OAAO;MACHA,OAAO,EAAE,SAAS;MAClBG,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIC;IAC9B,CAAS;EACT,CAAK,MACI;IACD,OAAO;MACHJ,OAAO,EAAEC,cAAc;MACvBE,MAAM,EAAEC;IACpB,CAAS;EACT;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}