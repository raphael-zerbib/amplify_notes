{"ast":null,"code":"import { authModeParams, getCustomHeaders, flattenItems, initializeModel, selectionSetIRToString, defaultSelectionSetForNonModelWithIR, generateSelectionSet } from '../APIClient.mjs';\n\n/**\n * Builds an operation function, embedded with all client and context data, that\n * can be attached to a client as a custom query or mutation.\n *\n * If we have this source schema:\n *\n * ```typescript\n * a.schema({\n *   echo: a.query()\n *     .arguments({input: a.string().required()})\n *     .returns(a.string())\n * })\n * ```\n *\n * Our model intro schema will contain an entry like this:\n *\n * ```ts\n * {\n *   queries: {\n *     echo: {\n *       name: \"echo\",\n *       isArray: false,\n *       type: 'String',\n *       isRequired: false,\n *       arguments: {\n *         input: {\n *           name: 'input',\n *           isArray: false,\n *           type: String,\n *           isRequired: true\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * The `echo` object is used to build the `echo' method that goes here:\n *\n * ```typescript\n * const client = generateClent()\n * const { data } = await client.queries.echo({input: 'a string'});\n * //                                    ^\n * //                                    |\n * //                                    +-- This one right here.\n * //\n * ```\n *\n *\n * @param client The client to run graphql queries through.\n * @param modelIntrospection The model introspection schema the op comes from.\n * @param operationType The broad category of graphql operation.\n * @param operation The operation definition from the introspection schema.\n * @param useContext Whether the function needs to accept an SSR context.\n * @returns The operation function to attach to query, mutations, etc.\n */\nfunction customOpFactory(client, modelIntrospection, operationType, operation, useContext) {\n  const opWithContext = async (contextSpec, arg, options) => {\n    return _op(client, modelIntrospection, operationType, operation, arg, options, contextSpec);\n  };\n  const op = async (arg, options) => {\n    return _op(client, modelIntrospection, operationType, operation, arg, options);\n  };\n  return useContext ? opWithContext : op;\n}\n/**\n * Runtime test and type guard to check whether `o[field]` is a `String`.\n *\n * ```typescript\n * if (hasStringField(o, 'prop')) {\n *   const s = o.prop;\n *   //    ^? const s: string\n * }\n * ```\n *\n * @param o Object to inspect\n * @param field Field to look for\n * @returns Boolean: `true` if the `o[field]` is a `string`\n */\nfunction hasStringField(o, field) {\n  return typeof o[field] === 'string';\n}\n/**\n * Generates \"outer\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the top/outer level arguments as a string:\n *\n * ```json\n * \"InputString: String!\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction outerArguments(operation) {\n  const args = Object.entries(operation.arguments).map(_ref => {\n    let [k, v] = _ref;\n    const baseType = v.type + (v.isRequired ? '!' : '');\n    const finalType = v.isArray ? \"[\".concat(baseType, \"]\").concat(v.isArrayNullable ? '' : '!') : baseType;\n    return \"$\".concat(k, \": \").concat(finalType);\n  }).join(', ');\n  return args.length > 0 ? \"(\".concat(args, \")\") : '';\n}\n/**\n * Generates \"inner\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the inner arguments as a string:\n *\n * ```json\n * \"InputString: $InputString\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction innerArguments(operation) {\n  const args = Object.entries(operation.arguments).map(_ref2 => {\n    let [k, v] = _ref2;\n    return \"\".concat(k, \": $\").concat(k);\n  }).join(', ');\n  return args.length > 0 ? \"(\".concat(args, \")\") : '';\n}\n/**\n * Generates the selection set string for a custom operation. This is slightly\n * different than the selection set generation for models. If the custom op returns\n * a primitive or enum types, it doen't require a selection set at all.\n *\n * E.g., the graphql might look like this:\n *\n * ```graphql\n * query MyQuery {\n *   echoString(inputString: \"whatever\")\n * }\n * #                                     ^\n * #                                     |\n * #                                     +-- no selection set\n * ```\n *\n * Non-primitive return type selection set generation will be similar to other\n * model operations.\n *\n * @param modelIntrospection The full code-generated introspection schema.\n * @param operation The operation object from the schema.\n * @returns The selection set as a string.\n */\nfunction operationSelectionSet(modelIntrospection, operation) {\n  if (hasStringField(operation, 'type') || hasStringField(operation.type, 'enum')) {\n    return '';\n  } else if (hasStringField(operation.type, 'nonModel')) {\n    const nonModel = modelIntrospection.nonModels[operation.type.nonModel];\n    return \"{\".concat(selectionSetIRToString(defaultSelectionSetForNonModelWithIR(nonModel, modelIntrospection)), \"}\");\n  } else if (hasStringField(operation.type, 'model')) {\n    return \"{\".concat(generateSelectionSet(modelIntrospection, operation.type.model), \"}\");\n  } else {\n    return '';\n  }\n}\n/**\n * Maps an arguments objec to graphql variables, removing superfluous args and\n * screaming loudly when required args are missing.\n *\n * @param operation The operation to construct graphql request variables for.\n * @param args The arguments to map variables from.\n * @returns The graphql variables object.\n */\nfunction operationVariables(operation) {\n  let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const variables = {};\n  for (const argDef of Object.values(operation.arguments)) {\n    if (typeof args[argDef.name] !== 'undefined') {\n      variables[argDef.name] = args[argDef.name];\n    } else if (argDef.isRequired) {\n      // At this point, the variable is both required and missing: We don't need\n      // to continue. The operation is expected to fail.\n      throw new Error(\"\".concat(operation.name, \" requires arguments '\").concat(argDef.name, \"'\"));\n    }\n  }\n  return variables;\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operationType The high level graphql operation type.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @param context SSR context if relevant.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nasync function _op(client, modelIntrospection, operationType, operation, args, options, context) {\n  const {\n    name: operationName\n  } = operation;\n  const auth = authModeParams(client, options);\n  const headers = getCustomHeaders(client, options === null || options === void 0 ? void 0 : options.headers);\n  const outerArgsString = outerArguments(operation);\n  const innerArgsString = innerArguments(operation);\n  const selectionSet = operationSelectionSet(modelIntrospection, operation);\n  const returnTypeModelName = hasStringField(operation.type, 'model') ? operation.type.model : undefined;\n  const query = \"\\n\\t\\t\".concat(operationType.toLocaleLowerCase()).concat(outerArgsString, \" {\\n\\t\\t\\t\").concat(operationName).concat(innerArgsString, \" \").concat(selectionSet, \"\\n\\t\\t}\\n\\t\");\n  const variables = operationVariables(operation, args);\n  try {\n    const {\n      data,\n      extensions\n    } = context ? await client.graphql(context, {\n      ...auth,\n      query,\n      variables\n    }, headers) : await client.graphql({\n      ...auth,\n      query,\n      variables\n    }, headers);\n    // flatten response\n    if (data) {\n      const [key] = Object.keys(data);\n      const flattenedResult = flattenItems(data)[key];\n      // TODO: custom selection set. current selection set is default selection set only\n      // custom selection set requires data-schema-type + runtime updates above.\n      const [initialized] = returnTypeModelName ? initializeModel(client, returnTypeModelName, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context) : [flattenedResult];\n      return {\n        data: initialized,\n        extensions\n      };\n    } else {\n      return {\n        data: null,\n        extensions\n      };\n    }\n  } catch (error) {\n    if (error.errors) {\n      // graphql errors pass through\n      return error;\n    } else {\n      // non-graphql errors re re-thrown\n      throw error;\n    }\n  }\n}\nexport { customOpFactory };","map":{"version":3,"names":["customOpFactory","client","modelIntrospection","operationType","operation","useContext","opWithContext","contextSpec","arg","options","_op","op","hasStringField","o","field","outerArguments","args","Object","entries","arguments","map","_ref","k","v","baseType","type","isRequired","finalType","isArray","concat","isArrayNullable","join","length","innerArguments","_ref2","operationSelectionSet","nonModel","nonModels","selectionSetIRToString","defaultSelectionSetForNonModelWithIR","generateSelectionSet","model","operationVariables","undefined","variables","argDef","values","name","Error","context","operationName","auth","authModeParams","headers","getCustomHeaders","outerArgsString","innerArgsString","selectionSet","returnTypeModelName","query","toLocaleLowerCase","data","extensions","graphql","key","keys","flattenedResult","flattenItems","initialized","initializeModel","authMode","authToken","error","errors"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-graphql/src/internals/operations/custom.ts"],"sourcesContent":["import { initializeModel, flattenItems, authModeParams, getCustomHeaders, generateSelectionSet, selectionSetIRToString, defaultSelectionSetForNonModelWithIR, } from '../APIClient';\n/**\n * Builds an operation function, embedded with all client and context data, that\n * can be attached to a client as a custom query or mutation.\n *\n * If we have this source schema:\n *\n * ```typescript\n * a.schema({\n *   echo: a.query()\n *     .arguments({input: a.string().required()})\n *     .returns(a.string())\n * })\n * ```\n *\n * Our model intro schema will contain an entry like this:\n *\n * ```ts\n * {\n *   queries: {\n *     echo: {\n *       name: \"echo\",\n *       isArray: false,\n *       type: 'String',\n *       isRequired: false,\n *       arguments: {\n *         input: {\n *           name: 'input',\n *           isArray: false,\n *           type: String,\n *           isRequired: true\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * The `echo` object is used to build the `echo' method that goes here:\n *\n * ```typescript\n * const client = generateClent()\n * const { data } = await client.queries.echo({input: 'a string'});\n * //                                    ^\n * //                                    |\n * //                                    +-- This one right here.\n * //\n * ```\n *\n *\n * @param client The client to run graphql queries through.\n * @param modelIntrospection The model introspection schema the op comes from.\n * @param operationType The broad category of graphql operation.\n * @param operation The operation definition from the introspection schema.\n * @param useContext Whether the function needs to accept an SSR context.\n * @returns The operation function to attach to query, mutations, etc.\n */\nexport function customOpFactory(client, modelIntrospection, operationType, operation, useContext) {\n    const opWithContext = async (contextSpec, arg, options) => {\n        return _op(client, modelIntrospection, operationType, operation, arg, options, contextSpec);\n    };\n    const op = async (arg, options) => {\n        return _op(client, modelIntrospection, operationType, operation, arg, options);\n    };\n    return useContext ? opWithContext : op;\n}\n/**\n * Runtime test and type guard to check whether `o[field]` is a `String`.\n *\n * ```typescript\n * if (hasStringField(o, 'prop')) {\n *   const s = o.prop;\n *   //    ^? const s: string\n * }\n * ```\n *\n * @param o Object to inspect\n * @param field Field to look for\n * @returns Boolean: `true` if the `o[field]` is a `string`\n */\nfunction hasStringField(o, field) {\n    return typeof o[field] === 'string';\n}\n/**\n * Generates \"outer\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the top/outer level arguments as a string:\n *\n * ```json\n * \"InputString: String!\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction outerArguments(operation) {\n    const args = Object.entries(operation.arguments)\n        .map(([k, v]) => {\n        const baseType = v.type + (v.isRequired ? '!' : '');\n        const finalType = v.isArray\n            ? `[${baseType}]${v.isArrayNullable ? '' : '!'}`\n            : baseType;\n        return `$${k}: ${finalType}`;\n    })\n        .join(', ');\n    return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates \"inner\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the inner arguments as a string:\n *\n * ```json\n * \"InputString: $InputString\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction innerArguments(operation) {\n    const args = Object.entries(operation.arguments)\n        .map(([k, v]) => `${k}: $${k}`)\n        .join(', ');\n    return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates the selection set string for a custom operation. This is slightly\n * different than the selection set generation for models. If the custom op returns\n * a primitive or enum types, it doen't require a selection set at all.\n *\n * E.g., the graphql might look like this:\n *\n * ```graphql\n * query MyQuery {\n *   echoString(inputString: \"whatever\")\n * }\n * #                                     ^\n * #                                     |\n * #                                     +-- no selection set\n * ```\n *\n * Non-primitive return type selection set generation will be similar to other\n * model operations.\n *\n * @param modelIntrospection The full code-generated introspection schema.\n * @param operation The operation object from the schema.\n * @returns The selection set as a string.\n */\nfunction operationSelectionSet(modelIntrospection, operation) {\n    if (hasStringField(operation, 'type') ||\n        hasStringField(operation.type, 'enum')) {\n        return '';\n    }\n    else if (hasStringField(operation.type, 'nonModel')) {\n        const nonModel = modelIntrospection.nonModels[operation.type.nonModel];\n        return `{${selectionSetIRToString(defaultSelectionSetForNonModelWithIR(nonModel, modelIntrospection))}}`;\n    }\n    else if (hasStringField(operation.type, 'model')) {\n        return `{${generateSelectionSet(modelIntrospection, operation.type.model)}}`;\n    }\n    else {\n        return '';\n    }\n}\n/**\n * Maps an arguments objec to graphql variables, removing superfluous args and\n * screaming loudly when required args are missing.\n *\n * @param operation The operation to construct graphql request variables for.\n * @param args The arguments to map variables from.\n * @returns The graphql variables object.\n */\nfunction operationVariables(operation, args = {}) {\n    const variables = {};\n    for (const argDef of Object.values(operation.arguments)) {\n        if (typeof args[argDef.name] !== 'undefined') {\n            variables[argDef.name] = args[argDef.name];\n        }\n        else if (argDef.isRequired) {\n            // At this point, the variable is both required and missing: We don't need\n            // to continue. The operation is expected to fail.\n            throw new Error(`${operation.name} requires arguments '${argDef.name}'`);\n        }\n    }\n    return variables;\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operationType The high level graphql operation type.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @param context SSR context if relevant.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nasync function _op(client, modelIntrospection, operationType, operation, args, options, context) {\n    const { name: operationName } = operation;\n    const auth = authModeParams(client, options);\n    const headers = getCustomHeaders(client, options?.headers);\n    const outerArgsString = outerArguments(operation);\n    const innerArgsString = innerArguments(operation);\n    const selectionSet = operationSelectionSet(modelIntrospection, operation);\n    const returnTypeModelName = hasStringField(operation.type, 'model')\n        ? operation.type.model\n        : undefined;\n    const query = `\n\t\t${operationType.toLocaleLowerCase()}${outerArgsString} {\n\t\t\t${operationName}${innerArgsString} ${selectionSet}\n\t\t}\n\t`;\n    const variables = operationVariables(operation, args);\n    try {\n        const { data, extensions } = context\n            ? (await client.graphql(context, {\n                ...auth,\n                query,\n                variables,\n            }, headers))\n            : (await client.graphql({\n                ...auth,\n                query,\n                variables,\n            }, headers));\n        // flatten response\n        if (data) {\n            const [key] = Object.keys(data);\n            const flattenedResult = flattenItems(data)[key];\n            // TODO: custom selection set. current selection set is default selection set only\n            // custom selection set requires data-schema-type + runtime updates above.\n            const [initialized] = returnTypeModelName\n                ? initializeModel(client, returnTypeModelName, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context)\n                : [flattenedResult];\n            return { data: initialized, extensions };\n        }\n        else {\n            return { data: null, extensions };\n        }\n    }\n    catch (error) {\n        if (error.errors) {\n            // graphql errors pass through\n            return error;\n        }\n        else {\n            // non-graphql errors re re-thrown\n            throw error;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}