{"ast":null,"code":"import { isFieldAssociation } from '../types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Defines a relationship from a LOCAL model.field to a REMOTE model.field and helps\n * navigate the relationship, providing a simplified peek at the relationship details\n * pertinent to setting FK's and constructing join conditions.\n *\n * Because I mean, relationships are tough.\n *\n */\nclass ModelRelationship {\n  /**\n   * @param modelDefinition The \"local\" model.\n   * @param field The \"local\" model field.\n   */\n  constructor(model, field) {\n    if (!isFieldAssociation(model.schema, field)) {\n      throw new Error(\"\".concat(model.schema.name, \".\").concat(field, \" is not a relationship.\"));\n    }\n    this.localModel = model;\n    this._field = field;\n  }\n  /**\n   * Returns a ModelRelationship for the the given model and field if the pair\n   * indicates a relationship to another model. Else, returns `null`.\n   *\n   * @param model The model the relationship field exists in.\n   * @param field The field that may relates the local model to the remote model.\n   */\n  static from(model, field) {\n    if (isFieldAssociation(model.schema, field)) {\n      return new this(model, field);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Enumerates all valid `ModelRelationship`'s on the given model.\n   *\n   * @param model The model definition to enumerate relationships of.\n   */\n  static allFrom(model) {\n    const relationships = [];\n    for (const field of Object.keys(model.schema.fields)) {\n      const relationship = ModelRelationship.from(model, field);\n      relationship && relationships.push(relationship);\n    }\n    return relationships;\n  }\n  get localDefinition() {\n    return this.localModel.schema;\n  }\n  /**\n   * The virtual/computed field on the local model that should contain\n   * the related model.\n   */\n  get field() {\n    return this._field;\n  }\n  /**\n   * The constructor that can be used to query DataStore or create instance for\n   * the local model.\n   */\n  get localConstructor() {\n    return this.localModel.builder;\n  }\n  /**\n   * The name/type of the relationship the local model has with the remote model\n   * via the defined local model field.\n   */\n  get type() {\n    return this.localAssocation.connectionType;\n  }\n  /**\n   * Raw details about the local FK as-is from the local model's field definition in\n   * the schema. This field requires interpretation.\n   *\n   * @see localJoinFields\n   * @see localAssociatedWith\n   */\n  get localAssocation() {\n    return this.localDefinition.fields[this.field].association;\n  }\n  /**\n   * The field names on the local model that can be used to query or queried to match\n   * with instances of the remote model.\n   *\n   * Fields are returned in-order to match the order of `this.remoteKeyFields`.\n   */\n  get localJoinFields() {\n    /**\n     * This is relatively straightforward, actually.\n     *\n     * If we have explicitly stated targetNames, codegen is telling us authoritatively\n     * to use those fields for this relationship. The local model \"points to\" fields\n     * in the remote one.\n     *\n     * In other cases, the remote model points to this one's\n     */\n    if (this.localAssocation.targetName) {\n      // This case is theoretically unnecessary going forward.\n      return [this.localAssocation.targetName];\n    } else if (this.localAssocation.targetNames) {\n      return this.localAssocation.targetNames;\n    } else {\n      return this.localPKFields;\n    }\n  }\n  /**\n   * The field names on the local model that uniquely identify it.\n   *\n   * These fields may or may not be relevant to the join fields.\n   */\n  get localPKFields() {\n    return this.localModel.pkField;\n  }\n  get remoteDefinition() {\n    var _this$remoteModelType;\n    return (_this$remoteModelType = this.remoteModelType.modelConstructor) === null || _this$remoteModelType === void 0 ? void 0 : _this$remoteModelType.schema;\n  }\n  get remoteModelType() {\n    return this.localDefinition.fields[this.field].type;\n  }\n  /**\n   * Constructor that can be used to query DataStore or create instances for\n   * the remote model.\n   */\n  get remoteModelConstructor() {\n    return this.remoteModelType.modelConstructor.builder;\n  }\n  /**\n   * The field names on the remote model that uniquely identify it.\n   *\n   * These fields may or may not be relevant to the join fields.\n   */\n  get remotePKFields() {\n    var _this$remoteModelType2;\n    return ((_this$remoteModelType2 = this.remoteModelType.modelConstructor) === null || _this$remoteModelType2 === void 0 ? void 0 : _this$remoteModelType2.pkField) || ['id'];\n  }\n  /**\n   * The `associatedWith` fields from the local perspective.\n   *\n   * When present, these fields indicate which fields on the remote model to use\n   * when looking for a remote association and/or determining the final remote\n   * key fields.\n   */\n  get localAssociatedWith() {\n    if (this.localAssocation.connectionType === 'HAS_MANY' || this.localAssocation.connectionType === 'HAS_ONE') {\n      // This de-arraying is theoretically unnecessary going forward.\n      return Array.isArray(this.localAssocation.associatedWith) ? this.localAssocation.associatedWith : [this.localAssocation.associatedWith];\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The `remote` model's associated field's `assocation` metadata, if\n   * present.\n   *\n   * This is used when determining if the remote model's associated field\n   * specifies which FK fields to use. If this value is `undefined`, the\n   * name of the remote field (`this.localAssociatedWith`) *is* the remote\n   * key field.\n   */\n  get explicitRemoteAssociation() {\n    if (this.localAssociatedWith) {\n      if (this.localAssociatedWith.length === 1) {\n        var _this$remoteDefinitio;\n        return (_this$remoteDefinitio = this.remoteDefinition.fields[this.localAssociatedWith[0]]) === null || _this$remoteDefinitio === void 0 ? void 0 : _this$remoteDefinitio.association;\n      } else {\n        return undefined;\n      }\n    }\n  }\n  /**\n   * The field names on the remote model that can used to query or queried to match\n   * with instances of the local model.\n   *\n   * Fields are returned in-order to match the order of `this.localKeyFields`.\n   */\n  get remoteJoinFields() {\n    var _this$explicitRemoteA, _this$explicitRemoteA2;\n    /**\n     * If the local relationship explicitly names \"associated with\" fields, we\n     * need to see if this points direction to a reciprocating assocation. If it\n     * does, the remote assocation indicates what fields to use.\n     */\n    if ((_this$explicitRemoteA = this.explicitRemoteAssociation) !== null && _this$explicitRemoteA !== void 0 && _this$explicitRemoteA.targetName) {\n      // This case is theoretically unnecessary going forward.\n      return [this.explicitRemoteAssociation.targetName];\n    } else if ((_this$explicitRemoteA2 = this.explicitRemoteAssociation) !== null && _this$explicitRemoteA2 !== void 0 && _this$explicitRemoteA2.targetNames) {\n      var _this$explicitRemoteA3;\n      return (_this$explicitRemoteA3 = this.explicitRemoteAssociation) === null || _this$explicitRemoteA3 === void 0 ? void 0 : _this$explicitRemoteA3.targetNames;\n    } else if (this.localAssociatedWith) {\n      return this.localAssociatedWith;\n    } else {\n      return this.remotePKFields;\n    }\n  }\n  /**\n   * Whether this relationship everything necessary to get, set, and query from\n   * the perspective of the local model provided at instantiation.\n   */\n  get isComplete() {\n    return this.localJoinFields.length > 0 && this.remoteJoinFields.length > 0;\n  }\n  /**\n   * Creates an FK mapper object with respect to the given related instance.\n   *\n   * E.g., if the local FK fields are `[parentId, parentName]` and point to\n   * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n   * will return:\n   *\n   * ```\n   * {\n   * \tparentId: remote.customId,\n   * \tparentName: remote.name\n   * }\n   * ```\n   *\n   * @param remote The remote related instance.\n   */\n  createLocalFKObject(remote) {\n    const fk = {};\n    for (let i = 0; i < this.localJoinFields.length; i++) {\n      fk[this.localJoinFields[i]] = remote[this.remoteJoinFields[i]];\n    }\n    return fk;\n  }\n  /**\n   * Creates an query mapper object to help fetch the remote instance(s) or\n   * `null` if any of the necessary local fields are `null` or `undefined`.\n   *\n   * E.g., if the local FK fields are `[parentId, parentName]` and point to\n   * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n   * will return:\n   *\n   * ```\n   * {\n   * \tcustomId: local.parentId\n   * \tname: local.parentName\n   * }\n   * ```\n   *\n   * If the local fields are not populated, returns\n   *\n   * @param local The local instance.\n   */\n  createRemoteQueryObject(local) {\n    const query = {};\n    for (let i = 0; i < this.remoteJoinFields.length; i++) {\n      const localValue = local[this.localJoinFields[i]];\n      if (localValue === null || localValue === undefined) return null;\n      query[this.remoteJoinFields[i]] = local[this.localJoinFields[i]];\n    }\n    return query;\n  }\n}\nexport { ModelRelationship };","map":{"version":3,"names":["ModelRelationship","constructor","model","field","isFieldAssociation","schema","Error","concat","name","localModel","_field","from","allFrom","relationships","Object","keys","fields","relationship","push","localDefinition","localConstructor","builder","type","localAssocation","connectionType","association","localJoinFields","targetName","targetNames","localPKFields","pkField","remoteDefinition","_this$remoteModelType","remoteModelType","modelConstructor","remoteModelConstructor","remotePKFields","_this$remoteModelType2","localAssociatedWith","Array","isArray","associatedWith","undefined","explicitRemoteAssociation","length","_this$remoteDefinitio","remoteJoinFields","_this$explicitRemoteA","_this$explicitRemoteA2","_this$explicitRemoteA3","isComplete","createLocalFKObject","remote","fk","i","createRemoteQueryObject","local","query","localValue"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/storage/relationship.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isFieldAssociation } from '../types';\n/**\n * Defines a relationship from a LOCAL model.field to a REMOTE model.field and helps\n * navigate the relationship, providing a simplified peek at the relationship details\n * pertinent to setting FK's and constructing join conditions.\n *\n * Because I mean, relationships are tough.\n *\n */\nexport class ModelRelationship {\n    /**\n     * @param modelDefinition The \"local\" model.\n     * @param field The \"local\" model field.\n     */\n    constructor(model, field) {\n        if (!isFieldAssociation(model.schema, field)) {\n            throw new Error(`${model.schema.name}.${field} is not a relationship.`);\n        }\n        this.localModel = model;\n        this._field = field;\n    }\n    /**\n     * Returns a ModelRelationship for the the given model and field if the pair\n     * indicates a relationship to another model. Else, returns `null`.\n     *\n     * @param model The model the relationship field exists in.\n     * @param field The field that may relates the local model to the remote model.\n     */\n    static from(model, field) {\n        if (isFieldAssociation(model.schema, field)) {\n            return new this(model, field);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Enumerates all valid `ModelRelationship`'s on the given model.\n     *\n     * @param model The model definition to enumerate relationships of.\n     */\n    static allFrom(model) {\n        const relationships = [];\n        for (const field of Object.keys(model.schema.fields)) {\n            const relationship = ModelRelationship.from(model, field);\n            relationship && relationships.push(relationship);\n        }\n        return relationships;\n    }\n    get localDefinition() {\n        return this.localModel.schema;\n    }\n    /**\n     * The virtual/computed field on the local model that should contain\n     * the related model.\n     */\n    get field() {\n        return this._field;\n    }\n    /**\n     * The constructor that can be used to query DataStore or create instance for\n     * the local model.\n     */\n    get localConstructor() {\n        return this.localModel.builder;\n    }\n    /**\n     * The name/type of the relationship the local model has with the remote model\n     * via the defined local model field.\n     */\n    get type() {\n        return this.localAssocation.connectionType;\n    }\n    /**\n     * Raw details about the local FK as-is from the local model's field definition in\n     * the schema. This field requires interpretation.\n     *\n     * @see localJoinFields\n     * @see localAssociatedWith\n     */\n    get localAssocation() {\n        return this.localDefinition.fields[this.field].association;\n    }\n    /**\n     * The field names on the local model that can be used to query or queried to match\n     * with instances of the remote model.\n     *\n     * Fields are returned in-order to match the order of `this.remoteKeyFields`.\n     */\n    get localJoinFields() {\n        /**\n         * This is relatively straightforward, actually.\n         *\n         * If we have explicitly stated targetNames, codegen is telling us authoritatively\n         * to use those fields for this relationship. The local model \"points to\" fields\n         * in the remote one.\n         *\n         * In other cases, the remote model points to this one's\n         */\n        if (this.localAssocation.targetName) {\n            // This case is theoretically unnecessary going forward.\n            return [this.localAssocation.targetName];\n        }\n        else if (this.localAssocation.targetNames) {\n            return this.localAssocation.targetNames;\n        }\n        else {\n            return this.localPKFields;\n        }\n    }\n    /**\n     * The field names on the local model that uniquely identify it.\n     *\n     * These fields may or may not be relevant to the join fields.\n     */\n    get localPKFields() {\n        return this.localModel.pkField;\n    }\n    get remoteDefinition() {\n        return this.remoteModelType.modelConstructor?.schema;\n    }\n    get remoteModelType() {\n        return this.localDefinition.fields[this.field].type;\n    }\n    /**\n     * Constructor that can be used to query DataStore or create instances for\n     * the remote model.\n     */\n    get remoteModelConstructor() {\n        return this.remoteModelType.modelConstructor.builder;\n    }\n    /**\n     * The field names on the remote model that uniquely identify it.\n     *\n     * These fields may or may not be relevant to the join fields.\n     */\n    get remotePKFields() {\n        return this.remoteModelType.modelConstructor?.pkField || ['id'];\n    }\n    /**\n     * The `associatedWith` fields from the local perspective.\n     *\n     * When present, these fields indicate which fields on the remote model to use\n     * when looking for a remote association and/or determining the final remote\n     * key fields.\n     */\n    get localAssociatedWith() {\n        if (this.localAssocation.connectionType === 'HAS_MANY' ||\n            this.localAssocation.connectionType === 'HAS_ONE') {\n            // This de-arraying is theoretically unnecessary going forward.\n            return Array.isArray(this.localAssocation.associatedWith)\n                ? this.localAssocation.associatedWith\n                : [this.localAssocation.associatedWith];\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * The `remote` model's associated field's `assocation` metadata, if\n     * present.\n     *\n     * This is used when determining if the remote model's associated field\n     * specifies which FK fields to use. If this value is `undefined`, the\n     * name of the remote field (`this.localAssociatedWith`) *is* the remote\n     * key field.\n     */\n    get explicitRemoteAssociation() {\n        if (this.localAssociatedWith) {\n            if (this.localAssociatedWith.length === 1) {\n                return this.remoteDefinition.fields[this.localAssociatedWith[0]]\n                    ?.association;\n            }\n            else {\n                return undefined;\n            }\n        }\n    }\n    /**\n     * The field names on the remote model that can used to query or queried to match\n     * with instances of the local model.\n     *\n     * Fields are returned in-order to match the order of `this.localKeyFields`.\n     */\n    get remoteJoinFields() {\n        /**\n         * If the local relationship explicitly names \"associated with\" fields, we\n         * need to see if this points direction to a reciprocating assocation. If it\n         * does, the remote assocation indicates what fields to use.\n         */\n        if (this.explicitRemoteAssociation?.targetName) {\n            // This case is theoretically unnecessary going forward.\n            return [this.explicitRemoteAssociation.targetName];\n        }\n        else if (this.explicitRemoteAssociation?.targetNames) {\n            return this.explicitRemoteAssociation?.targetNames;\n        }\n        else if (this.localAssociatedWith) {\n            return this.localAssociatedWith;\n        }\n        else {\n            return this.remotePKFields;\n        }\n    }\n    /**\n     * Whether this relationship everything necessary to get, set, and query from\n     * the perspective of the local model provided at instantiation.\n     */\n    get isComplete() {\n        return this.localJoinFields.length > 0 && this.remoteJoinFields.length > 0;\n    }\n    /**\n     * Creates an FK mapper object with respect to the given related instance.\n     *\n     * E.g., if the local FK fields are `[parentId, parentName]` and point to\n     * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n     * will return:\n     *\n     * ```\n     * {\n     * \tparentId: remote.customId,\n     * \tparentName: remote.name\n     * }\n     * ```\n     *\n     * @param remote The remote related instance.\n     */\n    createLocalFKObject(remote) {\n        const fk = {};\n        for (let i = 0; i < this.localJoinFields.length; i++) {\n            fk[this.localJoinFields[i]] = remote[this.remoteJoinFields[i]];\n        }\n        return fk;\n    }\n    /**\n     * Creates an query mapper object to help fetch the remote instance(s) or\n     * `null` if any of the necessary local fields are `null` or `undefined`.\n     *\n     * E.g., if the local FK fields are `[parentId, parentName]` and point to\n     * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n     * will return:\n     *\n     * ```\n     * {\n     * \tcustomId: local.parentId\n     * \tname: local.parentName\n     * }\n     * ```\n     *\n     * If the local fields are not populated, returns\n     *\n     * @param local The local instance.\n     */\n    createRemoteQueryObject(local) {\n        const query = {};\n        for (let i = 0; i < this.remoteJoinFields.length; i++) {\n            const localValue = local[this.localJoinFields[i]];\n            if (localValue === null || localValue === undefined)\n                return null;\n            query[this.remoteJoinFields[i]] = local[this.localJoinFields[i]];\n        }\n        return query;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}