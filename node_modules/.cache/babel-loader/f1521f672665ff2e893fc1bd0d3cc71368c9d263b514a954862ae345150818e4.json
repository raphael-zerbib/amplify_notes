{"ast":null,"code":"import { createMachine, sendUpdate } from 'xstate';\nimport { fetchUserAttributes, resetPassword, resendSignUpCode, confirmSignIn, signInWithRedirect } from 'aws-amplify/auth';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport { defaultServices } from '../defaultServices.mjs';\nimport GUARDS from '../guards.mjs';\nimport { getFederatedSignInState } from './utils.mjs';\nconst handleSignInResponse = {\n  onDone: [{\n    cond: 'hasCompletedSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.fetchUserAttributes'\n  }, {\n    cond: 'shouldConfirmSignInWithNewPassword',\n    actions: ['setMissingAttributes', 'setNextSignInStep'],\n    target: '#signInActor.forceChangePassword'\n  }, {\n    cond: 'shouldResetPasswordFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.resetPassword'\n  }, {\n    cond: 'shouldConfirmSignUpFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.resendSignUpCode'\n  }, {\n    actions: ['setChallengeName', 'setMissingAttributes', 'setNextSignInStep', 'setTotpSecretCode'],\n    target: '#signInActor.init'\n  }],\n  onError: {\n    actions: 'setRemoteError',\n    target: 'edit'\n  }\n};\nconst handleFetchUserAttributesResponse = {\n  onDone: [{\n    cond: 'shouldVerifyAttribute',\n    actions: ['setShouldVerifyUserAttributeStep', 'setUnverifiedUserAttributes'],\n    target: '#signInActor.resolved'\n  }, {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signInActor.resolved'\n  }],\n  onError: {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signInActor.resolved'\n  }\n};\nfunction signInActor(_ref) {\n  let {\n    services\n  } = _ref;\n  return createMachine({\n    id: 'signInActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldConfirmSignIn',\n          target: 'confirmSignIn'\n        }, {\n          cond: 'shouldSetupTotp',\n          target: 'setupTotp'\n        }, {\n          cond: _ref2 => {\n            let {\n              step\n            } = _ref2;\n            return step === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\n          },\n          actions: 'setActorDoneData',\n          target: 'forceChangePassword'\n        }, {\n          target: 'signIn'\n        }]\n      },\n      federatedSignIn: getFederatedSignInState('signIn'),\n      fetchUserAttributes: {\n        invoke: {\n          src: 'fetchUserAttributes',\n          ...handleFetchUserAttributesResponse\n        }\n      },\n      resendSignUpCode: {\n        invoke: {\n          src: 'handleResendSignUpCode',\n          onDone: {\n            actions: 'setCodeDeliveryDetails',\n            target: '#signInActor.resolved'\n          },\n          onError: {\n            actions: 'setRemoteError',\n            target: '#signInActor.signIn'\n          }\n        }\n      },\n      resetPassword: {\n        invoke: {\n          src: 'resetPassword',\n          onDone: [{\n            actions: 'setCodeDeliveryDetails',\n            target: '#signInActor.resolved'\n          }],\n          onError: {\n            actions: ['setRemoteError', 'sendUpdate']\n          }\n        }\n      },\n      signIn: {\n        initial: 'edit',\n        exit: 'clearTouched',\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              FEDERATED_SIGN_IN: {\n                target: '#signInActor.federatedSignIn'\n              },\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate', 'setUsernameSignIn'],\n            exit: 'clearFormValues',\n            invoke: {\n              src: 'handleSignIn',\n              ...handleSignInResponse\n            }\n          }\n        }\n      },\n      confirmSignIn: {\n        initial: 'edit',\n        exit: ['clearChallengeName', 'clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: {\n              src: 'confirmSignIn',\n              ...handleSignInResponse\n            }\n          }\n        }\n      },\n      forceChangePassword: {\n        entry: 'sendUpdate',\n        type: 'parallel',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              SIGN_IN: {\n                actions: 'setSignInStep',\n                target: '#signInActor.resolved'\n              },\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              },\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              }\n            }\n          },\n          submit: {\n            initial: 'edit',\n            entry: 'clearError',\n            states: {\n              edit: {\n                entry: 'sendUpdate',\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    actions: 'clearValidationError',\n                    target: 'pending'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'edit'\n                  }\n                }\n              },\n              pending: {\n                tags: 'pending',\n                entry: ['sendUpdate', 'clearError'],\n                invoke: {\n                  src: 'handleForceChangePassword',\n                  ...handleSignInResponse\n                }\n              }\n            }\n          }\n        }\n      },\n      setupTotp: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['sendUpdate', 'clearError'],\n            invoke: {\n              src: 'confirmSignIn',\n              ...handleSignInResponse\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: context => ({\n          codeDeliveryDetails: context.codeDeliveryDetails,\n          remoteError: context.remoteError,\n          step: context.step,\n          unverifiedUserAttributes: context.unverifiedUserAttributes,\n          username: context.username\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: {\n      ...ACTIONS,\n      sendUpdate: sendUpdate()\n    },\n    guards: GUARDS,\n    services: {\n      async fetchUserAttributes() {\n        return fetchUserAttributes();\n      },\n      resetPassword(_ref3) {\n        let {\n          username\n        } = _ref3;\n        return resetPassword({\n          username\n        });\n      },\n      handleResendSignUpCode(_ref4) {\n        let {\n          username\n        } = _ref4;\n        return resendSignUpCode({\n          username\n        });\n      },\n      handleSignIn(_ref5) {\n        let {\n          formValues,\n          username\n        } = _ref5;\n        const {\n          password\n        } = formValues;\n        return services.handleSignIn({\n          username,\n          password\n        });\n      },\n      confirmSignIn(_ref6) {\n        let {\n          formValues\n        } = _ref6;\n        const {\n          confirmation_code: challengeResponse\n        } = formValues;\n        return services.handleConfirmSignIn({\n          challengeResponse\n        });\n      },\n      async handleForceChangePassword(_ref7) {\n        let {\n          formValues\n        } = _ref7;\n        let {\n          password: challengeResponse,\n          phone_number,\n          country_code,\n          // destructure and toss UI confirm_password field\n          // to prevent error from sending to confirmSignIn\n          confirm_password,\n          ...userAttributes\n        } = formValues;\n        let phoneNumberWithCountryCode;\n        if (phone_number) {\n          phoneNumberWithCountryCode = \"\".concat(country_code).concat(phone_number).replace(/[^A-Z0-9+]/gi, '');\n          userAttributes = {\n            ...userAttributes,\n            phone_number: phoneNumberWithCountryCode\n          };\n        }\n        const input = {\n          challengeResponse,\n          options: {\n            userAttributes\n          }\n        };\n        return confirmSignIn(input);\n      },\n      signInWithRedirect(_, _ref8) {\n        let {\n          data\n        } = _ref8;\n        return signInWithRedirect(data);\n      },\n      async validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nexport { signInActor };","map":{"version":3,"names":["createMachine","sendUpdate","fetchUserAttributes","resetPassword","resendSignUpCode","confirmSignIn","signInWithRedirect","runValidators","ACTIONS","defaultServices","GUARDS","getFederatedSignInState","handleSignInResponse","onDone","cond","actions","target","onError","handleFetchUserAttributesResponse","signInActor","_ref","services","id","initial","predictableActionArguments","states","init","always","_ref2","step","federatedSignIn","invoke","src","signIn","exit","edit","entry","on","CHANGE","FEDERATED_SIGN_IN","SUBMIT","submit","tags","SIGN_IN","forceChangePassword","type","validation","pending","valid","invalid","BLUR","validate","setupTotp","resolved","data","context","codeDeliveryDetails","remoteError","unverifiedUserAttributes","username","guards","_ref3","handleResendSignUpCode","_ref4","handleSignIn","_ref5","formValues","password","_ref6","confirmation_code","challengeResponse","handleConfirmSignIn","handleForceChangePassword","_ref7","phone_number","country_code","confirm_password","userAttributes","phoneNumberWithCountryCode","concat","replace","input","options","_","_ref8","validateFields","touched","passwordSettings","validateFormPassword","validateConfirmPassword"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signIn.mjs"],"sourcesContent":["import { createMachine, sendUpdate } from 'xstate';\nimport { fetchUserAttributes, resetPassword, resendSignUpCode, confirmSignIn, signInWithRedirect } from 'aws-amplify/auth';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport { defaultServices } from '../defaultServices.mjs';\nimport GUARDS from '../guards.mjs';\nimport { getFederatedSignInState } from './utils.mjs';\n\nconst handleSignInResponse = {\n    onDone: [\n        {\n            cond: 'hasCompletedSignIn',\n            actions: 'setNextSignInStep',\n            target: '#signInActor.fetchUserAttributes',\n        },\n        {\n            cond: 'shouldConfirmSignInWithNewPassword',\n            actions: ['setMissingAttributes', 'setNextSignInStep'],\n            target: '#signInActor.forceChangePassword',\n        },\n        {\n            cond: 'shouldResetPasswordFromSignIn',\n            actions: 'setNextSignInStep',\n            target: '#signInActor.resetPassword',\n        },\n        {\n            cond: 'shouldConfirmSignUpFromSignIn',\n            actions: 'setNextSignInStep',\n            target: '#signInActor.resendSignUpCode',\n        },\n        {\n            actions: [\n                'setChallengeName',\n                'setMissingAttributes',\n                'setNextSignInStep',\n                'setTotpSecretCode',\n            ],\n            target: '#signInActor.init',\n        },\n    ],\n    onError: { actions: 'setRemoteError', target: 'edit' },\n};\nconst handleFetchUserAttributesResponse = {\n    onDone: [\n        {\n            cond: 'shouldVerifyAttribute',\n            actions: [\n                'setShouldVerifyUserAttributeStep',\n                'setUnverifiedUserAttributes',\n            ],\n            target: '#signInActor.resolved',\n        },\n        {\n            actions: 'setConfirmAttributeCompleteStep',\n            target: '#signInActor.resolved',\n        },\n    ],\n    onError: {\n        actions: 'setConfirmAttributeCompleteStep',\n        target: '#signInActor.resolved',\n    },\n};\nfunction signInActor({ services }) {\n    return createMachine({\n        id: 'signInActor',\n        initial: 'init',\n        predictableActionArguments: true,\n        states: {\n            init: {\n                always: [\n                    {\n                        cond: 'shouldConfirmSignIn',\n                        target: 'confirmSignIn',\n                    },\n                    {\n                        cond: 'shouldSetupTotp',\n                        target: 'setupTotp',\n                    },\n                    {\n                        cond: ({ step }) => step === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n                        actions: 'setActorDoneData',\n                        target: 'forceChangePassword',\n                    },\n                    { target: 'signIn' },\n                ],\n            },\n            federatedSignIn: getFederatedSignInState('signIn'),\n            fetchUserAttributes: {\n                invoke: {\n                    src: 'fetchUserAttributes',\n                    ...handleFetchUserAttributesResponse,\n                },\n            },\n            resendSignUpCode: {\n                invoke: {\n                    src: 'handleResendSignUpCode',\n                    onDone: {\n                        actions: 'setCodeDeliveryDetails',\n                        target: '#signInActor.resolved',\n                    },\n                    onError: {\n                        actions: 'setRemoteError',\n                        target: '#signInActor.signIn',\n                    },\n                },\n            },\n            resetPassword: {\n                invoke: {\n                    src: 'resetPassword',\n                    onDone: [\n                        {\n                            actions: 'setCodeDeliveryDetails',\n                            target: '#signInActor.resolved',\n                        },\n                    ],\n                    onError: { actions: ['setRemoteError', 'sendUpdate'] },\n                },\n            },\n            signIn: {\n                initial: 'edit',\n                exit: 'clearTouched',\n                states: {\n                    edit: {\n                        entry: 'sendUpdate',\n                        on: {\n                            CHANGE: { actions: 'handleInput' },\n                            FEDERATED_SIGN_IN: { target: '#signInActor.federatedSignIn' },\n                            SUBMIT: { actions: 'handleSubmit', target: 'submit' },\n                        },\n                    },\n                    submit: {\n                        tags: 'pending',\n                        entry: ['clearError', 'sendUpdate', 'setUsernameSignIn'],\n                        exit: 'clearFormValues',\n                        invoke: { src: 'handleSignIn', ...handleSignInResponse },\n                    },\n                },\n            },\n            confirmSignIn: {\n                initial: 'edit',\n                exit: [\n                    'clearChallengeName',\n                    'clearFormValues',\n                    'clearError',\n                    'clearTouched',\n                ],\n                states: {\n                    edit: {\n                        entry: 'sendUpdate',\n                        on: {\n                            SUBMIT: { actions: 'handleSubmit', target: 'submit' },\n                            SIGN_IN: '#signInActor.signIn',\n                            CHANGE: { actions: 'handleInput' },\n                        },\n                    },\n                    submit: {\n                        tags: 'pending',\n                        entry: ['clearError', 'sendUpdate'],\n                        invoke: {\n                            src: 'confirmSignIn',\n                            ...handleSignInResponse,\n                        },\n                    },\n                },\n            },\n            forceChangePassword: {\n                entry: 'sendUpdate',\n                type: 'parallel',\n                exit: ['clearFormValues', 'clearError', 'clearTouched'],\n                states: {\n                    validation: {\n                        initial: 'pending',\n                        states: {\n                            pending: {\n                                invoke: {\n                                    src: 'validateFields',\n                                    onDone: {\n                                        target: 'valid',\n                                        actions: 'clearValidationError',\n                                    },\n                                    onError: {\n                                        target: 'invalid',\n                                        actions: 'setFieldErrors',\n                                    },\n                                },\n                            },\n                            valid: { entry: 'sendUpdate' },\n                            invalid: { entry: 'sendUpdate' },\n                        },\n                        on: {\n                            SIGN_IN: {\n                                actions: 'setSignInStep',\n                                target: '#signInActor.resolved',\n                            },\n                            CHANGE: {\n                                actions: 'handleInput',\n                                target: '.pending',\n                            },\n                            BLUR: {\n                                actions: 'handleBlur',\n                                target: '.pending',\n                            },\n                        },\n                    },\n                    submit: {\n                        initial: 'edit',\n                        entry: 'clearError',\n                        states: {\n                            edit: {\n                                entry: 'sendUpdate',\n                                on: {\n                                    SUBMIT: { actions: 'handleSubmit', target: 'validate' },\n                                },\n                            },\n                            validate: {\n                                entry: 'sendUpdate',\n                                invoke: {\n                                    src: 'validateFields',\n                                    onDone: {\n                                        actions: 'clearValidationError',\n                                        target: 'pending',\n                                    },\n                                    onError: { actions: 'setFieldErrors', target: 'edit' },\n                                },\n                            },\n                            pending: {\n                                tags: 'pending',\n                                entry: ['sendUpdate', 'clearError'],\n                                invoke: {\n                                    src: 'handleForceChangePassword',\n                                    ...handleSignInResponse,\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            setupTotp: {\n                initial: 'edit',\n                exit: ['clearFormValues', 'clearError', 'clearTouched'],\n                states: {\n                    edit: {\n                        entry: 'sendUpdate',\n                        on: {\n                            SUBMIT: { actions: 'handleSubmit', target: 'submit' },\n                            SIGN_IN: '#signInActor.signIn',\n                            CHANGE: { actions: 'handleInput' },\n                        },\n                    },\n                    submit: {\n                        tags: 'pending',\n                        entry: ['sendUpdate', 'clearError'],\n                        invoke: { src: 'confirmSignIn', ...handleSignInResponse },\n                    },\n                },\n            },\n            resolved: {\n                type: 'final',\n                data: (context) => ({\n                    codeDeliveryDetails: context.codeDeliveryDetails,\n                    remoteError: context.remoteError,\n                    step: context.step,\n                    unverifiedUserAttributes: context.unverifiedUserAttributes,\n                    username: context.username,\n                }),\n            },\n        },\n    }, {\n        // sendUpdate is a HOC\n        actions: { ...ACTIONS, sendUpdate: sendUpdate() },\n        guards: GUARDS,\n        services: {\n            async fetchUserAttributes() {\n                return fetchUserAttributes();\n            },\n            resetPassword({ username }) {\n                return resetPassword({ username });\n            },\n            handleResendSignUpCode({ username }) {\n                return resendSignUpCode({ username });\n            },\n            handleSignIn({ formValues, username }) {\n                const { password } = formValues;\n                return services.handleSignIn({ username, password });\n            },\n            confirmSignIn({ formValues }) {\n                const { confirmation_code: challengeResponse } = formValues;\n                return services.handleConfirmSignIn({ challengeResponse });\n            },\n            async handleForceChangePassword({ formValues }) {\n                let { password: challengeResponse, phone_number, country_code, \n                // destructure and toss UI confirm_password field\n                // to prevent error from sending to confirmSignIn\n                confirm_password, ...userAttributes } = formValues;\n                let phoneNumberWithCountryCode;\n                if (phone_number) {\n                    phoneNumberWithCountryCode =\n                        `${country_code}${phone_number}`.replace(/[^A-Z0-9+]/gi, '');\n                    userAttributes = {\n                        ...userAttributes,\n                        phone_number: phoneNumberWithCountryCode,\n                    };\n                }\n                const input = {\n                    challengeResponse,\n                    options: { userAttributes },\n                };\n                return confirmSignIn(input);\n            },\n            signInWithRedirect(_, { data }) {\n                return signInWithRedirect(data);\n            },\n            async validateFields(context) {\n                return runValidators(context.formValues, context.touched, context.passwordSettings, [\n                    defaultServices.validateFormPassword,\n                    defaultServices.validateConfirmPassword,\n                ]);\n            },\n        },\n    });\n}\n\nexport { signInActor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}