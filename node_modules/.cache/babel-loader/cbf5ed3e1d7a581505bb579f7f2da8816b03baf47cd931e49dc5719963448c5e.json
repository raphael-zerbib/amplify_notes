{"ast":null,"code":"import { InternalAPI } from '@aws-amplify/api/internals';\nimport { Observable } from 'rxjs';\nimport { ProcessName } from '../../types.mjs';\nimport { buildGraphQLOperation, predicateToGraphQLFilter, getModelAuthModes, getTokenForCustomAuth, getClientSideAuthError, getForbiddenError } from '../utils.mjs';\nimport { BackgroundProcessManager, jitteredExponentialRetry, Category, DataStoreAction, NonRetryableError } from '@aws-amplify/core/internals/utils';\nimport { ConsoleLogger, Hub } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates/index.mjs';\nimport { getSyncErrorType } from './errorMaps.mjs';\nconst opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nconst logger = new ConsoleLogger('DataStore');\nclass SyncProcessor {\n  constructor(schema, syncPredicates, amplifyConfig = {}, authModeStrategy, errorHandler, amplifyContext) {\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    amplifyContext.InternalAPI = amplifyContext.InternalAPI || InternalAPI;\n    this.generateQueries();\n  }\n  generateQueries() {\n    Object.values(this.schema.namespaces).forEach(namespace => {\n      Object.values(namespace.models).filter(({\n        syncable\n      }) => syncable).forEach(model => {\n        const [[, ...opNameQuery]] = buildGraphQLOperation(namespace, model, 'LIST');\n        this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  }\n  graphqlFilterFromPredicate(model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n    const predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n    if (!predicatesGroup) {\n      return null;\n    }\n    return predicateToGraphQLFilter(predicatesGroup);\n  }\n  async retrievePage(modelDefinition, lastSync, nextToken, limit = null, filter, onTerminate) {\n    const [opName, query] = this.typeQuery.get(modelDefinition);\n    const variables = {\n      limit,\n      nextToken,\n      lastSync,\n      filter\n    };\n    const modelAuthModes = await getModelAuthModes({\n      authModeStrategy: this.authModeStrategy,\n      defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n      modelName: modelDefinition.name,\n      schema: this.schema\n    });\n    // sync only needs the READ auth mode(s)\n    const readAuthModes = modelAuthModes.READ;\n    let authModeAttempts = 0;\n    const authModeRetry = async () => {\n      if (!this.runningProcesses.isOpen) {\n        throw new Error('sync.retreievePage termination was requested. Exiting.');\n      }\n      try {\n        logger.debug(`Attempting sync with authMode: ${readAuthModes[authModeAttempts]}`);\n        const response = await this.jitteredRetry({\n          query,\n          variables,\n          opName,\n          modelDefinition,\n          authMode: readAuthModes[authModeAttempts],\n          onTerminate\n        });\n        logger.debug(`Sync successful with authMode: ${readAuthModes[authModeAttempts]}`);\n        return response;\n      } catch (error) {\n        authModeAttempts++;\n        if (authModeAttempts >= readAuthModes.length) {\n          const authMode = readAuthModes[authModeAttempts - 1];\n          logger.debug(`Sync failed with authMode: ${authMode}`, error);\n          if (getClientSideAuthError(error) || getForbiddenError(error)) {\n            // return empty list of data so DataStore will continue to sync other models\n            logger.warn(`User is unauthorized to query ${opName} with auth mode ${authMode}. No data could be returned.`);\n            return {\n              data: {\n                [opName]: opResultDefaults\n              }\n            };\n          }\n          throw error;\n        }\n        logger.debug(`Sync failed with authMode: ${readAuthModes[authModeAttempts - 1]}. Retrying with authMode: ${readAuthModes[authModeAttempts]}`);\n        return await authModeRetry();\n      }\n    };\n    const {\n      data\n    } = await authModeRetry();\n    const {\n      [opName]: opResult\n    } = data;\n    const {\n      items,\n      nextToken: newNextToken,\n      startedAt\n    } = opResult;\n    return {\n      nextToken: newNextToken,\n      startedAt,\n      items\n    };\n  }\n  async jitteredRetry({\n    query,\n    variables,\n    opName,\n    modelDefinition,\n    authMode,\n    onTerminate\n  }) {\n    return await jitteredExponentialRetry(async (query, variables) => {\n      try {\n        const authToken = await getTokenForCustomAuth(authMode, this.amplifyConfig);\n        const customUserAgentDetails = {\n          category: Category.DataStore,\n          action: DataStoreAction.GraphQl\n        };\n        return await this.amplifyContext.InternalAPI.graphql({\n          query,\n          variables,\n          authMode,\n          authToken\n        }, undefined, customUserAgentDetails);\n        // TODO: onTerminate.then(() => API.cancel(...))\n      } catch (error) {\n        // Catch client-side (GraphQLAuthError) & 401/403 errors here so that we don't continue to retry\n        const clientOrForbiddenErrorMessage = getClientSideAuthError(error) || getForbiddenError(error);\n        if (clientOrForbiddenErrorMessage) {\n          logger.error('Sync processor retry error:', error);\n          throw new NonRetryableError(clientOrForbiddenErrorMessage);\n        }\n        const hasItems = Boolean(error?.data?.[opName]?.items);\n        const unauthorized = error?.errors && error.errors.some(err => err.errorType === 'Unauthorized');\n        const otherErrors = error?.errors && error.errors.filter(err => err.errorType !== 'Unauthorized');\n        const result = error;\n        if (hasItems) {\n          result.data[opName].items = result.data[opName].items.filter(item => item !== null);\n        }\n        if (hasItems && otherErrors?.length) {\n          await Promise.all(otherErrors.map(async err => {\n            try {\n              await this.errorHandler({\n                recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                localModel: null,\n                message: err.message,\n                model: modelDefinition.name,\n                operation: opName,\n                errorType: getSyncErrorType(err),\n                process: ProcessName.sync,\n                remoteModel: null,\n                cause: err\n              });\n            } catch (e) {\n              logger.error('Sync error handler failed with:', e);\n            }\n          }));\n          Hub.dispatch('datastore', {\n            event: 'nonApplicableDataReceived',\n            data: {\n              errors: otherErrors,\n              modelName: modelDefinition.name\n            }\n          });\n        }\n        /**\n         * Handle $util.unauthorized() in resolver request mapper, which responses with something\n         * like this:\n         *\n         * ```\n         * {\n         * \tdata: { syncYourModel: null },\n         * \terrors: [\n         * \t\t{\n         * \t\t\tpath: ['syncLegacyJSONComments'],\n         * \t\t\tdata: null,\n         * \t\t\terrorType: 'Unauthorized',\n         * \t\t\terrorInfo: null,\n         * \t\t\tlocations: [{ line: 2, column: 3, sourceName: null }],\n         * \t\t\tmessage:\n         * \t\t\t\t'Not Authorized to access syncYourModel on type Query',\n         * \t\t\t},\n         * \t\t],\n         * \t}\n         * ```\n         *\n         * The correct handling for this is to signal that we've encountered a non-retryable error,\n         * since the server has responded with an auth error and *NO DATA* at this point.\n         */\n        if (unauthorized) {\n          this.errorHandler({\n            recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n            localModel: null,\n            message: error.message,\n            model: modelDefinition.name,\n            operation: opName,\n            errorType: getSyncErrorType(error.errors[0]),\n            process: ProcessName.sync,\n            remoteModel: null,\n            cause: error\n          });\n          throw new NonRetryableError(error);\n        }\n        if (result.data?.[opName]?.items?.length) {\n          return result;\n        }\n        throw error;\n      }\n    }, [query, variables], undefined, onTerminate);\n  }\n  start(typesLastSync) {\n    const {\n      maxRecordsToSync,\n      syncPageSize\n    } = this.amplifyConfig;\n    const parentPromises = new Map();\n    const observable = new Observable(observer => {\n      const sortedTypesLastSyncs = Object.values(this.schema.namespaces).reduce((map, namespace) => {\n        for (const modelName of Array.from(namespace.modelTopologicalOrdering.keys())) {\n          const typeLastSync = typesLastSync.get(namespace.models[modelName]);\n          map.set(namespace.models[modelName], typeLastSync);\n        }\n        return map;\n      }, new Map());\n      const allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(([{\n        syncable\n      }]) => syncable).map(([modelDefinition, [namespace, lastSync]]) => this.runningProcesses.isOpen && this.runningProcesses.add(async onTerminate => {\n        let done = false;\n        let nextToken = null;\n        let startedAt = null;\n        let items = null;\n        let recordsReceived = 0;\n        const filter = this.graphqlFilterFromPredicate(modelDefinition);\n        const parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n        const promises = parents.map(parent => parentPromises.get(`${namespace}_${parent}`));\n        const promise = new Promise(async res => {\n          await Promise.all(promises);\n          do {\n            /**\n             * If `runningProcesses` is not open, it means that the sync processor has been\n             * stopped (for example by calling `DataStore.clear()` upstream) and has not yet\n             * finished terminating and/or waiting for its background processes to complete.\n             */\n            if (!this.runningProcesses.isOpen) {\n              logger.debug(`Sync processor has been stopped, terminating sync for ${modelDefinition.name}`);\n              return res();\n            }\n            const limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n            /**\n             * It's possible that `retrievePage` will fail.\n             * If it does fail, continue merging the rest of the data,\n             * and invoke the error handler for non-applicable data.\n             */\n            try {\n              ({\n                items,\n                nextToken,\n                startedAt\n              } = await this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate));\n            } catch (error) {\n              try {\n                await this.errorHandler({\n                  recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                  localModel: null,\n                  message: error.message,\n                  model: modelDefinition.name,\n                  operation: null,\n                  errorType: getSyncErrorType(error),\n                  process: ProcessName.sync,\n                  remoteModel: null,\n                  cause: error\n                });\n              } catch (e) {\n                logger.error('Sync error handler failed with:', e);\n              }\n              /**\n               * If there's an error, this model fails, but the rest of the sync should\n               * continue. To facilitate this, we explicitly mark this model as `done`\n               * with no items and allow the loop to continue organically. This ensures\n               * all callbacks (subscription messages) happen as normal, so anything\n               * waiting on them knows the model is as done as it can be.\n               */\n              done = true;\n              items = [];\n            }\n            recordsReceived += items.length;\n            done = nextToken === null || recordsReceived >= maxRecordsToSync;\n            observer.next({\n              namespace,\n              modelDefinition,\n              items,\n              done,\n              startedAt,\n              isFullSync: !lastSync\n            });\n          } while (!done);\n          res();\n        });\n        parentPromises.set(`${namespace}_${modelDefinition.name}`, promise);\n        await promise;\n      }, `adding model ${modelDefinition.name}`));\n      Promise.all(allModelsReady).then(() => {\n        observer.complete();\n      });\n    });\n    return observable;\n  }\n  async stop() {\n    logger.debug('stopping sync processor');\n    await this.runningProcesses.close();\n    await this.runningProcesses.open();\n    logger.debug('sync processor stopped');\n  }\n}\nexport { SyncProcessor };","map":{"version":3,"names":["opResultDefaults","items","nextToken","startedAt","logger","ConsoleLogger","SyncProcessor","constructor","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","typeQuery","WeakMap","runningProcesses","BackgroundProcessManager","InternalAPI","generateQueries","Object","values","namespaces","forEach","namespace","models","filter","syncable","model","opNameQuery","buildGraphQLOperation","set","graphqlFilterFromPredicate","predicatesGroup","ModelPredicateCreator","getPredicates","get","predicateToGraphQLFilter","retrievePage","modelDefinition","lastSync","limit","onTerminate","opName","query","variables","modelAuthModes","getModelAuthModes","defaultAuthMode","aws_appsync_authenticationType","modelName","name","readAuthModes","READ","authModeAttempts","authModeRetry","isOpen","Error","debug","response","jitteredRetry","authMode","error","length","getClientSideAuthError","getForbiddenError","warn","data","opResult","newNextToken","jitteredExponentialRetry","authToken","getTokenForCustomAuth","customUserAgentDetails","category","Category","DataStore","action","DataStoreAction","GraphQl","graphql","undefined","clientOrForbiddenErrorMessage","NonRetryableError","hasItems","Boolean","unauthorized","errors","some","err","errorType","otherErrors","result","item","Promise","all","map","recoverySuggestion","localModel","message","operation","getSyncErrorType","process","ProcessName","sync","remoteModel","cause","e","Hub","dispatch","event","start","typesLastSync","maxRecordsToSync","syncPageSize","parentPromises","Map","observable","Observable","observer","sortedTypesLastSyncs","reduce","Array","from","modelTopologicalOrdering","keys","typeLastSync","allModelsReady","entries","add","done","recordsReceived","parents","promises","parent","promise","res","Math","min","next","isFullSync","then","complete","stop","close","open"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/sync/processors/sync.ts"],"sourcesContent":["import { InternalAPI } from '@aws-amplify/api/internals';\nimport { Observable } from 'rxjs';\nimport { ProcessName, } from '../../types';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter, getTokenForCustomAuth, } from '../utils';\nimport { jitteredExponentialRetry, Category, DataStoreAction, NonRetryableError, BackgroundProcessManager, } from '@aws-amplify/core/internals/utils';\nimport { ConsoleLogger, Hub } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nconst opResultDefaults = {\n    items: [],\n    nextToken: null,\n    startedAt: null,\n};\nconst logger = new ConsoleLogger('DataStore');\nclass SyncProcessor {\n    constructor(schema, syncPredicates, amplifyConfig = {}, authModeStrategy, errorHandler, amplifyContext) {\n        this.schema = schema;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.runningProcesses = new BackgroundProcessManager();\n        amplifyContext.InternalAPI = amplifyContext.InternalAPI || InternalAPI;\n        this.generateQueries();\n    }\n    generateQueries() {\n        Object.values(this.schema.namespaces).forEach(namespace => {\n            Object.values(namespace.models)\n                .filter(({ syncable }) => syncable)\n                .forEach(model => {\n                const [[, ...opNameQuery]] = buildGraphQLOperation(namespace, model, 'LIST');\n                this.typeQuery.set(model, opNameQuery);\n            });\n        });\n    }\n    graphqlFilterFromPredicate(model) {\n        if (!this.syncPredicates) {\n            return null;\n        }\n        const predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n        if (!predicatesGroup) {\n            return null;\n        }\n        return predicateToGraphQLFilter(predicatesGroup);\n    }\n    async retrievePage(modelDefinition, lastSync, nextToken, limit = null, filter, onTerminate) {\n        const [opName, query] = this.typeQuery.get(modelDefinition);\n        const variables = {\n            limit,\n            nextToken,\n            lastSync,\n            filter,\n        };\n        const modelAuthModes = await getModelAuthModes({\n            authModeStrategy: this.authModeStrategy,\n            defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n            modelName: modelDefinition.name,\n            schema: this.schema,\n        });\n        // sync only needs the READ auth mode(s)\n        const readAuthModes = modelAuthModes.READ;\n        let authModeAttempts = 0;\n        const authModeRetry = async () => {\n            if (!this.runningProcesses.isOpen) {\n                throw new Error('sync.retreievePage termination was requested. Exiting.');\n            }\n            try {\n                logger.debug(`Attempting sync with authMode: ${readAuthModes[authModeAttempts]}`);\n                const response = await this.jitteredRetry({\n                    query,\n                    variables,\n                    opName,\n                    modelDefinition,\n                    authMode: readAuthModes[authModeAttempts],\n                    onTerminate,\n                });\n                logger.debug(`Sync successful with authMode: ${readAuthModes[authModeAttempts]}`);\n                return response;\n            }\n            catch (error) {\n                authModeAttempts++;\n                if (authModeAttempts >= readAuthModes.length) {\n                    const authMode = readAuthModes[authModeAttempts - 1];\n                    logger.debug(`Sync failed with authMode: ${authMode}`, error);\n                    if (getClientSideAuthError(error) || getForbiddenError(error)) {\n                        // return empty list of data so DataStore will continue to sync other models\n                        logger.warn(`User is unauthorized to query ${opName} with auth mode ${authMode}. No data could be returned.`);\n                        return {\n                            data: {\n                                [opName]: opResultDefaults,\n                            },\n                        };\n                    }\n                    throw error;\n                }\n                logger.debug(`Sync failed with authMode: ${readAuthModes[authModeAttempts - 1]}. Retrying with authMode: ${readAuthModes[authModeAttempts]}`);\n                return await authModeRetry();\n            }\n        };\n        const { data } = await authModeRetry();\n        const { [opName]: opResult } = data;\n        const { items, nextToken: newNextToken, startedAt } = opResult;\n        return {\n            nextToken: newNextToken,\n            startedAt,\n            items,\n        };\n    }\n    async jitteredRetry({ query, variables, opName, modelDefinition, authMode, onTerminate, }) {\n        return await jitteredExponentialRetry(async (query, variables) => {\n            try {\n                const authToken = await getTokenForCustomAuth(authMode, this.amplifyConfig);\n                const customUserAgentDetails = {\n                    category: Category.DataStore,\n                    action: DataStoreAction.GraphQl,\n                };\n                return await this.amplifyContext.InternalAPI.graphql({\n                    query,\n                    variables,\n                    authMode,\n                    authToken,\n                }, undefined, customUserAgentDetails);\n                // TODO: onTerminate.then(() => API.cancel(...))\n            }\n            catch (error) {\n                // Catch client-side (GraphQLAuthError) & 401/403 errors here so that we don't continue to retry\n                const clientOrForbiddenErrorMessage = getClientSideAuthError(error) || getForbiddenError(error);\n                if (clientOrForbiddenErrorMessage) {\n                    logger.error('Sync processor retry error:', error);\n                    throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                }\n                const hasItems = Boolean(error?.data?.[opName]?.items);\n                const unauthorized = error?.errors &&\n                    error.errors.some(err => err.errorType === 'Unauthorized');\n                const otherErrors = error?.errors &&\n                    error.errors.filter(err => err.errorType !== 'Unauthorized');\n                const result = error;\n                if (hasItems) {\n                    result.data[opName].items = result.data[opName].items.filter(item => item !== null);\n                }\n                if (hasItems && otherErrors?.length) {\n                    await Promise.all(otherErrors.map(async (err) => {\n                        try {\n                            await this.errorHandler({\n                                recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                localModel: null,\n                                message: err.message,\n                                model: modelDefinition.name,\n                                operation: opName,\n                                errorType: getSyncErrorType(err),\n                                process: ProcessName.sync,\n                                remoteModel: null,\n                                cause: err,\n                            });\n                        }\n                        catch (e) {\n                            logger.error('Sync error handler failed with:', e);\n                        }\n                    }));\n                    Hub.dispatch('datastore', {\n                        event: 'nonApplicableDataReceived',\n                        data: {\n                            errors: otherErrors,\n                            modelName: modelDefinition.name,\n                        },\n                    });\n                }\n                /**\n                 * Handle $util.unauthorized() in resolver request mapper, which responses with something\n                 * like this:\n                 *\n                 * ```\n                 * {\n                 * \tdata: { syncYourModel: null },\n                 * \terrors: [\n                 * \t\t{\n                 * \t\t\tpath: ['syncLegacyJSONComments'],\n                 * \t\t\tdata: null,\n                 * \t\t\terrorType: 'Unauthorized',\n                 * \t\t\terrorInfo: null,\n                 * \t\t\tlocations: [{ line: 2, column: 3, sourceName: null }],\n                 * \t\t\tmessage:\n                 * \t\t\t\t'Not Authorized to access syncYourModel on type Query',\n                 * \t\t\t},\n                 * \t\t],\n                 * \t}\n                 * ```\n                 *\n                 * The correct handling for this is to signal that we've encountered a non-retryable error,\n                 * since the server has responded with an auth error and *NO DATA* at this point.\n                 */\n                if (unauthorized) {\n                    this.errorHandler({\n                        recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                        localModel: null,\n                        message: error.message,\n                        model: modelDefinition.name,\n                        operation: opName,\n                        errorType: getSyncErrorType(error.errors[0]),\n                        process: ProcessName.sync,\n                        remoteModel: null,\n                        cause: error,\n                    });\n                    throw new NonRetryableError(error);\n                }\n                if (result.data?.[opName]?.items?.length) {\n                    return result;\n                }\n                throw error;\n            }\n        }, [query, variables], undefined, onTerminate);\n    }\n    start(typesLastSync) {\n        const { maxRecordsToSync, syncPageSize } = this.amplifyConfig;\n        const parentPromises = new Map();\n        const observable = new Observable(observer => {\n            const sortedTypesLastSyncs = Object.values(this.schema.namespaces).reduce((map, namespace) => {\n                for (const modelName of Array.from(namespace.modelTopologicalOrdering.keys())) {\n                    const typeLastSync = typesLastSync.get(namespace.models[modelName]);\n                    map.set(namespace.models[modelName], typeLastSync);\n                }\n                return map;\n            }, new Map());\n            const allModelsReady = Array.from(sortedTypesLastSyncs.entries())\n                .filter(([{ syncable }]) => syncable)\n                .map(([modelDefinition, [namespace, lastSync]]) => this.runningProcesses.isOpen &&\n                this.runningProcesses.add(async (onTerminate) => {\n                    let done = false;\n                    let nextToken = null;\n                    let startedAt = null;\n                    let items = null;\n                    let recordsReceived = 0;\n                    const filter = this.graphqlFilterFromPredicate(modelDefinition);\n                    const parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                    const promises = parents.map(parent => parentPromises.get(`${namespace}_${parent}`));\n                    const promise = new Promise(async (res) => {\n                        await Promise.all(promises);\n                        do {\n                            /**\n                             * If `runningProcesses` is not open, it means that the sync processor has been\n                             * stopped (for example by calling `DataStore.clear()` upstream) and has not yet\n                             * finished terminating and/or waiting for its background processes to complete.\n                             */\n                            if (!this.runningProcesses.isOpen) {\n                                logger.debug(`Sync processor has been stopped, terminating sync for ${modelDefinition.name}`);\n                                return res();\n                            }\n                            const limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                            /**\n                             * It's possible that `retrievePage` will fail.\n                             * If it does fail, continue merging the rest of the data,\n                             * and invoke the error handler for non-applicable data.\n                             */\n                            try {\n                                ({ items, nextToken, startedAt } = await this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate));\n                            }\n                            catch (error) {\n                                try {\n                                    await this.errorHandler({\n                                        recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                        localModel: null,\n                                        message: error.message,\n                                        model: modelDefinition.name,\n                                        operation: null,\n                                        errorType: getSyncErrorType(error),\n                                        process: ProcessName.sync,\n                                        remoteModel: null,\n                                        cause: error,\n                                    });\n                                }\n                                catch (e) {\n                                    logger.error('Sync error handler failed with:', e);\n                                }\n                                /**\n                                 * If there's an error, this model fails, but the rest of the sync should\n                                 * continue. To facilitate this, we explicitly mark this model as `done`\n                                 * with no items and allow the loop to continue organically. This ensures\n                                 * all callbacks (subscription messages) happen as normal, so anything\n                                 * waiting on them knows the model is as done as it can be.\n                                 */\n                                done = true;\n                                items = [];\n                            }\n                            recordsReceived += items.length;\n                            done =\n                                nextToken === null || recordsReceived >= maxRecordsToSync;\n                            observer.next({\n                                namespace,\n                                modelDefinition,\n                                items,\n                                done,\n                                startedAt,\n                                isFullSync: !lastSync,\n                            });\n                        } while (!done);\n                        res();\n                    });\n                    parentPromises.set(`${namespace}_${modelDefinition.name}`, promise);\n                    await promise;\n                }, `adding model ${modelDefinition.name}`));\n            Promise.all(allModelsReady).then(() => {\n                observer.complete();\n            });\n        });\n        return observable;\n    }\n    async stop() {\n        logger.debug('stopping sync processor');\n        await this.runningProcesses.close();\n        await this.runningProcesses.open();\n        logger.debug('sync processor stopped');\n    }\n}\nexport { SyncProcessor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}