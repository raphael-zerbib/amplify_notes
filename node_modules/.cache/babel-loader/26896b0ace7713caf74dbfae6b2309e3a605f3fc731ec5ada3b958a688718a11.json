{"ast":null,"code":"import { generateGraphQLDocument, buildGraphQLVariables, authModeParams, getCustomHeaders, flattenItems, initializeModel } from '../APIClient.mjs';\nfunction indexQueryFactory(client, modelIntrospection, model, indexMeta) {\n  let context = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  const indexQueryWithContext = async (contextSpec, args, options) => {\n    return _indexQuery(client, modelIntrospection, model, indexMeta, {\n      ...args,\n      ...options\n    }, contextSpec);\n  };\n  const indexQuery = async (args, options) => {\n    return _indexQuery(client, modelIntrospection, model, indexMeta, {\n      ...args,\n      ...options\n    });\n  };\n  return context ? indexQueryWithContext : indexQuery;\n}\nfunction processGraphQlResponse(result, selectionSet, modelInitializer) {\n  const {\n    data,\n    extensions\n  } = result;\n  const [key] = Object.keys(data);\n  if (data[key].items) {\n    const flattenedResult = flattenItems(data)[key];\n    return {\n      data: selectionSet ? flattenedResult : modelInitializer(flattenedResult),\n      nextToken: data[key].nextToken,\n      extensions\n    };\n  }\n  return {\n    data: data[key],\n    nextToken: data[key].nextToken,\n    extensions\n  };\n}\nfunction handleGraphQlError(error) {\n  if (error.errors) {\n    // graphql errors pass through\n    return error;\n  } else {\n    // non-graphql errors re re-thrown\n    throw error;\n  }\n}\nasync function _indexQuery(client, modelIntrospection, model, indexMeta, args, contextSpec) {\n  const {\n    name\n  } = model;\n  const query = generateGraphQLDocument(modelIntrospection, name, 'INDEX_QUERY', args, indexMeta);\n  const variables = buildGraphQLVariables(model, 'INDEX_QUERY', args, modelIntrospection, indexMeta);\n  const auth = authModeParams(client, args);\n  const modelInitializer = flattenedResult => initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n  try {\n    const headers = getCustomHeaders(client, args === null || args === void 0 ? void 0 : args.headers);\n    const graphQlParams = {\n      ...auth,\n      query,\n      variables\n    };\n    const requestArgs = [graphQlParams, headers];\n    if (contextSpec !== undefined) {\n      requestArgs.unshift(contextSpec);\n    }\n    const response = await client.graphql(...requestArgs);\n    if (response.data !== undefined) {\n      return processGraphQlResponse(response, args === null || args === void 0 ? void 0 : args.selectionSet, modelInitializer);\n    }\n  } catch (error) {\n    return handleGraphQlError(error);\n  }\n}\nexport { indexQueryFactory };","map":{"version":3,"names":["indexQueryFactory","client","modelIntrospection","model","indexMeta","context","arguments","length","undefined","indexQueryWithContext","contextSpec","args","options","_indexQuery","indexQuery","processGraphQlResponse","result","selectionSet","modelInitializer","data","extensions","key","Object","keys","items","flattenedResult","flattenItems","nextToken","handleGraphQlError","error","errors","name","query","generateGraphQLDocument","variables","buildGraphQLVariables","auth","authModeParams","initializeModel","authMode","authToken","headers","getCustomHeaders","graphQlParams","requestArgs","unshift","response","graphql"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-graphql/src/internals/operations/indexQuery.ts"],"sourcesContent":["import { initializeModel, generateGraphQLDocument, buildGraphQLVariables, flattenItems, authModeParams, getCustomHeaders, } from '../APIClient';\nexport function indexQueryFactory(client, modelIntrospection, model, indexMeta, context = false) {\n    const indexQueryWithContext = async (contextSpec, args, options) => {\n        return _indexQuery(client, modelIntrospection, model, indexMeta, {\n            ...args,\n            ...options,\n        }, contextSpec);\n    };\n    const indexQuery = async (args, options) => {\n        return _indexQuery(client, modelIntrospection, model, indexMeta, {\n            ...args,\n            ...options,\n        });\n    };\n    return context ? indexQueryWithContext : indexQuery;\n}\nfunction processGraphQlResponse(result, selectionSet, modelInitializer) {\n    const { data, extensions } = result;\n    const [key] = Object.keys(data);\n    if (data[key].items) {\n        const flattenedResult = flattenItems(data)[key];\n        return {\n            data: selectionSet ? flattenedResult : modelInitializer(flattenedResult),\n            nextToken: data[key].nextToken,\n            extensions,\n        };\n    }\n    return {\n        data: data[key],\n        nextToken: data[key].nextToken,\n        extensions,\n    };\n}\nfunction handleGraphQlError(error) {\n    if (error.errors) {\n        // graphql errors pass through\n        return error;\n    }\n    else {\n        // non-graphql errors re re-thrown\n        throw error;\n    }\n}\nasync function _indexQuery(client, modelIntrospection, model, indexMeta, args, contextSpec) {\n    const { name } = model;\n    const query = generateGraphQLDocument(modelIntrospection, name, 'INDEX_QUERY', args, indexMeta);\n    const variables = buildGraphQLVariables(model, 'INDEX_QUERY', args, modelIntrospection, indexMeta);\n    const auth = authModeParams(client, args);\n    const modelInitializer = (flattenedResult) => initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n    try {\n        const headers = getCustomHeaders(client, args?.headers);\n        const graphQlParams = {\n            ...auth,\n            query,\n            variables,\n        };\n        const requestArgs = [graphQlParams, headers];\n        if (contextSpec !== undefined) {\n            requestArgs.unshift(contextSpec);\n        }\n        const response = (await client.graphql(...requestArgs));\n        if (response.data !== undefined) {\n            return processGraphQlResponse(response, args?.selectionSet, modelInitializer);\n        }\n    }\n    catch (error) {\n        return handleGraphQlError(error);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}