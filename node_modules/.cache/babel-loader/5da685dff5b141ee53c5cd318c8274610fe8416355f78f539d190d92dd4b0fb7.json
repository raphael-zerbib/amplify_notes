{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { GraphQLError } from 'graphql';\nimport { ConsoleLogger, fetchAuthSession, Hub } from '@aws-amplify/core';\nimport { signRequest } from '@aws-amplify/core/internals/aws-client-utils';\nimport { amplifyUuid, USER_AGENT_HEADER, getAmplifyUserAgent, isNonRetryableError, base64Encoder, jitteredExponentialRetry, NonRetryableError, AmplifyUrl, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { ConnectionState, CONTROL_MSG } from '../../types/PubSub.mjs';\nimport { SOCKET_STATUS, DEFAULT_KEEP_ALIVE_TIMEOUT, SUBSCRIPTION_STATUS, MESSAGE_TYPES, START_ACK_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, CONNECTION_INIT_TIMEOUT, NON_RETRYABLE_CODES, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_STATE_CHANGE } from '../constants.mjs';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor.mjs';\nimport { ReconnectionMonitor, ReconnectEvent } from '../../utils/ReconnectionMonitor.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('AWSAppSyncRealTimeProvider');\nconst dispatchApiEvent = payload => {\n  Hub.dispatch('api', payload, 'PubSub', AMPLIFY_SYMBOL);\n};\nconst standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nconst customDomainPath = '/realtime';\nclass AWSAppSyncRealTimeProvider {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    this.subscriptionObserverMap = new Map();\n    this.promiseArray = [];\n    this.connectionStateMonitor = new ConnectionStateMonitor();\n    this.reconnectionMonitor = new ReconnectionMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    this.connectionStateMonitorSubscription = this.connectionStateMonitor.connectionStateObservable.subscribe(connectionState => {\n      dispatchApiEvent({\n        event: CONNECTION_STATE_CHANGE,\n        data: {\n          provider: this,\n          connectionState\n        },\n        message: \"Connection state is \".concat(connectionState)\n      });\n      this.connectionState = connectionState;\n      // Trigger START_RECONNECT when the connection is disrupted\n      if (connectionState === ConnectionState.ConnectionDisrupted) {\n        this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      }\n      // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n      //   ConnectionDisrupted or Connecting\n      if ([ConnectionState.Connected, ConnectionState.ConnectedPendingDisconnect, ConnectionState.ConnectedPendingKeepAlive, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectionDisruptedPendingNetwork, ConnectionState.Disconnected].includes(connectionState)) {\n        this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n  }\n  /**\n   * Mark the socket closed and release all active listeners\n   */\n  close() {\n    // Mark the socket closed both in status and the connection monitor\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n    // Turn off the subscription monitor Hub publishing\n    this.connectionStateMonitorSubscription.unsubscribe();\n    // Complete all reconnect observers\n    this.reconnectionMonitor.close();\n  }\n  getNewWebSocket(url, protocol) {\n    return new WebSocket(url, protocol);\n  }\n  getProviderName() {\n    return 'AWSAppSyncRealTimeProvider';\n  }\n  // Check if url matches standard domain pattern\n  isCustomDomain(url) {\n    return url.match(standardDomainPattern) === null;\n  }\n  subscribe(options, customUserAgentDetails) {\n    const {\n      appSyncGraphqlEndpoint,\n      region,\n      query,\n      variables,\n      authenticationType,\n      additionalHeaders,\n      apiKey,\n      authToken,\n      libraryConfigHeaders\n    } = options || {};\n    return new Observable(observer => {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [{\n            ...new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\")\n          }]\n        });\n        observer.complete();\n      } else {\n        let subscriptionStartActive = false;\n        const subscriptionId = amplifyUuid();\n        const startSubscription = () => {\n          if (!subscriptionStartActive) {\n            subscriptionStartActive = true;\n            const startSubscriptionPromise = this._startSubscriptionWithAWSAppSyncRealTime({\n              options: {\n                query,\n                variables,\n                region,\n                authenticationType,\n                appSyncGraphqlEndpoint,\n                additionalHeaders,\n                apiKey,\n                authToken,\n                libraryConfigHeaders\n              },\n              observer,\n              subscriptionId,\n              customUserAgentDetails\n            }).catch(err => {\n              logger.debug(\"\".concat(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR, \": \").concat(err));\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            });\n            startSubscriptionPromise.finally(() => {\n              subscriptionStartActive = false;\n            });\n          }\n        };\n        let reconnectSubscription;\n        // Add an observable to the reconnection list to manage reconnection for this subscription\n        reconnectSubscription = new Observable(observer => {\n          this.reconnectionMonitor.addObserver(observer);\n        }).subscribe(() => {\n          startSubscription();\n        });\n        startSubscription();\n        return async () => {\n          var _reconnectSubscriptio;\n          // Cleanup reconnection subscription\n          (_reconnectSubscriptio = reconnectSubscription) === null || _reconnectSubscriptio === void 0 || _reconnectSubscriptio.unsubscribe();\n          // Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n          try {\n            // Waiting that subscription has been connected before trying to unsubscribe\n            await this._waitForSubscriptionToBeConnected(subscriptionId);\n            const {\n              subscriptionState\n            } = this.subscriptionObserverMap.get(subscriptionId) || {};\n            if (!subscriptionState) {\n              // subscription already unsubscribed\n              return;\n            }\n            if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n              this._sendUnsubscriptionMessage(subscriptionId);\n            } else {\n              throw new Error('Subscription never connected');\n            }\n          } catch (err) {\n            logger.debug(\"Error while unsubscribing \".concat(err));\n          } finally {\n            this._removeSubscriptionObserver(subscriptionId);\n          }\n        };\n      }\n    });\n  }\n  async _startSubscriptionWithAWSAppSyncRealTime(_ref) {\n    var _this$subscriptionObs;\n    let {\n      options,\n      observer,\n      subscriptionId,\n      customUserAgentDetails\n    } = _ref;\n    const {\n      appSyncGraphqlEndpoint,\n      authenticationType,\n      query,\n      variables,\n      apiKey,\n      region,\n      libraryConfigHeaders = () => ({}),\n      additionalHeaders = {},\n      authToken\n    } = options;\n    let additionalCustomHeaders = {};\n    if (typeof additionalHeaders === 'function') {\n      const requestOptions = {\n        url: appSyncGraphqlEndpoint || '',\n        queryString: query || ''\n      };\n      additionalCustomHeaders = await additionalHeaders(requestOptions);\n    } else {\n      additionalCustomHeaders = additionalHeaders;\n    }\n    // if an authorization header is set, have the explicit authToken take precedence\n    if (authToken) {\n      additionalCustomHeaders = {\n        ...additionalCustomHeaders,\n        Authorization: authToken\n      };\n    }\n    const subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n    const data = {\n      query,\n      variables\n    };\n    // Having a subscription id map will make it simple to forward messages received\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer,\n      query: query !== null && query !== void 0 ? query : '',\n      variables: variables !== null && variables !== void 0 ? variables : {},\n      subscriptionState,\n      startAckTimeoutId: undefined\n    });\n    // Preparing payload for subscription message\n    const dataString = JSON.stringify(data);\n    const headerObj = {\n      ...(await this._awsRealTimeHeaderBasedAuth({\n        apiKey,\n        appSyncGraphqlEndpoint,\n        authenticationType,\n        payload: dataString,\n        canonicalUri: '',\n        region,\n        additionalCustomHeaders\n      })),\n      ...(await libraryConfigHeaders()),\n      ...additionalCustomHeaders,\n      [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n    };\n    const subscriptionMessage = {\n      id: subscriptionId,\n      payload: {\n        data: dataString,\n        extensions: {\n          authorization: {\n            ...headerObj\n          }\n        }\n      },\n      type: MESSAGE_TYPES.GQL_START\n    };\n    const stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n    try {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n      await this._initializeWebSocketConnection({\n        apiKey,\n        appSyncGraphqlEndpoint,\n        authenticationType,\n        region,\n        additionalCustomHeaders\n      });\n    } catch (err) {\n      this._logStartSubscriptionError(subscriptionId, observer, err);\n      return;\n    }\n    // Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n    // E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n    // Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n    const {\n      subscriptionFailedCallback,\n      subscriptionReadyCallback\n    } = (_this$subscriptionObs = this.subscriptionObserverMap.get(subscriptionId)) !== null && _this$subscriptionObs !== void 0 ? _this$subscriptionObs : {};\n    // This must be done before sending the message in order to be listening immediately\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer,\n      subscriptionState,\n      query: query !== null && query !== void 0 ? query : '',\n      variables: variables !== null && variables !== void 0 ? variables : {},\n      subscriptionReadyCallback,\n      subscriptionFailedCallback,\n      startAckTimeoutId: setTimeout(() => {\n        this._timeoutStartSubscriptionAck.call(this, subscriptionId);\n      }, START_ACK_TIMEOUT)\n    });\n    if (this.awsRealTimeSocket) {\n      this.awsRealTimeSocket.send(stringToAWSRealTime);\n    }\n  }\n  // Log logic for start subscription failures\n  _logStartSubscriptionError(subscriptionId, observer, err) {\n    var _err$message;\n    logger.debug({\n      err\n    });\n    const message = String((_err$message = err.message) !== null && _err$message !== void 0 ? _err$message : '');\n    // Resolving to give the state observer time to propogate the update\n    Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));\n    // Capture the error only when the network didn't cause disruption\n    if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n      // When the error is non-retriable, error out the observable\n      if (isNonRetryableError(err)) {\n        observer.error({\n          errors: [{\n            ...new GraphQLError(\"\".concat(CONTROL_MSG.CONNECTION_FAILED, \": \").concat(message))\n          }]\n        });\n      } else {\n        logger.debug(\"\".concat(CONTROL_MSG.CONNECTION_FAILED, \": \").concat(message));\n      }\n      const {\n        subscriptionFailedCallback\n      } = this.subscriptionObserverMap.get(subscriptionId) || {};\n      // Notify concurrent unsubscription\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  }\n  // Waiting that subscription has been connected before trying to unsubscribe\n  async _waitForSubscriptionToBeConnected(subscriptionId) {\n    const subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      const {\n        subscriptionState\n      } = subscriptionObserver;\n      // This in case unsubscribe is invoked before sending start subscription message\n      if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n        return new Promise((res, rej) => {\n          const {\n            observer,\n            subscriptionState,\n            variables,\n            query\n          } = subscriptionObserver;\n          this.subscriptionObserverMap.set(subscriptionId, {\n            observer,\n            subscriptionState,\n            variables,\n            query,\n            subscriptionReadyCallback: res,\n            subscriptionFailedCallback: rej\n          });\n        });\n      }\n    }\n  }\n  _sendUnsubscriptionMessage(subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        const unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        const stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err\n      });\n    }\n  }\n  _removeSubscriptionObserver(subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  }\n  _closeSocketIfRequired() {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      const tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  }\n  _handleIncomingSubscriptionMessage(message) {\n    if (typeof message.data !== 'string') {\n      return;\n    }\n    logger.debug(\"subscription message from AWS AppSync RealTime: \".concat(message.data));\n    const {\n      id = '',\n      payload,\n      type\n    } = JSON.parse(String(message.data));\n    const {\n      observer = null,\n      query = '',\n      variables = {},\n      startAckTimeoutId,\n      subscriptionReadyCallback,\n      subscriptionFailedCallback\n    } = this.subscriptionObserverMap.get(id) || {};\n    logger.debug({\n      id,\n      observer,\n      query,\n      variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \".concat(id));\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \".concat(JSON.stringify({\n        query,\n        variables\n      })));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent({\n        event: CONTROL_MSG.SUBSCRIPTION_ACK,\n        data: {\n          query,\n          variables\n        },\n        message: 'Connection established for subscription'\n      });\n      const subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer,\n          query,\n          variables,\n          startAckTimeoutId: undefined,\n          subscriptionState,\n          subscriptionReadyCallback,\n          subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(() => {\n        this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      const subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer,\n          query,\n          variables,\n          startAckTimeoutId,\n          subscriptionReadyCallback,\n          subscriptionFailedCallback,\n          subscriptionState\n        });\n        logger.debug(\"\".concat(CONTROL_MSG.CONNECTION_FAILED, \": \").concat(JSON.stringify(payload)));\n        observer.error({\n          errors: [{\n            ...new GraphQLError(\"\".concat(CONTROL_MSG.CONNECTION_FAILED, \": \").concat(JSON.stringify(payload)))\n          }]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  }\n  _errorDisconnect(msg) {\n    logger.debug(\"Disconnect error: \".concat(msg));\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  }\n  _timeoutStartSubscriptionAck(subscriptionId) {\n    const subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      const {\n        observer,\n        query,\n        variables\n      } = subscriptionObserver;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer,\n        query,\n        variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query,\n        variables\n      }));\n    }\n  }\n  _initializeWebSocketConnection(_ref2) {\n    let {\n      appSyncGraphqlEndpoint,\n      authenticationType,\n      apiKey,\n      region,\n      additionalCustomHeaders\n    } = _ref2;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(async (res, rej) => {\n      this.promiseArray.push({\n        res,\n        rej\n      });\n      if (this.socketStatus === SOCKET_STATUS.CLOSED) {\n        try {\n          this.socketStatus = SOCKET_STATUS.CONNECTING;\n          const payloadString = '{}';\n          const authHeader = await this._awsRealTimeHeaderBasedAuth({\n            authenticationType,\n            payload: payloadString,\n            canonicalUri: '/connect',\n            apiKey,\n            appSyncGraphqlEndpoint,\n            region,\n            additionalCustomHeaders\n          });\n          const headerString = authHeader ? JSON.stringify(authHeader) : '';\n          const headerQs = base64Encoder.convert(headerString);\n          const payloadQs = base64Encoder.convert(payloadString);\n          let discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n          if (this.isCustomDomain(discoverableEndpoint)) {\n            discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n          } else {\n            discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n          }\n          // Creating websocket url with required query strings\n          const protocol = 'wss://';\n          discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n          const awsRealTimeUrl = \"\".concat(discoverableEndpoint, \"?header=\").concat(headerQs, \"&payload=\").concat(payloadQs);\n          await this._initializeRetryableHandshake(awsRealTimeUrl);\n          this.promiseArray.forEach(_ref3 => {\n            let {\n              res\n            } = _ref3;\n            logger.debug('Notifying connection successful');\n            res();\n          });\n          this.socketStatus = SOCKET_STATUS.READY;\n          this.promiseArray = [];\n        } catch (err) {\n          logger.debug('Connection exited with', err);\n          this.promiseArray.forEach(_ref4 => {\n            let {\n              rej\n            } = _ref4;\n            return rej(err);\n          });\n          this.promiseArray = [];\n          if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n            this.awsRealTimeSocket.close(3001);\n          }\n          this.awsRealTimeSocket = undefined;\n          this.socketStatus = SOCKET_STATUS.CLOSED;\n        }\n      }\n    });\n  }\n  async _initializeRetryableHandshake(awsRealTimeUrl) {\n    logger.debug(\"Initializaling retryable Handshake\");\n    await jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS);\n  }\n  async _initializeHandshake(awsRealTimeUrl) {\n    logger.debug(\"Initializing handshake \".concat(awsRealTimeUrl));\n    // Because connecting the socket is async, is waiting until connection is open\n    // Step 1: connect websocket\n    try {\n      await (() => {\n        return new Promise((res, rej) => {\n          const newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n          newSocket.onerror = () => {\n            logger.debug(\"WebSocket connection error\");\n          };\n          newSocket.onclose = () => {\n            rej(new Error('Connection handshake error'));\n          };\n          newSocket.onopen = () => {\n            this.awsRealTimeSocket = newSocket;\n            return res();\n          };\n        });\n      })();\n      // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n      await (() => {\n        return new Promise((res, rej) => {\n          if (this.awsRealTimeSocket) {\n            let ackOk = false;\n            this.awsRealTimeSocket.onerror = error => {\n              logger.debug(\"WebSocket error \".concat(JSON.stringify(error)));\n            };\n            this.awsRealTimeSocket.onclose = event => {\n              logger.debug(\"WebSocket closed \".concat(event.reason));\n              rej(new Error(JSON.stringify(event)));\n            };\n            this.awsRealTimeSocket.onmessage = message => {\n              if (typeof message.data !== 'string') {\n                return;\n              }\n              logger.debug(\"subscription message from AWS AppSyncRealTime: \".concat(message.data, \" \"));\n              const data = JSON.parse(message.data);\n              const {\n                type,\n                payload: {\n                  connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT\n                } = {}\n              } = data;\n              if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                ackOk = true;\n                if (this.awsRealTimeSocket) {\n                  this.keepAliveTimeout = connectionTimeoutMs;\n                  this.awsRealTimeSocket.onmessage = this._handleIncomingSubscriptionMessage.bind(this);\n                  this.awsRealTimeSocket.onerror = err => {\n                    logger.debug(err);\n                    this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                  };\n                  this.awsRealTimeSocket.onclose = event => {\n                    logger.debug(\"WebSocket closed \".concat(event.reason));\n                    this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                  };\n                }\n                res('Cool, connected to AWS AppSyncRealTime');\n                return;\n              }\n              if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                const {\n                  payload: {\n                    errors: [{\n                      errorType = '',\n                      errorCode = 0\n                    } = {}] = []\n                  } = {}\n                } = data;\n                rej({\n                  errorType,\n                  errorCode\n                });\n              }\n            };\n            const gqlInit = {\n              type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n            };\n            this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n            const checkAckOk = ackOk => {\n              if (!ackOk) {\n                this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \".concat(CONNECTION_INIT_TIMEOUT, \" ms\")));\n              }\n            };\n            setTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n          }\n        });\n      })();\n    } catch (err) {\n      const {\n        errorType,\n        errorCode\n      } = err;\n      if (NON_RETRYABLE_CODES.includes(errorCode)) {\n        throw new NonRetryableError(errorType);\n      } else if (errorType) {\n        throw new Error(errorType);\n      } else {\n        throw err;\n      }\n    }\n  }\n  async _awsRealTimeHeaderBasedAuth(_ref5) {\n    let {\n      apiKey,\n      authenticationType,\n      payload,\n      canonicalUri,\n      appSyncGraphqlEndpoint,\n      region,\n      additionalCustomHeaders\n    } = _ref5;\n    const headerHandler = {\n      apiKey: this._awsRealTimeApiKeyHeader.bind(this),\n      iam: this._awsRealTimeIAMHeader.bind(this),\n      oidc: this._awsAuthTokenHeader.bind(this),\n      userPool: this._awsAuthTokenHeader.bind(this),\n      lambda: this._customAuthHeader,\n      none: this._customAuthHeader\n    };\n    if (!authenticationType || !headerHandler[authenticationType]) {\n      logger.debug(\"Authentication type \".concat(authenticationType, \" not supported\"));\n      return undefined;\n    } else {\n      const handler = headerHandler[authenticationType];\n      const host = appSyncGraphqlEndpoint ? new AmplifyUrl(appSyncGraphqlEndpoint).host : undefined;\n      logger.debug(\"Authenticating with \".concat(JSON.stringify(authenticationType)));\n      let resolvedApiKey;\n      if (authenticationType === 'apiKey') {\n        resolvedApiKey = apiKey;\n      }\n      const result = await handler({\n        payload,\n        canonicalUri,\n        appSyncGraphqlEndpoint,\n        apiKey: resolvedApiKey,\n        region,\n        host,\n        additionalCustomHeaders\n      });\n      return result;\n    }\n  }\n  async _awsAuthTokenHeader(_ref6) {\n    var _session$tokens;\n    let {\n      host\n    } = _ref6;\n    const session = await fetchAuthSession();\n    return {\n      Authorization: session === null || session === void 0 || (_session$tokens = session.tokens) === null || _session$tokens === void 0 || (_session$tokens = _session$tokens.accessToken) === null || _session$tokens === void 0 ? void 0 : _session$tokens.toString(),\n      host\n    };\n  }\n  async _awsRealTimeApiKeyHeader(_ref7) {\n    let {\n      apiKey,\n      host\n    } = _ref7;\n    const dt = new Date();\n    const dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    return {\n      host,\n      'x-amz-date': dtStr,\n      'x-api-key': apiKey\n    };\n  }\n  async _awsRealTimeIAMHeader(_ref8) {\n    let {\n      payload,\n      canonicalUri,\n      appSyncGraphqlEndpoint,\n      region\n    } = _ref8;\n    const endpointInfo = {\n      region,\n      service: 'appsync'\n    };\n    const creds = (await fetchAuthSession()).credentials;\n    const request = {\n      url: \"\".concat(appSyncGraphqlEndpoint).concat(canonicalUri),\n      data: payload,\n      method: 'POST',\n      headers: {\n        ...AWS_APPSYNC_REALTIME_HEADERS\n      }\n    };\n    const signed_params = signRequest({\n      headers: request.headers,\n      method: request.method,\n      url: new AmplifyUrl(request.url),\n      body: request.data\n    }, {\n      // TODO: What do we need to do to remove these !'s?\n      credentials: creds,\n      signingRegion: endpointInfo.region,\n      signingService: endpointInfo.service\n    });\n    return signed_params.headers;\n  }\n  _customAuthHeader(_ref9) {\n    let {\n      host,\n      additionalCustomHeaders\n    } = _ref9;\n    /**\n     * If `additionalHeaders` was provided to the subscription as a function,\n     * the headers that are returned by that function will already have been\n     * provided before this function is called.\n     */\n    if (!(additionalCustomHeaders !== null && additionalCustomHeaders !== void 0 && additionalCustomHeaders['Authorization'])) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalCustomHeaders.Authorization,\n      host\n    };\n  }\n}\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["logger","ConsoleLogger","dispatchApiEvent","payload","Hub","dispatch","AMPLIFY_SYMBOL","standardDomainPattern","customDomainPath","AWSAppSyncRealTimeProvider","constructor","options","arguments","length","undefined","socketStatus","SOCKET_STATUS","CLOSED","keepAliveTimeout","DEFAULT_KEEP_ALIVE_TIMEOUT","subscriptionObserverMap","Map","promiseArray","connectionStateMonitor","ConnectionStateMonitor","reconnectionMonitor","ReconnectionMonitor","connectionStateMonitorSubscription","connectionStateObservable","subscribe","connectionState","event","CONNECTION_STATE_CHANGE","data","provider","message","concat","ConnectionState","ConnectionDisrupted","record","ReconnectEvent","START_RECONNECT","Connected","ConnectedPendingDisconnect","ConnectedPendingKeepAlive","ConnectedPendingNetwork","ConnectionDisruptedPendingNetwork","Disconnected","includes","HALT_RECONNECT","close","CONNECTION_CHANGE","CONNECTION_FAILED","unsubscribe","getNewWebSocket","url","protocol","WebSocket","getProviderName","isCustomDomain","match","customUserAgentDetails","appSyncGraphqlEndpoint","region","query","variables","authenticationType","additionalHeaders","apiKey","authToken","libraryConfigHeaders","Observable","observer","error","errors","GraphQLError","complete","subscriptionStartActive","subscriptionId","amplifyUuid","startSubscription","startSubscriptionPromise","_startSubscriptionWithAWSAppSyncRealTime","catch","err","debug","CONTROL_MSG","REALTIME_SUBSCRIPTION_INIT_ERROR","finally","reconnectSubscription","addObserver","_reconnectSubscriptio","_waitForSubscriptionToBeConnected","subscriptionState","get","SUBSCRIPTION_STATUS","CONNECTED","_sendUnsubscriptionMessage","Error","_removeSubscriptionObserver","_ref","_this$subscriptionObs","additionalCustomHeaders","requestOptions","queryString","Authorization","PENDING","set","startAckTimeoutId","dataString","JSON","stringify","headerObj","_awsRealTimeHeaderBasedAuth","canonicalUri","USER_AGENT_HEADER","getAmplifyUserAgent","subscriptionMessage","id","extensions","authorization","type","MESSAGE_TYPES","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","_logStartSubscriptionError","subscriptionFailedCallback","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","START_ACK_TIMEOUT","awsRealTimeSocket","send","_err$message","String","Promise","resolve","isNonRetryableError","subscriptionObserver","res","rej","readyState","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","_handleIncomingSubscriptionMessage","parse","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","KEEP_ALIVE_MISSED","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","KEEP_ALIVE","GQL_ERROR","FAILED","msg","_ref2","push","CONNECTING","payloadString","authHeader","headerString","headerQs","base64Encoder","convert","payloadQs","discoverableEndpoint","replace","awsRealTimeUrl","_initializeRetryableHandshake","forEach","_ref3","_ref4","jitteredExponentialRetry","_initializeHandshake","MAX_DELAY_MS","newSocket","onopen","ackOk","reason","onmessage","connectionTimeoutMs","GQL_CONNECTION_ACK","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk","CONNECTION_INIT_TIMEOUT","NON_RETRYABLE_CODES","NonRetryableError","_ref5","headerHandler","_awsRealTimeApiKeyHeader","iam","_awsRealTimeIAMHeader","oidc","_awsAuthTokenHeader","userPool","lambda","_customAuthHeader","none","handler","host","AmplifyUrl","resolvedApiKey","result","_ref6","_session$tokens","session","fetchAuthSession","tokens","accessToken","toString","_ref7","dt","Date","dtStr","toISOString","_ref8","endpointInfo","service","creds","credentials","request","method","headers","AWS_APPSYNC_REALTIME_HEADERS","signed_params","signRequest","body","signingRegion","signingService","_ref9"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-graphql/src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable } from 'rxjs';\nimport { GraphQLError } from 'graphql';\nimport { Hub, fetchAuthSession, ConsoleLogger, } from '@aws-amplify/core';\nimport { signRequest } from '@aws-amplify/core/internals/aws-client-utils';\nimport { base64Encoder, NonRetryableError, USER_AGENT_HEADER, getAmplifyUserAgent, isNonRetryableError, jitteredExponentialRetry, amplifyUuid, AmplifyUrl, } from '@aws-amplify/core/internals/utils';\nimport { CONTROL_MSG, ConnectionState, } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE, } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE, } from '../../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor, } from '../../utils/ReconnectionMonitor';\nconst logger = new ConsoleLogger('AWSAppSyncRealTimeProvider');\nconst dispatchApiEvent = (payload) => {\n    Hub.dispatch('api', payload, 'PubSub', AMPLIFY_SYMBOL);\n};\nconst standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nconst customDomainPath = '/realtime';\nexport class AWSAppSyncRealTimeProvider {\n    constructor(options = {}) {\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n        this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n        this.subscriptionObserverMap = new Map();\n        this.promiseArray = [];\n        this.connectionStateMonitor = new ConnectionStateMonitor();\n        this.reconnectionMonitor = new ReconnectionMonitor();\n        // Monitor the connection state and pass changes along to Hub\n        this.connectionStateMonitorSubscription =\n            this.connectionStateMonitor.connectionStateObservable.subscribe(connectionState => {\n                dispatchApiEvent({\n                    event: CONNECTION_STATE_CHANGE,\n                    data: {\n                        provider: this,\n                        connectionState,\n                    },\n                    message: `Connection state is ${connectionState}`,\n                });\n                this.connectionState = connectionState;\n                // Trigger START_RECONNECT when the connection is disrupted\n                if (connectionState === ConnectionState.ConnectionDisrupted) {\n                    this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n                }\n                // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n                //   ConnectionDisrupted or Connecting\n                if ([\n                    ConnectionState.Connected,\n                    ConnectionState.ConnectedPendingDisconnect,\n                    ConnectionState.ConnectedPendingKeepAlive,\n                    ConnectionState.ConnectedPendingNetwork,\n                    ConnectionState.ConnectionDisruptedPendingNetwork,\n                    ConnectionState.Disconnected,\n                ].includes(connectionState)) {\n                    this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n                }\n            });\n    }\n    /**\n     * Mark the socket closed and release all active listeners\n     */\n    close() {\n        // Mark the socket closed both in status and the connection monitor\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n        this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n        // Turn off the subscription monitor Hub publishing\n        this.connectionStateMonitorSubscription.unsubscribe();\n        // Complete all reconnect observers\n        this.reconnectionMonitor.close();\n    }\n    getNewWebSocket(url, protocol) {\n        return new WebSocket(url, protocol);\n    }\n    getProviderName() {\n        return 'AWSAppSyncRealTimeProvider';\n    }\n    // Check if url matches standard domain pattern\n    isCustomDomain(url) {\n        return url.match(standardDomainPattern) === null;\n    }\n    subscribe(options, customUserAgentDetails) {\n        const { appSyncGraphqlEndpoint, region, query, variables, authenticationType, additionalHeaders, apiKey, authToken, libraryConfigHeaders, } = options || {};\n        return new Observable(observer => {\n            if (!options || !appSyncGraphqlEndpoint) {\n                observer.error({\n                    errors: [\n                        {\n                            ...new GraphQLError(`Subscribe only available for AWS AppSync endpoint`),\n                        },\n                    ],\n                });\n                observer.complete();\n            }\n            else {\n                let subscriptionStartActive = false;\n                const subscriptionId = amplifyUuid();\n                const startSubscription = () => {\n                    if (!subscriptionStartActive) {\n                        subscriptionStartActive = true;\n                        const startSubscriptionPromise = this._startSubscriptionWithAWSAppSyncRealTime({\n                            options: {\n                                query,\n                                variables,\n                                region,\n                                authenticationType,\n                                appSyncGraphqlEndpoint,\n                                additionalHeaders,\n                                apiKey,\n                                authToken,\n                                libraryConfigHeaders,\n                            },\n                            observer,\n                            subscriptionId,\n                            customUserAgentDetails,\n                        }).catch(err => {\n                            logger.debug(`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`);\n                            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        });\n                        startSubscriptionPromise.finally(() => {\n                            subscriptionStartActive = false;\n                        });\n                    }\n                };\n                let reconnectSubscription;\n                // Add an observable to the reconnection list to manage reconnection for this subscription\n                reconnectSubscription = new Observable(observer => {\n                    this.reconnectionMonitor.addObserver(observer);\n                }).subscribe(() => {\n                    startSubscription();\n                });\n                startSubscription();\n                return async () => {\n                    // Cleanup reconnection subscription\n                    reconnectSubscription?.unsubscribe();\n                    // Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n                    try {\n                        // Waiting that subscription has been connected before trying to unsubscribe\n                        await this._waitForSubscriptionToBeConnected(subscriptionId);\n                        const { subscriptionState } = this.subscriptionObserverMap.get(subscriptionId) || {};\n                        if (!subscriptionState) {\n                            // subscription already unsubscribed\n                            return;\n                        }\n                        if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                            this._sendUnsubscriptionMessage(subscriptionId);\n                        }\n                        else {\n                            throw new Error('Subscription never connected');\n                        }\n                    }\n                    catch (err) {\n                        logger.debug(`Error while unsubscribing ${err}`);\n                    }\n                    finally {\n                        this._removeSubscriptionObserver(subscriptionId);\n                    }\n                };\n            }\n        });\n    }\n    async _startSubscriptionWithAWSAppSyncRealTime({ options, observer, subscriptionId, customUserAgentDetails, }) {\n        const { appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, libraryConfigHeaders = () => ({}), additionalHeaders = {}, authToken, } = options;\n        let additionalCustomHeaders = {};\n        if (typeof additionalHeaders === 'function') {\n            const requestOptions = {\n                url: appSyncGraphqlEndpoint || '',\n                queryString: query || '',\n            };\n            additionalCustomHeaders = await additionalHeaders(requestOptions);\n        }\n        else {\n            additionalCustomHeaders = additionalHeaders;\n        }\n        // if an authorization header is set, have the explicit authToken take precedence\n        if (authToken) {\n            additionalCustomHeaders = {\n                ...additionalCustomHeaders,\n                Authorization: authToken,\n            };\n        }\n        const subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n        const data = {\n            query,\n            variables,\n        };\n        // Having a subscription id map will make it simple to forward messages received\n        this.subscriptionObserverMap.set(subscriptionId, {\n            observer,\n            query: query ?? '',\n            variables: variables ?? {},\n            subscriptionState,\n            startAckTimeoutId: undefined,\n        });\n        // Preparing payload for subscription message\n        const dataString = JSON.stringify(data);\n        const headerObj = {\n            ...(await this._awsRealTimeHeaderBasedAuth({\n                apiKey,\n                appSyncGraphqlEndpoint,\n                authenticationType,\n                payload: dataString,\n                canonicalUri: '',\n                region,\n                additionalCustomHeaders,\n            })),\n            ...(await libraryConfigHeaders()),\n            ...additionalCustomHeaders,\n            [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n        };\n        const subscriptionMessage = {\n            id: subscriptionId,\n            payload: {\n                data: dataString,\n                extensions: {\n                    authorization: {\n                        ...headerObj,\n                    },\n                },\n            },\n            type: MESSAGE_TYPES.GQL_START,\n        };\n        const stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n        try {\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            await this._initializeWebSocketConnection({\n                apiKey,\n                appSyncGraphqlEndpoint,\n                authenticationType,\n                region,\n                additionalCustomHeaders,\n            });\n        }\n        catch (err) {\n            this._logStartSubscriptionError(subscriptionId, observer, err);\n            return;\n        }\n        // Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n        // E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n        // Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n        const { subscriptionFailedCallback, subscriptionReadyCallback } = this.subscriptionObserverMap.get(subscriptionId) ?? {};\n        // This must be done before sending the message in order to be listening immediately\n        this.subscriptionObserverMap.set(subscriptionId, {\n            observer,\n            subscriptionState,\n            query: query ?? '',\n            variables: variables ?? {},\n            subscriptionReadyCallback,\n            subscriptionFailedCallback,\n            startAckTimeoutId: setTimeout(() => {\n                this._timeoutStartSubscriptionAck.call(this, subscriptionId);\n            }, START_ACK_TIMEOUT),\n        });\n        if (this.awsRealTimeSocket) {\n            this.awsRealTimeSocket.send(stringToAWSRealTime);\n        }\n    }\n    // Log logic for start subscription failures\n    _logStartSubscriptionError(subscriptionId, observer, err) {\n        logger.debug({ err });\n        const message = String(err.message ?? '');\n        // Resolving to give the state observer time to propogate the update\n        Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));\n        // Capture the error only when the network didn't cause disruption\n        if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n            // When the error is non-retriable, error out the observable\n            if (isNonRetryableError(err)) {\n                observer.error({\n                    errors: [\n                        {\n                            ...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`),\n                        },\n                    ],\n                });\n            }\n            else {\n                logger.debug(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`);\n            }\n            const { subscriptionFailedCallback } = this.subscriptionObserverMap.get(subscriptionId) || {};\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback === 'function') {\n                subscriptionFailedCallback();\n            }\n        }\n    }\n    // Waiting that subscription has been connected before trying to unsubscribe\n    async _waitForSubscriptionToBeConnected(subscriptionId) {\n        const subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n            const { subscriptionState } = subscriptionObserver;\n            // This in case unsubscribe is invoked before sending start subscription message\n            if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n                return new Promise((res, rej) => {\n                    const { observer, subscriptionState, variables, query } = subscriptionObserver;\n                    this.subscriptionObserverMap.set(subscriptionId, {\n                        observer,\n                        subscriptionState,\n                        variables,\n                        query,\n                        subscriptionReadyCallback: res,\n                        subscriptionFailedCallback: rej,\n                    });\n                });\n            }\n        }\n    }\n    _sendUnsubscriptionMessage(subscriptionId) {\n        try {\n            if (this.awsRealTimeSocket &&\n                this.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n                this.socketStatus === SOCKET_STATUS.READY) {\n                // Preparing unsubscribe message to stop receiving messages for that subscription\n                const unsubscribeMessage = {\n                    id: subscriptionId,\n                    type: MESSAGE_TYPES.GQL_STOP,\n                };\n                const stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n                this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n        }\n        catch (err) {\n            // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n            logger.debug({ err });\n        }\n    }\n    _removeSubscriptionObserver(subscriptionId) {\n        this.subscriptionObserverMap.delete(subscriptionId);\n        // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n        setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    }\n    _closeSocketIfRequired() {\n        if (this.subscriptionObserverMap.size > 0) {\n            // Active subscriptions on the WebSocket\n            return;\n        }\n        if (!this.awsRealTimeSocket) {\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            return;\n        }\n        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n        if (this.awsRealTimeSocket.bufferedAmount > 0) {\n            // Still data on the WebSocket\n            setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n        }\n        else {\n            logger.debug('closing WebSocket...');\n            if (this.keepAliveTimeoutId) {\n                clearTimeout(this.keepAliveTimeoutId);\n            }\n            if (this.keepAliveAlertTimeoutId) {\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            }\n            const tempSocket = this.awsRealTimeSocket;\n            // Cleaning callbacks to avoid race condition, socket still exists\n            tempSocket.onclose = null;\n            tempSocket.onerror = null;\n            tempSocket.close(1000);\n            this.awsRealTimeSocket = undefined;\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n        }\n    }\n    _handleIncomingSubscriptionMessage(message) {\n        if (typeof message.data !== 'string') {\n            return;\n        }\n        logger.debug(`subscription message from AWS AppSync RealTime: ${message.data}`);\n        const { id = '', payload, type, } = JSON.parse(String(message.data));\n        const { observer = null, query = '', variables = {}, startAckTimeoutId, subscriptionReadyCallback, subscriptionFailedCallback, } = this.subscriptionObserverMap.get(id) || {};\n        logger.debug({ id, observer, query, variables });\n        if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                logger.debug(`observer not found for id: ${id}`);\n            }\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_START_ACK) {\n            logger.debug(`subscription ready for ${JSON.stringify({ query, variables })}`);\n            if (typeof subscriptionReadyCallback === 'function') {\n                subscriptionReadyCallback();\n            }\n            if (startAckTimeoutId)\n                clearTimeout(startAckTimeoutId);\n            dispatchApiEvent({\n                event: CONTROL_MSG.SUBSCRIPTION_ACK,\n                data: { query, variables },\n                message: 'Connection established for subscription',\n            });\n            const subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer,\n                    query,\n                    variables,\n                    startAckTimeoutId: undefined,\n                    subscriptionState,\n                    subscriptionReadyCallback,\n                    subscriptionFailedCallback,\n                });\n            }\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n            if (this.keepAliveTimeoutId)\n                clearTimeout(this.keepAliveTimeoutId);\n            if (this.keepAliveAlertTimeoutId)\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            this.keepAliveTimeoutId = setTimeout(() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n            this.keepAliveAlertTimeoutId = setTimeout(() => {\n                this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n            }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_ERROR) {\n            const subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer,\n                    query,\n                    variables,\n                    startAckTimeoutId,\n                    subscriptionReadyCallback,\n                    subscriptionFailedCallback,\n                    subscriptionState,\n                });\n                logger.debug(`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`);\n                observer.error({\n                    errors: [\n                        {\n                            ...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`),\n                        },\n                    ],\n                });\n                if (startAckTimeoutId)\n                    clearTimeout(startAckTimeoutId);\n                if (typeof subscriptionFailedCallback === 'function') {\n                    subscriptionFailedCallback();\n                }\n            }\n        }\n    }\n    _errorDisconnect(msg) {\n        logger.debug(`Disconnect error: ${msg}`);\n        if (this.awsRealTimeSocket) {\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            this.awsRealTimeSocket.close();\n        }\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n    }\n    _timeoutStartSubscriptionAck(subscriptionId) {\n        const subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n            const { observer, query, variables } = subscriptionObserver;\n            if (!observer) {\n                return;\n            }\n            this.subscriptionObserverMap.set(subscriptionId, {\n                observer,\n                query,\n                variables,\n                subscriptionState: SUBSCRIPTION_STATUS.FAILED,\n            });\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            logger.debug('timeoutStartSubscription', JSON.stringify({ query, variables }));\n        }\n    }\n    _initializeWebSocketConnection({ appSyncGraphqlEndpoint, authenticationType, apiKey, region, additionalCustomHeaders, }) {\n        if (this.socketStatus === SOCKET_STATUS.READY) {\n            return;\n        }\n        return new Promise(async (res, rej) => {\n            this.promiseArray.push({ res, rej });\n            if (this.socketStatus === SOCKET_STATUS.CLOSED) {\n                try {\n                    this.socketStatus = SOCKET_STATUS.CONNECTING;\n                    const payloadString = '{}';\n                    const authHeader = await this._awsRealTimeHeaderBasedAuth({\n                        authenticationType,\n                        payload: payloadString,\n                        canonicalUri: '/connect',\n                        apiKey,\n                        appSyncGraphqlEndpoint,\n                        region,\n                        additionalCustomHeaders,\n                    });\n                    const headerString = authHeader ? JSON.stringify(authHeader) : '';\n                    const headerQs = base64Encoder.convert(headerString);\n                    const payloadQs = base64Encoder.convert(payloadString);\n                    let discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n                    if (this.isCustomDomain(discoverableEndpoint)) {\n                        discoverableEndpoint =\n                            discoverableEndpoint.concat(customDomainPath);\n                    }\n                    else {\n                        discoverableEndpoint = discoverableEndpoint\n                            .replace('appsync-api', 'appsync-realtime-api')\n                            .replace('gogi-beta', 'grt-beta');\n                    }\n                    // Creating websocket url with required query strings\n                    const protocol = 'wss://';\n                    discoverableEndpoint = discoverableEndpoint\n                        .replace('https://', protocol)\n                        .replace('http://', protocol);\n                    const awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n                    await this._initializeRetryableHandshake(awsRealTimeUrl);\n                    this.promiseArray.forEach(({ res }) => {\n                        logger.debug('Notifying connection successful');\n                        res();\n                    });\n                    this.socketStatus = SOCKET_STATUS.READY;\n                    this.promiseArray = [];\n                }\n                catch (err) {\n                    logger.debug('Connection exited with', err);\n                    this.promiseArray.forEach(({ rej }) => rej(err));\n                    this.promiseArray = [];\n                    if (this.awsRealTimeSocket &&\n                        this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                        this.awsRealTimeSocket.close(3001);\n                    }\n                    this.awsRealTimeSocket = undefined;\n                    this.socketStatus = SOCKET_STATUS.CLOSED;\n                }\n            }\n        });\n    }\n    async _initializeRetryableHandshake(awsRealTimeUrl) {\n        logger.debug(`Initializaling retryable Handshake`);\n        await jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS);\n    }\n    async _initializeHandshake(awsRealTimeUrl) {\n        logger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n        // Because connecting the socket is async, is waiting until connection is open\n        // Step 1: connect websocket\n        try {\n            await (() => {\n                return new Promise((res, rej) => {\n                    const newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                    newSocket.onerror = () => {\n                        logger.debug(`WebSocket connection error`);\n                    };\n                    newSocket.onclose = () => {\n                        rej(new Error('Connection handshake error'));\n                    };\n                    newSocket.onopen = () => {\n                        this.awsRealTimeSocket = newSocket;\n                        return res();\n                    };\n                });\n            })();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            await (() => {\n                return new Promise((res, rej) => {\n                    if (this.awsRealTimeSocket) {\n                        let ackOk = false;\n                        this.awsRealTimeSocket.onerror = error => {\n                            logger.debug(`WebSocket error ${JSON.stringify(error)}`);\n                        };\n                        this.awsRealTimeSocket.onclose = event => {\n                            logger.debug(`WebSocket closed ${event.reason}`);\n                            rej(new Error(JSON.stringify(event)));\n                        };\n                        this.awsRealTimeSocket.onmessage = (message) => {\n                            if (typeof message.data !== 'string') {\n                                return;\n                            }\n                            logger.debug(`subscription message from AWS AppSyncRealTime: ${message.data} `);\n                            const data = JSON.parse(message.data);\n                            const { type, payload: { connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT, } = {}, } = data;\n                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                                ackOk = true;\n                                if (this.awsRealTimeSocket) {\n                                    this.keepAliveTimeout = connectionTimeoutMs;\n                                    this.awsRealTimeSocket.onmessage =\n                                        this._handleIncomingSubscriptionMessage.bind(this);\n                                    this.awsRealTimeSocket.onerror = err => {\n                                        logger.debug(err);\n                                        this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                    };\n                                    this.awsRealTimeSocket.onclose = event => {\n                                        logger.debug(`WebSocket closed ${event.reason}`);\n                                        this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                    };\n                                }\n                                res('Cool, connected to AWS AppSyncRealTime');\n                                return;\n                            }\n                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                                const { payload: { errors: [{ errorType = '', errorCode = 0 } = {}] = [], } = {}, } = data;\n                                rej({ errorType, errorCode });\n                            }\n                        };\n                        const gqlInit = {\n                            type: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n                        };\n                        this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                        const checkAckOk = (ackOk) => {\n                            if (!ackOk) {\n                                this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                rej(new Error(`Connection timeout: ack from AWSAppSyncRealTime was not received after ${CONNECTION_INIT_TIMEOUT} ms`));\n                            }\n                        };\n                        setTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n                    }\n                });\n            })();\n        }\n        catch (err) {\n            const { errorType, errorCode } = err;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n                throw new NonRetryableError(errorType);\n            }\n            else if (errorType) {\n                throw new Error(errorType);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async _awsRealTimeHeaderBasedAuth({ apiKey, authenticationType, payload, canonicalUri, appSyncGraphqlEndpoint, region, additionalCustomHeaders, }) {\n        const headerHandler = {\n            apiKey: this._awsRealTimeApiKeyHeader.bind(this),\n            iam: this._awsRealTimeIAMHeader.bind(this),\n            oidc: this._awsAuthTokenHeader.bind(this),\n            userPool: this._awsAuthTokenHeader.bind(this),\n            lambda: this._customAuthHeader,\n            none: this._customAuthHeader,\n        };\n        if (!authenticationType || !headerHandler[authenticationType]) {\n            logger.debug(`Authentication type ${authenticationType} not supported`);\n            return undefined;\n        }\n        else {\n            const handler = headerHandler[authenticationType];\n            const host = appSyncGraphqlEndpoint\n                ? new AmplifyUrl(appSyncGraphqlEndpoint).host\n                : undefined;\n            logger.debug(`Authenticating with ${JSON.stringify(authenticationType)}`);\n            let resolvedApiKey;\n            if (authenticationType === 'apiKey') {\n                resolvedApiKey = apiKey;\n            }\n            const result = await handler({\n                payload,\n                canonicalUri,\n                appSyncGraphqlEndpoint,\n                apiKey: resolvedApiKey,\n                region,\n                host,\n                additionalCustomHeaders,\n            });\n            return result;\n        }\n    }\n    async _awsAuthTokenHeader({ host }) {\n        const session = await fetchAuthSession();\n        return {\n            Authorization: session?.tokens?.accessToken?.toString(),\n            host,\n        };\n    }\n    async _awsRealTimeApiKeyHeader({ apiKey, host, }) {\n        const dt = new Date();\n        const dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return {\n            host,\n            'x-amz-date': dtStr,\n            'x-api-key': apiKey,\n        };\n    }\n    async _awsRealTimeIAMHeader({ payload, canonicalUri, appSyncGraphqlEndpoint, region, }) {\n        const endpointInfo = {\n            region,\n            service: 'appsync',\n        };\n        const creds = (await fetchAuthSession()).credentials;\n        const request = {\n            url: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n            data: payload,\n            method: 'POST',\n            headers: { ...AWS_APPSYNC_REALTIME_HEADERS },\n        };\n        const signed_params = signRequest({\n            headers: request.headers,\n            method: request.method,\n            url: new AmplifyUrl(request.url),\n            body: request.data,\n        }, {\n            // TODO: What do we need to do to remove these !'s?\n            credentials: creds,\n            signingRegion: endpointInfo.region,\n            signingService: endpointInfo.service,\n        });\n        return signed_params.headers;\n    }\n    _customAuthHeader({ host, additionalCustomHeaders, }) {\n        /**\n         * If `additionalHeaders` was provided to the subscription as a function,\n         * the headers that are returned by that function will already have been\n         * provided before this function is called.\n         */\n        if (!additionalCustomHeaders?.['Authorization']) {\n            throw new Error('No auth token specified');\n        }\n        return {\n            Authorization: additionalCustomHeaders.Authorization,\n            host,\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}