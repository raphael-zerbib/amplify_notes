{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { calculateContentMd5 } from '../../utils/md5.mjs';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport '../../../../utils/logger.mjs';\nimport '../../utils/client/base.mjs';\nimport '../../utils/client/getObject.mjs';\nimport '../../utils/client/listObjectsV2.mjs';\nimport { putObject } from '../../utils/client/putObject.mjs';\nimport '../../utils/client/createMultipartUpload.mjs';\nimport '../../utils/client/uploadPart.mjs';\nimport '../../utils/client/completeMultipartUpload.mjs';\nimport '../../utils/client/listParts.mjs';\nimport '../../utils/client/abortMultipartUpload.mjs';\nimport '../../utils/client/copyObject.mjs';\nimport '../../utils/client/headObject.mjs';\nimport '../../utils/client/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nconst putObjectJob = (_ref, abortSignal, totalLength) => {\n  let {\n    options: uploadDataOptions,\n    key,\n    data\n  } = _ref;\n  return async () => {\n    const {\n      bucket,\n      keyPrefix,\n      s3Config,\n      isObjectLockEnabled\n    } = await resolveS3ConfigAndInput(Amplify, uploadDataOptions);\n    const finalKey = keyPrefix + key;\n    const {\n      contentDisposition,\n      contentEncoding,\n      contentType = 'application/octet-stream',\n      metadata,\n      onProgress\n    } = uploadDataOptions !== null && uploadDataOptions !== void 0 ? uploadDataOptions : {};\n    const {\n      ETag: eTag,\n      VersionId: versionId\n    } = await putObject({\n      ...s3Config,\n      abortSignal,\n      onUploadProgress: onProgress,\n      userAgentValue: getStorageUserAgentValue(StorageAction.UploadData)\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      Body: data,\n      ContentType: contentType,\n      ContentDisposition: contentDisposition,\n      ContentEncoding: contentEncoding,\n      Metadata: metadata,\n      ContentMD5: isObjectLockEnabled ? await calculateContentMd5(data) : undefined\n    });\n    return {\n      key,\n      eTag,\n      versionId,\n      contentType,\n      metadata,\n      size: totalLength\n    };\n  };\n};\nexport { putObjectJob };","map":{"version":3,"names":["putObjectJob","_ref","abortSignal","totalLength","options","uploadDataOptions","key","data","bucket","keyPrefix","s3Config","isObjectLockEnabled","resolveS3ConfigAndInput","Amplify","finalKey","contentDisposition","contentEncoding","contentType","metadata","onProgress","ETag","eTag","VersionId","versionId","putObject","onUploadProgress","userAgentValue","getStorageUserAgentValue","StorageAction","UploadData","Bucket","Key","Body","ContentType","ContentDisposition","ContentEncoding","Metadata","ContentMD5","calculateContentMd5","undefined","size"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/storage/src/providers/s3/apis/uploadData/putObjectJob.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { calculateContentMd5, resolveS3ConfigAndInput } from '../../utils';\nimport { putObject } from '../../utils/client';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nexport const putObjectJob = ({ options: uploadDataOptions, key, data }, abortSignal, totalLength) => async () => {\n    const { bucket, keyPrefix, s3Config, isObjectLockEnabled } = await resolveS3ConfigAndInput(Amplify, uploadDataOptions);\n    const finalKey = keyPrefix + key;\n    const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', metadata, onProgress, } = uploadDataOptions ?? {};\n    const { ETag: eTag, VersionId: versionId } = await putObject({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.UploadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        Body: data,\n        ContentType: contentType,\n        ContentDisposition: contentDisposition,\n        ContentEncoding: contentEncoding,\n        Metadata: metadata,\n        ContentMD5: isObjectLockEnabled\n            ? await calculateContentMd5(data)\n            : undefined,\n    });\n    return {\n        key,\n        eTag,\n        versionId,\n        contentType,\n        metadata,\n        size: totalLength,\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAGA,CAAAC,IAAA,EAA4CC,WAAW,EAAEC,WAAW;EAAA,IAAnE;IAAEC,OAAO,EAAEC,iBAAiB;IAAEC,GAAG;IAAEC;EAAI,CAAE,GAAAN,IAAA;EAAA,OAA+B,YAAY;IAC7G,MAAM;MAAEO,MAAM;MAAEC,SAAS;MAAEC,QAAQ;MAAEC;IAAmB,CAAE,GAAG,MAAMC,uBAAuB,CAACC,OAAO,EAAER,iBAAiB,CAAC;IACtH,MAAMS,QAAQ,GAAGL,SAAS,GAAGH,GAAG;IAChC,MAAM;MAAES,kBAAkB;MAAEC,eAAe;MAAEC,WAAW,GAAG,0BAA0B;MAAEC,QAAQ;MAAEC;IAAU,CAAG,GAAGd,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAI,EAAE;IACxI,MAAM;MAAEe,IAAI,EAAEC,IAAI;MAAEC,SAAS,EAAEC;IAAS,CAAE,GAAG,MAAMC,SAAS,CAAC;MACzD,GAAGd,QAAQ;MACXR,WAAW;MACXuB,gBAAgB,EAAEN,UAAU;MAC5BO,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,UAAU;IACzE,CAAK,EAAE;MACCC,MAAM,EAAEtB,MAAM;MACduB,GAAG,EAAEjB,QAAQ;MACbkB,IAAI,EAAEzB,IAAI;MACV0B,WAAW,EAAEhB,WAAW;MACxBiB,kBAAkB,EAAEnB,kBAAkB;MACtCoB,eAAe,EAAEnB,eAAe;MAChCoB,QAAQ,EAAElB,QAAQ;MAClBmB,UAAU,EAAE1B,mBAAmB,GACzB,MAAM2B,mBAAmB,CAAC/B,IAAI,CAAC,GAC/BgC;IACd,CAAK,CAAC;IACF,OAAO;MACHjC,GAAG;MACHe,IAAI;MACJE,SAAS;MACTN,WAAW;MACXC,QAAQ;MACRsB,IAAI,EAAErC;IACd,CAAK;EACL;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}