{"ast":null,"code":"import { signRequest } from './signer/signatureV4/signRequest.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate.mjs';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nconst signingMiddlewareFactory = _ref => {\n  let {\n    credentials,\n    region,\n    service,\n    uriEscapePath = true\n  } = _ref;\n  let currentSystemClockOffset;\n  return next => async function signingMiddleware(request) {\n    var _currentSystemClockOf;\n    currentSystemClockOffset = (_currentSystemClockOf = currentSystemClockOffset) !== null && _currentSystemClockOf !== void 0 ? _currentSystemClockOf : 0;\n    const signRequestOptions = {\n      credentials: typeof credentials === 'function' ? await credentials() : credentials,\n      signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n      signingRegion: region,\n      signingService: service,\n      uriEscapePath\n    };\n    const signedRequest = await signRequest(request, signRequestOptions);\n    const response = await next(signedRequest);\n    // Update system clock offset if response contains date header, regardless of the status code.\n    // non-2xx response will still be returned from next handler instead of thrown, because it's\n    // only thrown by the retry middleware.\n    const dateString = getDateHeader(response);\n    if (dateString) {\n      currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n    }\n    return response;\n  };\n};\nconst getDateHeader = function () {\n  var _ref2, _headers$date;\n  let {\n    headers\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (_ref2 = (_headers$date = headers === null || headers === void 0 ? void 0 : headers.date) !== null && _headers$date !== void 0 ? _headers$date : headers === null || headers === void 0 ? void 0 : headers.Date) !== null && _ref2 !== void 0 ? _ref2 : headers === null || headers === void 0 ? void 0 : headers['x-amz-date'];\n};\nexport { signingMiddlewareFactory };","map":{"version":3,"names":["signingMiddlewareFactory","_ref","credentials","region","service","uriEscapePath","currentSystemClockOffset","next","signingMiddleware","request","_currentSystemClockOf","signRequestOptions","signingDate","getSkewCorrectedDate","signingRegion","signingService","signedRequest","signRequest","response","dateString","getDateHeader","getUpdatedSystemClockOffset","Date","parse","_ref2","_headers$date","headers","arguments","length","undefined","date"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/core/src/clients/middleware/signing/middleware.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { signRequest } from './signer/signatureV4';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset';\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nexport const signingMiddlewareFactory = ({ credentials, region, service, uriEscapePath = true, }) => {\n    let currentSystemClockOffset;\n    return (next) => async function signingMiddleware(request) {\n        currentSystemClockOffset = currentSystemClockOffset ?? 0;\n        const signRequestOptions = {\n            credentials: typeof credentials === 'function' ? await credentials() : credentials,\n            signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n            signingRegion: region,\n            signingService: service,\n            uriEscapePath,\n        };\n        const signedRequest = await signRequest(request, signRequestOptions);\n        const response = await next(signedRequest);\n        // Update system clock offset if response contains date header, regardless of the status code.\n        // non-2xx response will still be returned from next handler instead of thrown, because it's\n        // only thrown by the retry middleware.\n        const dateString = getDateHeader(response);\n        if (dateString) {\n            currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n        }\n        return response;\n    };\n};\nconst getDateHeader = ({ headers } = {}) => headers?.date ?? headers?.Date ?? headers?.['x-amz-date'];\n"],"mappings":";;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACY,MAACA,wBAAwB,GAAGC,IAAA,IAA6D;EAAA,IAA5D;IAAEC,WAAW;IAAEC,MAAM;IAAEC,OAAO;IAAEC,aAAa,GAAG;EAAI,CAAG,GAAAJ,IAAA;EAC5F,IAAIK,wBAAwB;EAC5B,OAAQC,IAAI,IAAK,eAAeC,iBAAiBA,CAACC,OAAO,EAAE;IAAA,IAAAC,qBAAA;IACvDJ,wBAAwB,IAAAI,qBAAA,GAAGJ,wBAAwB,cAAAI,qBAAA,cAAAA,qBAAA,GAAI,CAAC;IACxD,MAAMC,kBAAkB,GAAG;MACvBT,WAAW,EAAE,OAAOA,WAAW,KAAK,UAAU,GAAG,MAAMA,WAAW,EAAE,GAAGA,WAAW;MAClFU,WAAW,EAAEC,oBAAoB,CAACP,wBAAwB,CAAC;MAC3DQ,aAAa,EAAEX,MAAM;MACrBY,cAAc,EAAEX,OAAO;MACvBC;IACZ,CAAS;IACD,MAAMW,aAAa,GAAG,MAAMC,WAAW,CAACR,OAAO,EAAEE,kBAAkB,CAAC;IACpE,MAAMO,QAAQ,GAAG,MAAMX,IAAI,CAACS,aAAa,CAAC;IAClD;IACA;IACA;IACQ,MAAMG,UAAU,GAAGC,aAAa,CAACF,QAAQ,CAAC;IAC1C,IAAIC,UAAU,EAAE;MACZb,wBAAwB,GAAGe,2BAA2B,CAACC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,EAAEb,wBAAwB,CAAC;IACpH;IACQ,OAAOY,QAAQ;EACvB,CAAK;AACL;AACA,MAAME,aAAa,GAAG,SAAAA,CAAA;EAAA,IAAAI,KAAA,EAAAC,aAAA;EAAA,IAAC;IAAEC;EAAO,CAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,QAAAH,KAAA,IAAAC,aAAA,GAAKC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,IAAI,cAAAL,aAAA,cAAAA,aAAA,GAAIC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEJ,IAAI,cAAAE,KAAA,cAAAA,KAAA,GAAIE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG,YAAY,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}