{"ast":null,"code":"import { isUndefined } from '@aws-amplify/ui';\nimport usePreviousValue from './usePreviousValue.mjs';\n\n/**\n * @param value `value` to track for updates\n * @param ignoreFirstRender whether to ignore initial render. defaults to `false`\n * @returns a boolean representing whether the tracked `value` has updated between renders\n *\n * Returns `false`:\n * - on initial render when ignoring first render\n * - current and previous `value` are equal\n *\n * Returns `true`:\n * - on initial render when not ignoring first render (default behavior)\n * - current and previous `value` are not equal\n */\nfunction useHasValueUpdated(value) {\n  let ignoreFirstRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const previous = usePreviousValue(value);\n  const shouldIgnoreChange = isUndefined(previous) && ignoreFirstRender;\n  if (shouldIgnoreChange) {\n    return false;\n  }\n  return previous !== value;\n}\nexport { useHasValueUpdated as default };","map":{"version":3,"names":["isUndefined","usePreviousValue","useHasValueUpdated","value","ignoreFirstRender","arguments","length","undefined","previous","shouldIgnoreChange","default"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useHasValueUpdated.mjs"],"sourcesContent":["import { isUndefined } from '@aws-amplify/ui';\nimport usePreviousValue from './usePreviousValue.mjs';\n\n/**\n * @param value `value` to track for updates\n * @param ignoreFirstRender whether to ignore initial render. defaults to `false`\n * @returns a boolean representing whether the tracked `value` has updated between renders\n *\n * Returns `false`:\n * - on initial render when ignoring first render\n * - current and previous `value` are equal\n *\n * Returns `true`:\n * - on initial render when not ignoring first render (default behavior)\n * - current and previous `value` are not equal\n */\nfunction useHasValueUpdated(value, ignoreFirstRender = false) {\n    const previous = usePreviousValue(value);\n    const shouldIgnoreChange = isUndefined(previous) && ignoreFirstRender;\n    if (shouldIgnoreChange) {\n        return false;\n    }\n    return previous !== value;\n}\n\nexport { useHasValueUpdated as default };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,OAAOC,gBAAgB,MAAM,wBAAwB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,KAAK,EAA6B;EAAA,IAA3BC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACxD,MAAMG,QAAQ,GAAGP,gBAAgB,CAACE,KAAK,CAAC;EACxC,MAAMM,kBAAkB,GAAGT,WAAW,CAACQ,QAAQ,CAAC,IAAIJ,iBAAiB;EACrE,IAAIK,kBAAkB,EAAE;IACpB,OAAO,KAAK;EAChB;EACA,OAAOD,QAAQ,KAAKL,KAAK;AAC7B;AAEA,SAASD,kBAAkB,IAAIQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}