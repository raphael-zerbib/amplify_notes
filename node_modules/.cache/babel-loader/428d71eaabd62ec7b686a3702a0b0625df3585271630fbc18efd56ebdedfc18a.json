{"ast":null,"code":"import { defaultTheme } from '@aws-amplify/ui';\nimport { objectKeys } from '../utils.mjs';\nconst getClosestValueByBreakpoint = _ref => {\n  let {\n    breakpoint,\n    breakpoints,\n    values\n  } = _ref;\n  const value = values[breakpoint];\n  // Check if breakpoint exists in values\n  if (value !== undefined) {\n    return value;\n  }\n  // Otherwise use a lower breakpoint value\n  const breakpointsDesc = objectKeys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);\n  const lowerBreakpoints = breakpointsDesc.slice(breakpointsDesc.indexOf(breakpoint));\n  for (const breakpoint of lowerBreakpoints) {\n    // Check if breakpoint exists in values\n    const value = values[breakpoint];\n    if (value !== undefined) {\n      return value;\n    }\n  }\n  return null;\n};\n/**\n * This takes an object and will return an object that only has the\n * breakpoint keys\n * @param obj\n * @returns\n */\nconst valueObjToBreakpoints = obj => {\n  return objectKeys(obj).reduce((acc, key) => key in defaultTheme.breakpoints.values ? {\n    ...acc,\n    [key]: obj[key]\n  } : acc, {});\n};\nconst getValueAtCurrentBreakpoint = _ref2 => {\n  let {\n    breakpoint,\n    breakpoints,\n    values\n  } = _ref2;\n  let breakpointCompatValues = {};\n  const breakpointsAscending = objectKeys(breakpoints).sort((a, b) => breakpoints[a] - breakpoints[b]);\n  if (Array.isArray(values)) {\n    values.forEach((value, index) => {\n      breakpointCompatValues[breakpointsAscending[index]] = value;\n    });\n  } else if (typeof values === 'object') {\n    breakpointCompatValues = valueObjToBreakpoints(values);\n  }\n  return getClosestValueByBreakpoint({\n    breakpoint,\n    breakpoints,\n    values: breakpointCompatValues\n  });\n};\nexport { getValueAtCurrentBreakpoint };","map":{"version":3,"names":["defaultTheme","objectKeys","getClosestValueByBreakpoint","_ref","breakpoint","breakpoints","values","value","undefined","breakpointsDesc","sort","a","b","lowerBreakpoints","slice","indexOf","valueObjToBreakpoints","obj","reduce","acc","key","getValueAtCurrentBreakpoint","_ref2","breakpointCompatValues","breakpointsAscending","Array","isArray","forEach","index"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/utils.mjs"],"sourcesContent":["import { defaultTheme } from '@aws-amplify/ui';\nimport { objectKeys } from '../utils.mjs';\n\nconst getClosestValueByBreakpoint = ({ breakpoint, breakpoints, values, }) => {\n    const value = values[breakpoint];\n    // Check if breakpoint exists in values\n    if (value !== undefined) {\n        return value;\n    }\n    // Otherwise use a lower breakpoint value\n    const breakpointsDesc = objectKeys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);\n    const lowerBreakpoints = breakpointsDesc.slice(breakpointsDesc.indexOf(breakpoint));\n    for (const breakpoint of lowerBreakpoints) {\n        // Check if breakpoint exists in values\n        const value = values[breakpoint];\n        if (value !== undefined) {\n            return value;\n        }\n    }\n    return null;\n};\n/**\n * This takes an object and will return an object that only has the\n * breakpoint keys\n * @param obj\n * @returns\n */\nconst valueObjToBreakpoints = (obj) => {\n    return objectKeys(obj).reduce((acc, key) => key in defaultTheme.breakpoints.values\n        ? { ...acc, [key]: obj[key] }\n        : acc, {});\n};\nconst getValueAtCurrentBreakpoint = ({ breakpoint, breakpoints, values, }) => {\n    let breakpointCompatValues = {};\n    const breakpointsAscending = objectKeys(breakpoints).sort((a, b) => breakpoints[a] - breakpoints[b]);\n    if (Array.isArray(values)) {\n        values.forEach((value, index) => {\n            breakpointCompatValues[breakpointsAscending[index]] = value;\n        });\n    }\n    else if (typeof values === 'object') {\n        breakpointCompatValues = valueObjToBreakpoints(values);\n    }\n    return getClosestValueByBreakpoint({\n        breakpoint,\n        breakpoints,\n        values: breakpointCompatValues,\n    });\n};\n\nexport { getValueAtCurrentBreakpoint };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,cAAc;AAEzC,MAAMC,2BAA2B,GAAGC,IAAA,IAA0C;EAAA,IAAzC;IAAEC,UAAU;IAAEC,WAAW;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EACrE,MAAMI,KAAK,GAAGD,MAAM,CAACF,UAAU,CAAC;EAChC;EACA,IAAIG,KAAK,KAAKC,SAAS,EAAE;IACrB,OAAOD,KAAK;EAChB;EACA;EACA,MAAME,eAAe,GAAGR,UAAU,CAACI,WAAW,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKP,WAAW,CAACO,CAAC,CAAC,GAAGP,WAAW,CAACM,CAAC,CAAC,CAAC;EAC/F,MAAME,gBAAgB,GAAGJ,eAAe,CAACK,KAAK,CAACL,eAAe,CAACM,OAAO,CAACX,UAAU,CAAC,CAAC;EACnF,KAAK,MAAMA,UAAU,IAAIS,gBAAgB,EAAE;IACvC;IACA,MAAMN,KAAK,GAAGD,MAAM,CAACF,UAAU,CAAC;IAChC,IAAIG,KAAK,KAAKC,SAAS,EAAE;MACrB,OAAOD,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,qBAAqB,GAAIC,GAAG,IAAK;EACnC,OAAOhB,UAAU,CAACgB,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKA,GAAG,IAAIpB,YAAY,CAACK,WAAW,CAACC,MAAM,GAC5E;IAAE,GAAGa,GAAG;IAAE,CAACC,GAAG,GAAGH,GAAG,CAACG,GAAG;EAAE,CAAC,GAC3BD,GAAG,EAAE,CAAC,CAAC,CAAC;AAClB,CAAC;AACD,MAAME,2BAA2B,GAAGC,KAAA,IAA0C;EAAA,IAAzC;IAAElB,UAAU;IAAEC,WAAW;IAAEC;EAAQ,CAAC,GAAAgB,KAAA;EACrE,IAAIC,sBAAsB,GAAG,CAAC,CAAC;EAC/B,MAAMC,oBAAoB,GAAGvB,UAAU,CAACI,WAAW,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKP,WAAW,CAACM,CAAC,CAAC,GAAGN,WAAW,CAACO,CAAC,CAAC,CAAC;EACpG,IAAIa,KAAK,CAACC,OAAO,CAACpB,MAAM,CAAC,EAAE;IACvBA,MAAM,CAACqB,OAAO,CAAC,CAACpB,KAAK,EAAEqB,KAAK,KAAK;MAC7BL,sBAAsB,CAACC,oBAAoB,CAACI,KAAK,CAAC,CAAC,GAAGrB,KAAK;IAC/D,CAAC,CAAC;EACN,CAAC,MACI,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IACjCiB,sBAAsB,GAAGP,qBAAqB,CAACV,MAAM,CAAC;EAC1D;EACA,OAAOJ,2BAA2B,CAAC;IAC/BE,UAAU;IACVC,WAAW;IACXC,MAAM,EAAEiB;EACZ,CAAC,CAAC;AACN,CAAC;AAED,SAASF,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}