{"ast":null,"code":"class ModelSortPredicateCreator {\n  static createPredicateBuilder(modelDefinition) {\n    const {\n      name: modelName\n    } = modelDefinition;\n    const fieldNames = new Set(Object.keys(modelDefinition.fields));\n    const predicate = new Proxy({}, {\n      get(_target, propertyKey, receiver) {\n        const field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \".concat(String(field), \", model: \").concat(modelName));\n        }\n        const result = sortDirection => {\n          var _ModelSortPredicateCr;\n          (_ModelSortPredicateCr = ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver)) === null || _ModelSortPredicateCr === void 0 || _ModelSortPredicateCr.push({\n            field,\n            sortDirection\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  }\n  static isValidPredicate(predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  }\n  static getPredicates(predicate) {\n    let throwOnInvalid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    const predicateGroup = ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n    if (predicateGroup) {\n      return predicateGroup;\n    } else {\n      throw new Error('Predicate group not found');\n    }\n  }\n  // transforms cb-style predicate into Proxy\n  static createFromExisting(modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  }\n}\nModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\nexport { ModelSortPredicateCreator };","map":{"version":3,"names":["ModelSortPredicateCreator","createPredicateBuilder","modelDefinition","name","modelName","fieldNames","Set","Object","keys","fields","predicate","Proxy","get","_target","propertyKey","receiver","field","has","Error","concat","String","result","sortDirection","_ModelSortPredicateCr","sortPredicateGroupsMap","push","set","isValidPredicate","getPredicates","throwOnInvalid","arguments","length","undefined","predicateGroup","createFromExisting","existing","WeakMap"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/predicates/sort.ts"],"sourcesContent":["export class ModelSortPredicateCreator {\n    static createPredicateBuilder(modelDefinition) {\n        const { name: modelName } = modelDefinition;\n        const fieldNames = new Set(Object.keys(modelDefinition.fields));\n        let handler;\n        const predicate = new Proxy({}, (handler = {\n            get(_target, propertyKey, receiver) {\n                const field = propertyKey;\n                if (!fieldNames.has(field)) {\n                    throw new Error(`Invalid field for model. field: ${String(field)}, model: ${modelName}`);\n                }\n                const result = (sortDirection) => {\n                    ModelSortPredicateCreator.sortPredicateGroupsMap\n                        .get(receiver)\n                        ?.push({ field, sortDirection });\n                    return receiver;\n                };\n                return result;\n            },\n        }));\n        ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n        return predicate;\n    }\n    static isValidPredicate(predicate) {\n        return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n    }\n    static getPredicates(predicate, throwOnInvalid = true) {\n        if (throwOnInvalid &&\n            !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        const predicateGroup = ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n        if (predicateGroup) {\n            return predicateGroup;\n        }\n        else {\n            throw new Error('Predicate group not found');\n        }\n    }\n    // transforms cb-style predicate into Proxy\n    static createFromExisting(modelDefinition, existing) {\n        if (!existing || !modelDefinition) {\n            return undefined;\n        }\n        return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n    }\n}\nModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n"],"mappings":"AAAO,MAAMA,yBAAyB,CAAC;EACnC,OAAOC,sBAAsBA,CAACC,eAAe,EAAE;IAC3C,MAAM;MAAEC,IAAI,EAAEC;IAAS,CAAE,GAAGF,eAAe;IAC3C,MAAMG,UAAU,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACN,eAAe,CAACO,MAAM,CAAC,CAAC;IAE/D,MAAMC,SAAS,GAAG,IAAIC,KAAK,CAAC,EAAE,EAAa;MACvCC,GAAGA,CAACC,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAE;QAChC,MAAMC,KAAK,GAAGF,WAAW;QACzB,IAAI,CAACT,UAAU,CAACY,GAAG,CAACD,KAAK,CAAC,EAAE;UACxB,MAAM,IAAIE,KAAK,oCAAAC,MAAA,CAAoCC,MAAM,CAACJ,KAAK,CAAC,eAAAG,MAAA,CAAYf,SAAS,CAAE,CAAC;QAC5G;QACgB,MAAMiB,MAAM,GAAIC,aAAa,IAAK;UAAA,IAAAC,qBAAA;UAC9B,CAAAA,qBAAA,GAAAvB,yBAAyB,CAACwB,sBAAsB,CAC3CZ,GAAG,CAACG,QAAQ,CAAC,cAAAQ,qBAAA,eADlBA,qBAAA,CAEME,IAAI,CAAC;YAAET,KAAK;YAAEM;UAAa,CAAE,CAAC;UACpC,OAAOP,QAAQ;QACnC,CAAiB;QACD,OAAOM,MAAM;MAC7B;IACA,CAAS,CAAE;IACHrB,yBAAyB,CAACwB,sBAAsB,CAACE,GAAG,CAAChB,SAAS,EAAE,EAAE,CAAC;IACnE,OAAOA,SAAS;EACxB;EACI,OAAOiB,gBAAgBA,CAACjB,SAAS,EAAE;IAC/B,OAAOV,yBAAyB,CAACwB,sBAAsB,CAACP,GAAG,CAACP,SAAS,CAAC;EAC9E;EACI,OAAOkB,aAAaA,CAAClB,SAAS,EAAyB;IAAA,IAAvBmB,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACjD,IAAID,cAAc,IACd,CAAC7B,yBAAyB,CAAC2B,gBAAgB,CAACjB,SAAS,CAAC,EAAE;MACxD,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;IACzD;IACQ,MAAMe,cAAc,GAAGjC,yBAAyB,CAACwB,sBAAsB,CAACZ,GAAG,CAACF,SAAS,CAAC;IACtF,IAAIuB,cAAc,EAAE;MAChB,OAAOA,cAAc;IACjC,CAAS,MACI;MACD,MAAM,IAAIf,KAAK,CAAC,2BAA2B,CAAC;IACxD;EACA;EACA;EACI,OAAOgB,kBAAkBA,CAAChC,eAAe,EAAEiC,QAAQ,EAAE;IACjD,IAAI,CAACA,QAAQ,IAAI,CAACjC,eAAe,EAAE;MAC/B,OAAO8B,SAAS;IAC5B;IACQ,OAAOG,QAAQ,CAACnC,yBAAyB,CAACC,sBAAsB,CAACC,eAAe,CAAC,CAAC;EAC1F;AACA;AACAF,yBAAyB,CAACwB,sBAAsB,GAAG,IAAIY,OAAO,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}