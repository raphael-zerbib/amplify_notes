{"ast":null,"code":"import { getRetryDecider, jitteredBackoff, authenticatedHandler, unauthenticatedHandler } from '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../errors/validation.mjs';\nimport { parseRestApiServiceError } from '../../utils/serviceError.mjs';\nimport { logger } from '../../utils/logger.mjs';\nimport { parseSigningInfo } from '../../utils/parseSigningInfo.mjs';\nimport { resolveHeaders } from '../../utils/resolveHeaders.mjs';\n\n/**\n * Make REST API call with best-effort IAM auth.\n * @param amplify Amplify instance to to resolve credentials and tokens. Should use different instance in client-side\n *   and SSR\n * @param options Options accepted from public API options when calling the handlers.\n * @param signingServiceInfo Internal-only options enable IAM auth as well as to to overwrite the IAM signing service\n *   and region. If specified, and NONE of API Key header or Auth header is present, IAM auth will be used.\n *\n * @internal\n */\nconst transferHandler = async (amplify, options, signingServiceInfo) => {\n  const {\n    url,\n    method,\n    headers,\n    body,\n    withCredentials,\n    abortSignal\n  } = options;\n  const resolvedBody = body ? body instanceof FormData ? body : JSON.stringify(body !== null && body !== void 0 ? body : '') : undefined;\n  const resolvedHeaders = resolveHeaders(headers, body);\n  const request = {\n    url,\n    headers: resolvedHeaders,\n    method,\n    body: resolvedBody\n  };\n  const baseOptions = {\n    retryDecider: getRetryDecider(parseRestApiServiceError),\n    computeDelay: jitteredBackoff,\n    withCrossDomainCredentials: withCredentials,\n    abortSignal\n  };\n  const isIamAuthApplicable = iamAuthApplicable(request, signingServiceInfo);\n  let response;\n  const credentials = await resolveCredentials(amplify);\n  if (isIamAuthApplicable && credentials) {\n    var _signingServiceInfo$s, _signingServiceInfo$r;\n    const signingInfoFromUrl = parseSigningInfo(url);\n    const signingService = (_signingServiceInfo$s = signingServiceInfo === null || signingServiceInfo === void 0 ? void 0 : signingServiceInfo.service) !== null && _signingServiceInfo$s !== void 0 ? _signingServiceInfo$s : signingInfoFromUrl.service;\n    const signingRegion = (_signingServiceInfo$r = signingServiceInfo === null || signingServiceInfo === void 0 ? void 0 : signingServiceInfo.region) !== null && _signingServiceInfo$r !== void 0 ? _signingServiceInfo$r : signingInfoFromUrl.region;\n    response = await authenticatedHandler(request, {\n      ...baseOptions,\n      credentials,\n      region: signingRegion,\n      service: signingService\n    });\n  } else {\n    response = await unauthenticatedHandler(request, {\n      ...baseOptions\n    });\n  }\n  // Clean-up un-modeled properties from response.\n  return {\n    statusCode: response.statusCode,\n    headers: response.headers,\n    body: response.body\n  };\n};\nconst iamAuthApplicable = (_ref, signingServiceInfo) => {\n  let {\n    headers\n  } = _ref;\n  return !headers.authorization && !headers['x-api-key'] && !!signingServiceInfo;\n};\nconst resolveCredentials = async amplify => {\n  try {\n    const {\n      credentials\n    } = await amplify.Auth.fetchAuthSession();\n    if (credentials) {\n      return credentials;\n    }\n  } catch (e) {\n    logger.debug('No credentials available, the request will be unsigned.');\n  }\n  return null;\n};\nexport { transferHandler };","map":{"version":3,"names":["transferHandler","amplify","options","signingServiceInfo","url","method","headers","body","withCredentials","abortSignal","resolvedBody","FormData","JSON","stringify","undefined","resolvedHeaders","resolveHeaders","request","baseOptions","retryDecider","getRetryDecider","parseRestApiServiceError","computeDelay","jitteredBackoff","withCrossDomainCredentials","isIamAuthApplicable","iamAuthApplicable","response","credentials","resolveCredentials","_signingServiceInfo$s","_signingServiceInfo$r","signingInfoFromUrl","parseSigningInfo","signingService","service","signingRegion","region","authenticatedHandler","unauthenticatedHandler","statusCode","_ref","authorization","Auth","fetchAuthSession","e","logger","debug"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-rest/src/apis/common/handler.ts"],"sourcesContent":["import { authenticatedHandler, getRetryDecider, jitteredBackoff, unauthenticatedHandler, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { logger, parseRestApiServiceError, parseSigningInfo, } from '../../utils';\nimport { resolveHeaders } from '../../utils/resolveHeaders';\n/**\n * Make REST API call with best-effort IAM auth.\n * @param amplify Amplify instance to to resolve credentials and tokens. Should use different instance in client-side\n *   and SSR\n * @param options Options accepted from public API options when calling the handlers.\n * @param signingServiceInfo Internal-only options enable IAM auth as well as to to overwrite the IAM signing service\n *   and region. If specified, and NONE of API Key header or Auth header is present, IAM auth will be used.\n *\n * @internal\n */\nexport const transferHandler = async (amplify, options, signingServiceInfo) => {\n    const { url, method, headers, body, withCredentials, abortSignal } = options;\n    const resolvedBody = body\n        ? body instanceof FormData\n            ? body\n            : JSON.stringify(body ?? '')\n        : undefined;\n    const resolvedHeaders = resolveHeaders(headers, body);\n    const request = {\n        url,\n        headers: resolvedHeaders,\n        method,\n        body: resolvedBody,\n    };\n    const baseOptions = {\n        retryDecider: getRetryDecider(parseRestApiServiceError),\n        computeDelay: jitteredBackoff,\n        withCrossDomainCredentials: withCredentials,\n        abortSignal,\n    };\n    const isIamAuthApplicable = iamAuthApplicable(request, signingServiceInfo);\n    let response;\n    const credentials = await resolveCredentials(amplify);\n    if (isIamAuthApplicable && credentials) {\n        const signingInfoFromUrl = parseSigningInfo(url);\n        const signingService = signingServiceInfo?.service ?? signingInfoFromUrl.service;\n        const signingRegion = signingServiceInfo?.region ?? signingInfoFromUrl.region;\n        response = await authenticatedHandler(request, {\n            ...baseOptions,\n            credentials,\n            region: signingRegion,\n            service: signingService,\n        });\n    }\n    else {\n        response = await unauthenticatedHandler(request, {\n            ...baseOptions,\n        });\n    }\n    // Clean-up un-modeled properties from response.\n    return {\n        statusCode: response.statusCode,\n        headers: response.headers,\n        body: response.body,\n    };\n};\nconst iamAuthApplicable = ({ headers }, signingServiceInfo) => !headers.authorization && !headers['x-api-key'] && !!signingServiceInfo;\nconst resolveCredentials = async (amplify) => {\n    try {\n        const { credentials } = await amplify.Auth.fetchAuthSession();\n        if (credentials) {\n            return credentials;\n        }\n    }\n    catch (e) {\n        logger.debug('No credentials available, the request will be unsigned.');\n    }\n    return null;\n};\n"],"mappings":";;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,EAAEC,kBAAkB,KAAK;EAC3E,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAW,CAAE,GAAGP,OAAO;EAC5E,MAAMQ,YAAY,GAAGH,IAAI,GACnBA,IAAI,YAAYI,QAAQ,GACpBJ,IAAI,GACJK,IAAI,CAACC,SAAS,CAACN,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,EAAE,CAAC,GAC9BO,SAAS;EACf,MAAMC,eAAe,GAAGC,cAAc,CAACV,OAAO,EAAEC,IAAI,CAAC;EACrD,MAAMU,OAAO,GAAG;IACZb,GAAG;IACHE,OAAO,EAAES,eAAe;IACxBV,MAAM;IACNE,IAAI,EAAEG;EACd,CAAK;EACD,MAAMQ,WAAW,GAAG;IAChBC,YAAY,EAAEC,eAAe,CAACC,wBAAwB,CAAC;IACvDC,YAAY,EAAEC,eAAe;IAC7BC,0BAA0B,EAAEhB,eAAe;IAC3CC;EACR,CAAK;EACD,MAAMgB,mBAAmB,GAAGC,iBAAiB,CAACT,OAAO,EAAEd,kBAAkB,CAAC;EAC1E,IAAIwB,QAAQ;EACZ,MAAMC,WAAW,GAAG,MAAMC,kBAAkB,CAAC5B,OAAO,CAAC;EACrD,IAAIwB,mBAAmB,IAAIG,WAAW,EAAE;IAAA,IAAAE,qBAAA,EAAAC,qBAAA;IACpC,MAAMC,kBAAkB,GAAGC,gBAAgB,CAAC7B,GAAG,CAAC;IAChD,MAAM8B,cAAc,IAAAJ,qBAAA,GAAG3B,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEgC,OAAO,cAAAL,qBAAA,cAAAA,qBAAA,GAAIE,kBAAkB,CAACG,OAAO;IAChF,MAAMC,aAAa,IAAAL,qBAAA,GAAG5B,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEkC,MAAM,cAAAN,qBAAA,cAAAA,qBAAA,GAAIC,kBAAkB,CAACK,MAAM;IAC7EV,QAAQ,GAAG,MAAMW,oBAAoB,CAACrB,OAAO,EAAE;MAC3C,GAAGC,WAAW;MACdU,WAAW;MACXS,MAAM,EAAED,aAAa;MACrBD,OAAO,EAAED;IACrB,CAAS,CAAC;EACV,CAAK,MACI;IACDP,QAAQ,GAAG,MAAMY,sBAAsB,CAACtB,OAAO,EAAE;MAC7C,GAAGC;IACf,CAAS,CAAC;EACV;EACA;EACI,OAAO;IACHsB,UAAU,EAAEb,QAAQ,CAACa,UAAU;IAC/BlC,OAAO,EAAEqB,QAAQ,CAACrB,OAAO;IACzBC,IAAI,EAAEoB,QAAQ,CAACpB;EACvB,CAAK;AACL;AACA,MAAMmB,iBAAiB,GAAGA,CAAAe,IAAA,EAActC,kBAAkB;EAAA,IAA/B;IAAEG;EAAO,CAAE,GAAAmC,IAAA;EAAA,OAAyB,CAACnC,OAAO,CAACoC,aAAa,IAAI,CAACpC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAACH,kBAAkB;AAAA;AACtI,MAAM0B,kBAAkB,GAAG,MAAO5B,OAAO,IAAK;EAC1C,IAAI;IACA,MAAM;MAAE2B;IAAW,CAAE,GAAG,MAAM3B,OAAO,CAAC0C,IAAI,CAACC,gBAAgB,EAAE;IAC7D,IAAIhB,WAAW,EAAE;MACb,OAAOA,WAAW;IAC9B;EACA,CAAK,CACD,OAAOiB,CAAC,EAAE;IACNC,MAAM,CAACC,KAAK,CAAC,yDAAyD,CAAC;EAC/E;EACI,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}