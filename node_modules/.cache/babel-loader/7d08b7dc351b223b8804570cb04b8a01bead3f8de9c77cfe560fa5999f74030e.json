{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Checks to see if the given response or subscription message contains an\n * unauth error. If it does, it changes the error message to include instructions\n * for the app developer.\n */\nfunction repackageUnauthError(content) {\n  if (content.errors && Array.isArray(content.errors)) {\n    content.errors.forEach(e => {\n      if (isUnauthError(e)) {\n        e.message = 'Unauthorized';\n        e.recoverySuggestion = `If you're calling an Amplify-generated API, make sure ` + `to set the \"authMode\" in generateClient({ authMode: '...' }) to the backend authorization ` + `rule's auth provider ('apiKey', 'userPool', 'iam', 'oidc', 'lambda')`;\n      }\n    });\n  }\n  return content;\n}\nfunction isUnauthError(error) {\n  // Error pattern corresponding to appsync calls\n  if (error?.['originalError']?.['name']?.startsWith('UnauthorizedException')) {\n    return true;\n  }\n  // Error pattern corresponding to appsync subscriptions\n  if (error.message?.startsWith('Connection failed:') && error.message?.includes('Permission denied')) {\n    return true;\n  }\n  return false;\n}\nexport { repackageUnauthError };","map":{"version":3,"names":["repackageUnauthError","content","errors","Array","isArray","forEach","e","isUnauthError","message","recoverySuggestion","error","startsWith","includes"],"sources":["/Users/raphaperso/Documents/Hub/FreeCodeCamp/amplify_notes/node_modules/@aws-amplify/api-graphql/src/utils/errors/repackageAuthError.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Checks to see if the given response or subscription message contains an\n * unauth error. If it does, it changes the error message to include instructions\n * for the app developer.\n */\nexport function repackageUnauthError(content) {\n    if (content.errors && Array.isArray(content.errors)) {\n        content.errors.forEach(e => {\n            if (isUnauthError(e)) {\n                e.message = 'Unauthorized';\n                e.recoverySuggestion =\n                    `If you're calling an Amplify-generated API, make sure ` +\n                        `to set the \"authMode\" in generateClient({ authMode: '...' }) to the backend authorization ` +\n                        `rule's auth provider ('apiKey', 'userPool', 'iam', 'oidc', 'lambda')`;\n            }\n        });\n    }\n    return content;\n}\nfunction isUnauthError(error) {\n    // Error pattern corresponding to appsync calls\n    if (error?.['originalError']?.['name']?.startsWith('UnauthorizedException')) {\n        return true;\n    }\n    // Error pattern corresponding to appsync subscriptions\n    if (error.message?.startsWith('Connection failed:') &&\n        error.message?.includes('Permission denied')) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,oBAAoBA,CAACC,OAAO,EAAE;EAC1C,IAAIA,OAAO,CAACC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,MAAM,CAAC,EAAE;IACjDD,OAAO,CAACC,MAAM,CAACG,OAAO,CAACC,CAAC,IAAI;MACxB,IAAIC,aAAa,CAACD,CAAC,CAAC,EAAE;QAClBA,CAAC,CAACE,OAAO,GAAG,cAAc;QAC1BF,CAAC,CAACG,kBAAkB,GACf,wDAAuD,GACnD,4FAA2F,GAC3F,sEAAqE;MAC9F;IACA,CAAS,CAAC;EACV;EACI,OAAOR,OAAO;AAClB;AACA,SAASM,aAAaA,CAACG,KAAK,EAAE;EAC9B;EACI,IAAIA,KAAK,GAAG,eAAe,CAAC,GAAG,MAAM,CAAC,EAAEC,UAAU,CAAC,uBAAuB,CAAC,EAAE;IACzE,OAAO,IAAI;EACnB;EACA;EACI,IAAID,KAAK,CAACF,OAAO,EAAEG,UAAU,CAAC,oBAAoB,CAAC,IAC/CD,KAAK,CAACF,OAAO,EAAEI,QAAQ,CAAC,mBAAmB,CAAC,EAAE;IAC9C,OAAO,IAAI;EACnB;EACI,OAAO,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}