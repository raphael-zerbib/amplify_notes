{"ast":null,"code":"import { createCancellableOperation } from '../../utils/createCancellableOperation.mjs';\nimport { parseSigningInfo } from '../../utils/parseSigningInfo.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../errors/validation.mjs';\nimport { resolveApiUrl } from '../../utils/resolveApiUrl.mjs';\nimport { logger } from '../../utils/logger.mjs';\nimport { transferHandler } from './handler.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst publicHandler = (amplify, options, method) => createCancellableOperation(async abortSignal => {\n  const {\n    apiName,\n    options: apiOptions = {},\n    path: apiPath\n  } = options;\n  const url = resolveApiUrl(amplify, apiName, apiPath, apiOptions?.queryParams);\n  const libraryConfigHeaders = await amplify.libraryOptions?.API?.REST?.headers?.({\n    apiName\n  });\n  const {\n    headers: invocationHeaders = {}\n  } = apiOptions;\n  const headers = {\n    // custom headers from invocation options should precede library options\n    ...libraryConfigHeaders,\n    ...invocationHeaders\n  };\n  const signingServiceInfo = parseSigningInfo(url, {\n    amplify,\n    apiName\n  });\n  logger.debug(method, url, headers, `IAM signing options: ${JSON.stringify(signingServiceInfo)}`);\n  return transferHandler(amplify, {\n    ...apiOptions,\n    url,\n    method,\n    headers,\n    abortSignal\n  }, signingServiceInfo);\n});\nconst get = (amplify, input) => publicHandler(amplify, input, 'GET');\nconst post = (amplify, input) => publicHandler(amplify, input, 'POST');\nconst put = (amplify, input) => publicHandler(amplify, input, 'PUT');\nconst del = (amplify, input) => publicHandler(amplify, input, 'DELETE');\nconst head = (amplify, input) => publicHandler(amplify, input, 'HEAD');\nconst patch = (amplify, input) => publicHandler(amplify, input, 'PATCH');\nexport { del, get, head, patch, post, put };","map":{"version":3,"names":["publicHandler","amplify","options","method","createCancellableOperation","abortSignal","apiName","apiOptions","path","apiPath","url","resolveApiUrl","queryParams","libraryConfigHeaders","libraryOptions","API","REST","headers","invocationHeaders","signingServiceInfo","parseSigningInfo","logger","debug","JSON","stringify","transferHandler","get","input","post","put","del","head","patch"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-rest/src/apis/common/publicApis.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createCancellableOperation, logger, parseSigningInfo, resolveApiUrl, } from '../../utils';\nimport { transferHandler } from './handler';\nconst publicHandler = (amplify, options, method) => createCancellableOperation(async (abortSignal) => {\n    const { apiName, options: apiOptions = {}, path: apiPath } = options;\n    const url = resolveApiUrl(amplify, apiName, apiPath, apiOptions?.queryParams);\n    const libraryConfigHeaders = await amplify.libraryOptions?.API?.REST?.headers?.({\n        apiName,\n    });\n    const { headers: invocationHeaders = {} } = apiOptions;\n    const headers = {\n        // custom headers from invocation options should precede library options\n        ...libraryConfigHeaders,\n        ...invocationHeaders,\n    };\n    const signingServiceInfo = parseSigningInfo(url, {\n        amplify,\n        apiName,\n    });\n    logger.debug(method, url, headers, `IAM signing options: ${JSON.stringify(signingServiceInfo)}`);\n    return transferHandler(amplify, {\n        ...apiOptions,\n        url,\n        method,\n        headers,\n        abortSignal,\n    }, signingServiceInfo);\n});\nexport const get = (amplify, input) => publicHandler(amplify, input, 'GET');\nexport const post = (amplify, input) => publicHandler(amplify, input, 'POST');\nexport const put = (amplify, input) => publicHandler(amplify, input, 'PUT');\nexport const del = (amplify, input) => publicHandler(amplify, input, 'DELETE');\nexport const head = (amplify, input) => publicHandler(amplify, input, 'HEAD');\nexport const patch = (amplify, input) => publicHandler(amplify, input, 'PATCH');\n"],"mappings":";;;;;;;;;AAAA;AACA;AAGA,MAAMA,aAAa,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,KAAKC,0BAA0B,CAAC,MAAOC,WAAW,IAAK;EAClG,MAAM;IAAEC,OAAO;IAAEJ,OAAO,EAAEK,UAAU,GAAG,EAAE;IAAEC,IAAI,EAAEC;EAAO,CAAE,GAAGP,OAAO;EACpE,MAAMQ,GAAG,GAAGC,aAAa,CAACV,OAAO,EAAEK,OAAO,EAAEG,OAAO,EAAEF,UAAU,EAAEK,WAAW,CAAC;EAC7E,MAAMC,oBAAoB,GAAG,MAAMZ,OAAO,CAACa,cAAc,EAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO,GAAG;IAC5EX;EACR,CAAK,CAAC;EACF,MAAM;IAAEW,OAAO,EAAEC,iBAAiB,GAAG;EAAE,CAAE,GAAGX,UAAU;EACtD,MAAMU,OAAO,GAAG;IACpB;IACQ,GAAGJ,oBAAoB;IACvB,GAAGK;EACX,CAAK;EACD,MAAMC,kBAAkB,GAAGC,gBAAgB,CAACV,GAAG,EAAE;IAC7CT,OAAO;IACPK;EACR,CAAK,CAAC;EACFe,MAAM,CAACC,KAAK,CAACnB,MAAM,EAAEO,GAAG,EAAEO,OAAO,EAAG,wBAAuBM,IAAI,CAACC,SAAS,CAACL,kBAAkB,CAAE,EAAC,CAAC;EAChG,OAAOM,eAAe,CAACxB,OAAO,EAAE;IAC5B,GAAGM,UAAU;IACbG,GAAG;IACHP,MAAM;IACNc,OAAO;IACPZ;EACR,CAAK,EAAEc,kBAAkB,CAAC;AAC1B,CAAC,CAAC;AACU,MAACO,GAAG,GAAGA,CAACzB,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,KAAK;AAC9D,MAACC,IAAI,GAAGA,CAAC3B,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,MAAM;AAChE,MAACE,GAAG,GAAGA,CAAC5B,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,KAAK;AAC9D,MAACG,GAAG,GAAGA,CAAC7B,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,QAAQ;AACjE,MAACI,IAAI,GAAGA,CAAC9B,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,MAAM;AAChE,MAACK,KAAK,GAAGA,CAAC/B,OAAO,EAAE0B,KAAK,KAAK3B,aAAa,CAACC,OAAO,EAAE0B,KAAK,EAAE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}