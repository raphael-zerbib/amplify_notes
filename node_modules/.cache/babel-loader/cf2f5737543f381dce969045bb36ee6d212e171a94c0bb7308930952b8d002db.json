{"ast":null,"code":"import { monotonicFactory } from 'ulid';\nimport { amplifyUuid, AmplifyUrl, WordArray } from '@aws-amplify/core/internals/utils';\nimport { produce, applyPatches } from 'immer';\nimport { isPredicateObj, isPredicateGroup, SortDirection, LimitTimerRaceResolvedValues, isModelAttributeCompositeKey, isModelAttributeKey, isModelAttributePrimaryKey } from './types.mjs';\nimport './predicates/index.mjs';\nimport { ModelSortPredicateCreator } from './predicates/sort.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst ID = 'id';\n/**\n * Used by the Async Storage Adapter to concatenate key values\n * for a record. For instance, if a model has the following keys:\n * `customId: ID! @primaryKey(sortKeyFields: [\"createdAt\"])`,\n * we concatenate the `customId` and `createdAt` as:\n * `12-234-5#2022-09-28T00:00:00.000Z`\n */\nconst DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR = '#';\n/**\n * Used for generating spinal-cased index name from an array of\n * key field names.\n * E.g. for keys `[id, title]` => 'id-title'\n */\nconst IDENTIFIER_KEY_SEPARATOR = '-';\nconst errorMessages = {\n  idEmptyString: 'An index field cannot contain an empty string value',\n  queryByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be queried by a single key value. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n  deleteByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be deleted by a single key value, unless using a predicate. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n  observeWithObjectLiteral: 'Object literal syntax cannot be used with observe. Use a predicate instead: https://docs.amplify.aws/lib/datastore/data-access/q/platform/js/#predicates'\n};\nvar NAMESPACES;\n(function (NAMESPACES) {\n  NAMESPACES[\"DATASTORE\"] = \"datastore\";\n  NAMESPACES[\"USER\"] = \"user\";\n  NAMESPACES[\"SYNC\"] = \"sync\";\n  NAMESPACES[\"STORAGE\"] = \"storage\";\n})(NAMESPACES || (NAMESPACES = {}));\nconst DATASTORE = NAMESPACES.DATASTORE;\nconst USER = NAMESPACES.USER;\nconst SYNC = NAMESPACES.SYNC;\nconst STORAGE = NAMESPACES.STORAGE;\nconst exhaustiveCheck = (obj, throwOnError = true) => {\n  if (throwOnError) {\n    throw new Error(`Invalid ${obj}`);\n  }\n};\nconst isNullOrUndefined = val => {\n  return typeof val === 'undefined' || val === undefined || val === null;\n};\nconst validatePredicate = (model, groupType, predicatesOrGroups) => {\n  let filterType;\n  let isNegation = false;\n  if (predicatesOrGroups.length === 0) {\n    return true;\n  }\n  switch (groupType) {\n    case 'not':\n      filterType = 'every';\n      isNegation = true;\n      break;\n    case 'and':\n      filterType = 'every';\n      break;\n    case 'or':\n      filterType = 'some';\n      break;\n    default:\n      throw new Error(`Invalid ${groupType}`);\n  }\n  const result = predicatesOrGroups[filterType](predicateOrGroup => {\n    if (isPredicateObj(predicateOrGroup)) {\n      const {\n        field,\n        operator,\n        operand\n      } = predicateOrGroup;\n      const value = model[field];\n      return validatePredicateField(value, operator, operand);\n    }\n    if (isPredicateGroup(predicateOrGroup)) {\n      const {\n        type,\n        predicates\n      } = predicateOrGroup;\n      return validatePredicate(model, type, predicates);\n    }\n    throw new Error('Not a predicate or group');\n  });\n  return isNegation ? !result : result;\n};\nconst validatePredicateField = (value, operator, operand) => {\n  switch (operator) {\n    case 'ne':\n      return value !== operand;\n    case 'eq':\n      return value === operand;\n    case 'le':\n      return value <= operand;\n    case 'lt':\n      return value < operand;\n    case 'ge':\n      return value >= operand;\n    case 'gt':\n      return value > operand;\n    case 'between':\n      const [min, max] = operand;\n      return value >= min && value <= max;\n    case 'beginsWith':\n      return !isNullOrUndefined(value) && value.startsWith(operand);\n    case 'contains':\n      return !isNullOrUndefined(value) && value.indexOf(operand) > -1;\n    case 'notContains':\n      return isNullOrUndefined(value) || value.indexOf(operand) === -1;\n    default:\n      return false;\n  }\n};\nconst isModelConstructor = obj => {\n  return obj && typeof obj.copyOf === 'function';\n};\nconst nonModelClasses = new WeakSet();\nfunction registerNonModelClass(clazz) {\n  nonModelClasses.add(clazz);\n}\nconst isNonModelConstructor = obj => {\n  return nonModelClasses.has(obj);\n};\nconst topologicallySortedModels = new WeakMap();\nconst traverseModel = (srcModelName, instance, namespace, modelInstanceCreator, getModelConstructorByModelName) => {\n  const modelConstructor = getModelConstructorByModelName(namespace.name, srcModelName);\n  const result = [];\n  const newInstance = modelConstructor.copyOf(instance, () => {});\n  result.unshift({\n    modelName: srcModelName,\n    item: newInstance,\n    instance: newInstance\n  });\n  if (!topologicallySortedModels.has(namespace)) {\n    topologicallySortedModels.set(namespace, Array.from(namespace.modelTopologicalOrdering.keys()));\n  }\n  const sortedModels = topologicallySortedModels.get(namespace);\n  result.sort((a, b) => {\n    return sortedModels.indexOf(a.modelName) - sortedModels.indexOf(b.modelName);\n  });\n  return result;\n};\nlet privateModeCheckResult;\nconst isPrivateMode = () => {\n  return new Promise(resolve => {\n    const dbname = amplifyUuid();\n    let db;\n    const isPrivate = () => {\n      privateModeCheckResult = false;\n      resolve(true);\n    };\n    const isNotPrivate = async () => {\n      if (db && db.result && typeof db.result.close === 'function') {\n        await db.result.close();\n      }\n      await indexedDB.deleteDatabase(dbname);\n      privateModeCheckResult = true;\n      return resolve(false);\n    };\n    if (privateModeCheckResult === true) {\n      return isNotPrivate();\n    }\n    if (privateModeCheckResult === false) {\n      return isPrivate();\n    }\n    if (indexedDB === null) return isPrivate();\n    db = indexedDB.open(dbname);\n    db.onerror = isPrivate;\n    db.onsuccess = isNotPrivate;\n  });\n};\nlet safariCompatabilityModeResult;\n/**\n * Whether the browser's implementation of IndexedDB breaks on array lookups\n * against composite indexes whose keypath contains a single column.\n *\n * E.g., Whether `store.createIndex(indexName, ['id'])` followed by\n * `store.index(indexName).get([1])` will *ever* return records.\n *\n * In all known, modern Safari browsers as of Q4 2022, the query against an index like\n * this will *always* return `undefined`. So, the index needs to be created as a scalar.\n */\nconst isSafariCompatabilityMode = async () => {\n  try {\n    const dbName = amplifyUuid();\n    const storeName = 'indexedDBFeatureProbeStore';\n    const indexName = 'idx';\n    if (indexedDB === null) return false;\n    if (safariCompatabilityModeResult !== undefined) {\n      return safariCompatabilityModeResult;\n    }\n    const db = await new Promise(resolve => {\n      const dbOpenRequest = indexedDB.open(dbName);\n      dbOpenRequest.onerror = () => resolve(false);\n      dbOpenRequest.onsuccess = () => {\n        const db = dbOpenRequest.result;\n        resolve(db);\n      };\n      dbOpenRequest.onupgradeneeded = event => {\n        const db = event?.target?.result;\n        db.onerror = () => resolve(false);\n        const store = db.createObjectStore(storeName, {\n          autoIncrement: true\n        });\n        store.createIndex(indexName, ['id']);\n      };\n    });\n    if (!db) {\n      throw new Error('Could not open probe DB');\n    }\n    const rwTx = db.transaction(storeName, 'readwrite');\n    const rwStore = rwTx.objectStore(storeName);\n    rwStore.add({\n      id: 1\n    });\n    rwTx.commit();\n    const result = await new Promise(resolve => {\n      const tx = db.transaction(storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      const index = store.index(indexName);\n      const getRequest = index.get([1]);\n      getRequest.onerror = () => resolve(false);\n      getRequest.onsuccess = event => {\n        resolve(event?.target?.result);\n      };\n    });\n    if (db && typeof db.close === 'function') {\n      await db.close();\n    }\n    await indexedDB.deleteDatabase(dbName);\n    if (result === undefined) {\n      safariCompatabilityModeResult = true;\n    } else {\n      safariCompatabilityModeResult = false;\n    }\n  } catch (error) {\n    safariCompatabilityModeResult = false;\n  }\n  return safariCompatabilityModeResult;\n};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n  let encodedByte = i.toString(16).toLowerCase();\n  if (encodedByte.length === 1) {\n    encodedByte = `0${encodedByte}`;\n  }\n  HEX_TO_SHORT[encodedByte] = i;\n}\nconst getBytesFromHex = encoded => {\n  if (encoded.length % 2 !== 0) {\n    throw new Error('Hex encoded strings must have an even number length');\n  }\n  const out = new Uint8Array(encoded.length / 2);\n  for (let i = 0; i < encoded.length; i += 2) {\n    const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n    }\n  }\n  return out;\n};\nconst randomBytes = nBytes => {\n  const str = new WordArray().random(nBytes).toString();\n  return getBytesFromHex(str);\n};\nconst prng = () => randomBytes(1)[0] / 0xff;\nfunction monotonicUlidFactory(seed) {\n  const ulid = monotonicFactory(prng);\n  return () => {\n    return ulid(seed);\n  };\n}\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\nfunction getNow() {\n  if (typeof performance !== 'undefined' && performance && typeof performance.now === 'function') {\n    return performance.now() | 0; // convert to integer\n  } else {\n    return Date.now();\n  }\n}\nfunction sortCompareFunction(sortPredicates) {\n  return function compareFunction(a, b) {\n    // enable multi-field sort by iterating over predicates until\n    // a comparison returns -1 or 1\n    for (const predicate of sortPredicates) {\n      const {\n        field,\n        sortDirection\n      } = predicate;\n      // reverse result when direction is descending\n      const sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n      if (a[field] < b[field]) {\n        return -1 * sortMultiplier;\n      }\n      if (a[field] > b[field]) {\n        return 1 * sortMultiplier;\n      }\n    }\n    return 0;\n  };\n}\n/* deep directed comparison ensuring that all fields on \"from\" object exist and\n * are equal to values on an \"against\" object\n *\n * Note: This same guarauntee is not applied for values on \"against\" that aren't on \"from\"\n *\n * @param fromObject - The object that may be an equal subset of the againstObject.\n * @param againstObject - The object that may be an equal superset of the fromObject.\n *\n * @returns True if fromObject is a equal subset of againstObject and False otherwise.\n */\nfunction directedValueEquality(fromObject, againstObject, nullish = false) {\n  const aKeys = Object.keys(fromObject);\n  for (const key of aKeys) {\n    const fromValue = fromObject[key];\n    const againstValue = againstObject[key];\n    if (!valuesEqual(fromValue, againstValue, nullish)) {\n      return false;\n    }\n  }\n  return true;\n}\n// deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\nfunction valuesEqual(valA, valB, nullish = false) {\n  let a = valA;\n  let b = valB;\n  const nullishCompare = (_a, _b) => {\n    return (_a === undefined || _a === null) && (_b === undefined || _b === null);\n  };\n  // if one of the values is a primitive and the other is an object\n  if (a instanceof Object && !(b instanceof Object) || !(a instanceof Object) && b instanceof Object) {\n    return false;\n  }\n  // compare primitive types\n  if (!(a instanceof Object)) {\n    if (nullish && nullishCompare(a, b)) {\n      return true;\n    }\n    return a === b;\n  }\n  // make sure object types match\n  if (Array.isArray(a) && !Array.isArray(b) || Array.isArray(b) && !Array.isArray(a)) {\n    return false;\n  }\n  if (a instanceof Set && b instanceof Set) {\n    a = [...a];\n    b = [...b];\n  }\n  if (a instanceof Map && b instanceof Map) {\n    a = Object.fromEntries(a);\n    b = Object.fromEntries(b);\n  }\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  // last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n  if (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n    return false;\n  }\n  // iterate through the longer set of keys\n  // e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n  // we want to iterate through bKeys\n  const keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n  for (const key of keys) {\n    const aVal = a[key];\n    const bVal = b[key];\n    if (!valuesEqual(aVal, bVal, nullish)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Statelessly extracts the specified page from an array.\n *\n * @param records - The source array to extract a page from.\n * @param pagination - A definition of the page to extract.\n * @returns This items from `records` matching the `pagination` definition.\n */\nfunction inMemoryPagination(records, pagination) {\n  if (pagination && records.length > 1) {\n    if (pagination.sort) {\n      const sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n      if (sortPredicates.length) {\n        const compareFn = sortCompareFunction(sortPredicates);\n        records.sort(compareFn);\n      }\n    }\n    const {\n      page = 0,\n      limit = 0\n    } = pagination;\n    const start = Math.max(0, page * limit) || 0;\n    const end = limit > 0 ? start + limit : records.length;\n    return records.slice(start, end);\n  }\n  return records;\n}\n/**\n * An `aysnc` implementation of `Array.some()`. Returns as soon as a match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if \"some\" items match; `false` otherwise.\n */\nasync function asyncSome(items, matches) {\n  for (const item of items) {\n    if (await matches(item)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * An `aysnc` implementation of `Array.every()`. Returns as soon as a non-match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if every item matches; `false` otherwise.\n */\nasync function asyncEvery(items, matches) {\n  for (const item of items) {\n    if (!(await matches(item))) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * An `async` implementation of `Array.filter()`. Returns after all items have been filtered.\n * TODO: Return AsyncIterable.\n * @param items The items to filter.\n * @param matches The `async` matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<T>` of matching items.\n */\nasync function asyncFilter(items, matches) {\n  const results = [];\n  for (const item of items) {\n    if (await matches(item)) {\n      results.push(item);\n    }\n  }\n  return results;\n}\nconst isAWSDate = val => {\n  return !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nconst isAWSTime = val => {\n  return !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nconst isAWSDateTime = val => {\n  return !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nconst isAWSTimestamp = val => {\n  return !!/^\\d+$/.exec(String(val));\n};\nconst isAWSEmail = val => {\n  return !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(val);\n};\nconst isAWSJSON = val => {\n  try {\n    JSON.parse(val);\n    return true;\n  } catch {\n    return false;\n  }\n};\nconst isAWSURL = val => {\n  try {\n    return !!new AmplifyUrl(val);\n  } catch {\n    return false;\n  }\n};\nconst isAWSPhone = val => {\n  return !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\nconst isAWSIPAddress = val => {\n  return !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(val);\n};\nclass DeferredPromise {\n  constructor() {\n    const self = this;\n    this.promise = new Promise((resolve, reject) => {\n      self.resolve = resolve;\n      self.reject = reject;\n    });\n  }\n}\nclass DeferredCallbackResolver {\n  constructor(options) {\n    this.limitPromise = new DeferredPromise();\n    this.raceInFlight = false;\n    this.callback = () => {};\n    this.defaultErrorHandler = (msg = 'DeferredCallbackResolver error') => {\n      throw new Error(msg);\n    };\n    this.callback = options.callback;\n    this.errorHandler = options.errorHandler || this.defaultErrorHandler;\n    this.maxInterval = options.maxInterval || 2000;\n  }\n  startTimer() {\n    this.timerPromise = new Promise((resolve, reject) => {\n      this.timer = setTimeout(() => {\n        resolve(LimitTimerRaceResolvedValues.TIMER);\n      }, this.maxInterval);\n    });\n  }\n  async racePromises() {\n    let winner;\n    try {\n      this.raceInFlight = true;\n      this.startTimer();\n      winner = await Promise.race([this.timerPromise, this.limitPromise.promise]);\n      this.callback();\n    } catch (err) {\n      this.errorHandler(err);\n    } finally {\n      // reset for the next race\n      this.clear();\n      this.raceInFlight = false;\n      this.limitPromise = new DeferredPromise();\n      return winner;\n    }\n  }\n  start() {\n    if (!this.raceInFlight) this.racePromises();\n  }\n  clear() {\n    clearTimeout(this.timer);\n  }\n  resolve() {\n    this.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n  }\n}\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\nfunction mergePatches(originalSource, oldPatches, newPatches) {\n  const patchesToMerge = oldPatches.concat(newPatches);\n  let patches;\n  produce(originalSource, draft => {\n    applyPatches(draft, patchesToMerge);\n  }, p => {\n    patches = p;\n  });\n  return patches;\n}\nconst getStorename = (namespace, modelName) => {\n  const storeName = `${namespace}_${modelName}`;\n  return storeName;\n};\n//#region Key Utils\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n    There are some very particular rules regarding which fields must be included in the update mutation input\n    The field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n    To summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n     1. all of the other fields in that composite sort key\n     2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n     E.g.,\n     Model @model\n        @key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n        @key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n        @key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n    Model.a is updated => include ['a', 'b', 'c', 'd']\n    Model.c is updated => include ['a', 'b', 'c', 'd']\n    Model.d is updated => include ['a', 'b', 'c', 'd']\n    Model.x is updated => include ['x', 'y', 'z']\n\n    This function accepts a model's attributes and returns grouped sets of composite key fields\n    Using our example Model above, the function will return:\n    [\n        Set('a', 'b', 'c', 'd'),\n        Set('x', 'y', 'z'),\n    ]\n\n    This gives us the opportunity to correctly include the required fields for composite keys\n    When crafting the mutation input in Storage.getUpdateMutationInput\n\n    See 'processCompositeKeys' test in util.test.ts for more examples\n*/\nconst processCompositeKeys = attributes => {\n  const extractCompositeSortKey = ({\n    properties: {\n      // ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n      fields: [, ...sortKeyFields]\n    }\n  }) => sortKeyFields;\n  const compositeKeyFields = attributes.filter(isModelAttributeCompositeKey).map(extractCompositeSortKey);\n  /*\n      if 2 sets of fields have any intersecting fields => combine them into 1 union set\n      e.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n  */\n  const combineIntersecting = fields => fields.reduce((combined, sortKeyFields) => {\n    const sortKeyFieldsSet = new Set(sortKeyFields);\n    if (combined.length === 0) {\n      combined.push(sortKeyFieldsSet);\n      return combined;\n    }\n    // does the current set share values with another set we've already added to `combined`?\n    const intersectingSetIdx = combined.findIndex(existingSet => {\n      return [...existingSet].some(f => sortKeyFieldsSet.has(f));\n    });\n    if (intersectingSetIdx > -1) {\n      const union = new Set([...combined[intersectingSetIdx], ...sortKeyFieldsSet]);\n      // combine the current set with the intersecting set we found above\n      combined[intersectingSetIdx] = union;\n    } else {\n      // none of the sets in `combined` have intersecting values with the current set\n      combined.push(sortKeyFieldsSet);\n    }\n    return combined;\n  }, []);\n  const initial = combineIntersecting(compositeKeyFields);\n  // a single pass pay not be enough to correctly combine all the fields\n  // call the function once more to get a final merged list of sets\n  const combined = combineIntersecting(initial);\n  return combined;\n};\nconst extractKeyIfExists = modelDefinition => {\n  const keyAttribute = modelDefinition?.attributes?.find(isModelAttributeKey);\n  return keyAttribute;\n};\nconst extractPrimaryKeyFieldNames = modelDefinition => {\n  const keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return keyAttribute.properties.fields;\n  }\n  return [ID];\n};\nconst extractPrimaryKeyValues = (model, keyFields) => {\n  return keyFields.map(key => model[key]);\n};\nconst extractPrimaryKeysAndValues = (model, keyFields) => {\n  const primaryKeysAndValues = {};\n  keyFields.forEach(key => primaryKeysAndValues[key] = model[key]);\n  return primaryKeysAndValues;\n};\n// IdentifierFields<ManagedIdentifier>\n// Default behavior without explicit @primaryKey defined\nconst isIdManaged = modelDefinition => {\n  const keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return false;\n  }\n  return true;\n};\n// IdentifierFields<OptionallyManagedIdentifier>\n// @primaryKey with explicit `id` in the PK. Single key or composite\nconst isIdOptionallyManaged = modelDefinition => {\n  const keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return keyAttribute.properties.fields[0] === ID;\n  }\n  return false;\n};\nconst establishRelationAndKeys = namespace => {\n  const relationship = {};\n  const keys = {};\n  Object.keys(namespace.models).forEach(mKey => {\n    relationship[mKey] = {\n      indexes: [],\n      relationTypes: []\n    };\n    keys[mKey] = {};\n    const model = namespace.models[mKey];\n    Object.keys(model.fields).forEach(attr => {\n      const fieldAttribute = model.fields[attr];\n      if (typeof fieldAttribute.type === 'object' && 'model' in fieldAttribute.type) {\n        const connectionType = fieldAttribute.association.connectionType;\n        relationship[mKey].relationTypes.push({\n          fieldName: fieldAttribute.name,\n          modelName: fieldAttribute.type.model,\n          relationType: connectionType,\n          targetName: fieldAttribute.association['targetName'],\n          targetNames: fieldAttribute.association['targetNames'],\n          associatedWith: fieldAttribute.association['associatedWith']\n        });\n        if (connectionType === 'BELONGS_TO') {\n          const targetNames = extractTargetNamesFromSrc(fieldAttribute.association);\n          if (targetNames) {\n            const idxName = indexNameFromKeys(targetNames);\n            const idxExists = relationship[mKey].indexes.find(([index]) => index === idxName);\n            if (!idxExists) {\n              relationship[mKey].indexes.push([idxName, targetNames]);\n            }\n          }\n        }\n      }\n    });\n    if (model.attributes) {\n      keys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n      for (const attribute of model.attributes) {\n        if (!isModelAttributeKey(attribute)) {\n          continue;\n        }\n        const {\n          fields\n        } = attribute.properties;\n        if (isModelAttributePrimaryKey(attribute)) {\n          keys[mKey].primaryKey = fields;\n          continue;\n        }\n        // create indexes for all other keys\n        const idxName = indexNameFromKeys(fields);\n        const idxExists = relationship[mKey].indexes.find(([index]) => index === idxName);\n        if (!idxExists) {\n          relationship[mKey].indexes.push([idxName, fields]);\n        }\n      }\n    }\n    // set 'id' as the PK for models without a custom PK explicitly defined\n    if (!keys[mKey].primaryKey) {\n      keys[mKey].primaryKey = [ID];\n    }\n    // create primary index\n    relationship[mKey].indexes.push(['byPk', keys[mKey].primaryKey, {\n      unique: true\n    }]);\n  });\n  return [relationship, keys];\n};\nconst getIndex = (rel, src) => {\n  let indexName;\n  rel.some(relItem => {\n    if (relItem.modelName === src) {\n      const targetNames = extractTargetNamesFromSrc(relItem);\n      indexName = targetNames && indexNameFromKeys(targetNames);\n      return true;\n    }\n  });\n  return indexName;\n};\nconst getIndexFromAssociation = (indexes, src) => {\n  let indexName;\n  if (Array.isArray(src)) {\n    indexName = indexNameFromKeys(src);\n  } else {\n    indexName = src;\n  }\n  const associationIndex = indexes.find(([idxName]) => idxName === indexName);\n  return associationIndex && associationIndex[0];\n};\n/**\n * Backwards-compatability for schema generated prior to custom primary key support:\nthe single field `targetName` has been replaced with an array of `targetNames`.\n`targetName` and `targetNames` are exclusive (will never exist on the same schema)\n * @param src {RelationType | ModelAssociation | undefined}\n * @returns array of targetNames, or `undefined`\n */\nconst extractTargetNamesFromSrc = src => {\n  const targetName = src?.targetName;\n  const targetNames = src?.targetNames;\n  if (Array.isArray(targetNames)) {\n    return targetNames;\n  } else if (typeof targetName === 'string') {\n    return [targetName];\n  } else {\n    return undefined;\n  }\n};\n// Generates spinal-cased index name from an array of key field names\n// E.g. for keys `[id, title]` => 'id-title'\nconst indexNameFromKeys = keys => {\n  return keys.reduce((prev, cur, idx) => {\n    if (idx === 0) {\n      return cur;\n    }\n    return `${prev}${IDENTIFIER_KEY_SEPARATOR}${cur}`;\n  }, '');\n};\nconst keysEqual = (keysA, keysB) => {\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  return keysA.every((key, idx) => key === keysB[idx]);\n};\n// Returns primary keys for a model\nconst getIndexKeys = (namespace, modelName) => {\n  const keyPath = namespace?.keys?.[modelName]?.primaryKey;\n  if (keyPath) {\n    return keyPath;\n  }\n  return [ID];\n};\n//#endregion\n/**\n * Determine what the managed timestamp field names are for the given model definition\n * and return the mapping.\n *\n * All timestamp fields are included in the mapping, regardless of whether the final field\n * names are the defaults or customized in the `@model` directive.\n *\n * @see https://docs.amplify.aws/cli/graphql/data-modeling/#customize-creation-and-update-timestamps\n *\n * @param definition modelDefinition to inspect.\n * @returns An object mapping `createdAt` and `updatedAt` to their field names.\n */\nconst getTimestampFields = definition => {\n  const modelAttributes = definition.attributes?.find(attr => attr.type === 'model');\n  const timestampFieldsMap = modelAttributes?.properties?.timestamps;\n  const defaultFields = {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  };\n  const customFields = timestampFieldsMap || {};\n  return {\n    ...defaultFields,\n    ...customFields\n  };\n};\nexport { DATASTORE, DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, DeferredCallbackResolver, DeferredPromise, ID, IDENTIFIER_KEY_SEPARATOR, NAMESPACES, STORAGE, SYNC, USER, asyncEvery, asyncFilter, asyncSome, directedValueEquality, errorMessages, establishRelationAndKeys, exhaustiveCheck, extractKeyIfExists, extractPrimaryKeyFieldNames, extractPrimaryKeyValues, extractPrimaryKeysAndValues, extractTargetNamesFromSrc, getIndex, getIndexFromAssociation, getIndexKeys, getNow, getStorename, getTimestampFields, inMemoryPagination, indexNameFromKeys, isAWSDate, isAWSDateTime, isAWSEmail, isAWSIPAddress, isAWSJSON, isAWSPhone, isAWSTime, isAWSTimestamp, isAWSURL, isIdManaged, isIdOptionallyManaged, isModelConstructor, isNonModelConstructor, isNullOrUndefined, isPrivateMode, isSafariCompatabilityMode, keysEqual, mergePatches, monotonicUlidFactory, processCompositeKeys, registerNonModelClass, sortCompareFunction, traverseModel, validatePredicate, validatePredicateField, valuesEqual };","map":{"version":3,"names":["ID","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","IDENTIFIER_KEY_SEPARATOR","errorMessages","idEmptyString","queryByPkWithCompositeKeyPresent","deleteByPkWithCompositeKeyPresent","observeWithObjectLiteral","NAMESPACES","DATASTORE","USER","SYNC","STORAGE","exhaustiveCheck","obj","throwOnError","Error","isNullOrUndefined","val","undefined","validatePredicate","model","groupType","predicatesOrGroups","filterType","isNegation","length","result","predicateOrGroup","isPredicateObj","field","operator","operand","value","validatePredicateField","isPredicateGroup","type","predicates","min","max","startsWith","indexOf","isModelConstructor","copyOf","nonModelClasses","WeakSet","registerNonModelClass","clazz","add","isNonModelConstructor","has","topologicallySortedModels","WeakMap","traverseModel","srcModelName","instance","namespace","modelInstanceCreator","getModelConstructorByModelName","modelConstructor","name","newInstance","unshift","modelName","item","set","Array","from","modelTopologicalOrdering","keys","sortedModels","get","sort","a","b","privateModeCheckResult","isPrivateMode","Promise","resolve","dbname","amplifyUuid","db","isPrivate","isNotPrivate","close","indexedDB","deleteDatabase","open","onerror","onsuccess","safariCompatabilityModeResult","isSafariCompatabilityMode","dbName","storeName","indexName","dbOpenRequest","onupgradeneeded","event","target","store","createObjectStore","autoIncrement","createIndex","rwTx","transaction","rwStore","objectStore","id","commit","tx","index","getRequest","error","HEX_TO_SHORT","i","encodedByte","toString","toLowerCase","getBytesFromHex","encoded","out","Uint8Array","slice","randomBytes","nBytes","str","WordArray","random","prng","monotonicUlidFactory","seed","ulid","monotonicFactory","getNow","performance","now","Date","sortCompareFunction","sortPredicates","compareFunction","predicate","sortDirection","sortMultiplier","SortDirection","ASCENDING","directedValueEquality","fromObject","againstObject","nullish","aKeys","Object","key","fromValue","againstValue","valuesEqual","valA","valB","nullishCompare","_a","_b","isArray","Set","Map","fromEntries","bKeys","aVal","bVal","inMemoryPagination","records","pagination","ModelSortPredicateCreator","getPredicates","compareFn","page","limit","start","Math","end","asyncSome","items","matches","asyncEvery","asyncFilter","results","push","isAWSDate","exec","isAWSTime","isAWSDateTime","isAWSTimestamp","String","isAWSEmail","isAWSJSON","JSON","parse","isAWSURL","AmplifyUrl","isAWSPhone","isAWSIPAddress","DeferredPromise","constructor","self","promise","reject","DeferredCallbackResolver","options","limitPromise","raceInFlight","callback","defaultErrorHandler","msg","errorHandler","maxInterval","startTimer","timerPromise","timer","setTimeout","LimitTimerRaceResolvedValues","TIMER","racePromises","winner","race","err","clear","clearTimeout","LIMIT","mergePatches","originalSource","oldPatches","newPatches","patchesToMerge","concat","patches","produce","draft","applyPatches","p","getStorename","processCompositeKeys","attributes","extractCompositeSortKey","properties","fields","sortKeyFields","compositeKeyFields","filter","isModelAttributeCompositeKey","map","combineIntersecting","reduce","combined","sortKeyFieldsSet","intersectingSetIdx","findIndex","existingSet","some","f","union","initial","extractKeyIfExists","modelDefinition","keyAttribute","find","isModelAttributeKey","extractPrimaryKeyFieldNames","isModelAttributePrimaryKey","extractPrimaryKeyValues","keyFields","extractPrimaryKeysAndValues","primaryKeysAndValues","forEach","isIdManaged","isIdOptionallyManaged","establishRelationAndKeys","relationship","models","mKey","indexes","relationTypes","attr","fieldAttribute","connectionType","association","fieldName","relationType","targetName","targetNames","associatedWith","extractTargetNamesFromSrc","idxName","indexNameFromKeys","idxExists","compositeKeys","attribute","primaryKey","unique","getIndex","rel","src","relItem","getIndexFromAssociation","associationIndex","prev","cur","idx","keysEqual","keysA","keysB","every","getIndexKeys","keyPath","getTimestampFields","definition","modelAttributes","timestampFieldsMap","timestamps","defaultFields","createdAt","updatedAt","customFields"],"sources":["/Users/raphaperso/Documents/Hub/FreeCodeCamp/amplify_notes/node_modules/@aws-amplify/datastore/src/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { monotonicFactory } from 'ulid';\nimport { amplifyUuid, AmplifyUrl, WordArray, } from '@aws-amplify/core/internals/utils';\nimport { produce, applyPatches } from 'immer';\nimport { isPredicateGroup, isPredicateObj, SortDirection, isModelAttributeKey, isModelAttributePrimaryKey, isModelAttributeCompositeKey, LimitTimerRaceResolvedValues, } from './types';\nimport { ModelSortPredicateCreator } from './predicates';\nexport const ID = 'id';\n/**\n * Used by the Async Storage Adapter to concatenate key values\n * for a record. For instance, if a model has the following keys:\n * `customId: ID! @primaryKey(sortKeyFields: [\"createdAt\"])`,\n * we concatenate the `customId` and `createdAt` as:\n * `12-234-5#2022-09-28T00:00:00.000Z`\n */\nexport const DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR = '#';\n/**\n * Used for generating spinal-cased index name from an array of\n * key field names.\n * E.g. for keys `[id, title]` => 'id-title'\n */\nexport const IDENTIFIER_KEY_SEPARATOR = '-';\nexport const errorMessages = {\n    idEmptyString: 'An index field cannot contain an empty string value',\n    queryByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be queried by a single key value. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n    deleteByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be deleted by a single key value, unless using a predicate. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n    observeWithObjectLiteral: 'Object literal syntax cannot be used with observe. Use a predicate instead: https://docs.amplify.aws/lib/datastore/data-access/q/platform/js/#predicates',\n};\nexport var NAMESPACES;\n(function (NAMESPACES) {\n    NAMESPACES[\"DATASTORE\"] = \"datastore\";\n    NAMESPACES[\"USER\"] = \"user\";\n    NAMESPACES[\"SYNC\"] = \"sync\";\n    NAMESPACES[\"STORAGE\"] = \"storage\";\n})(NAMESPACES || (NAMESPACES = {}));\nconst DATASTORE = NAMESPACES.DATASTORE;\nconst USER = NAMESPACES.USER;\nconst SYNC = NAMESPACES.SYNC;\nconst STORAGE = NAMESPACES.STORAGE;\nexport { USER, SYNC, STORAGE, DATASTORE };\nexport const exhaustiveCheck = (obj, throwOnError = true) => {\n    if (throwOnError) {\n        throw new Error(`Invalid ${obj}`);\n    }\n};\nexport const isNullOrUndefined = (val) => {\n    return typeof val === 'undefined' || val === undefined || val === null;\n};\nexport const validatePredicate = (model, groupType, predicatesOrGroups) => {\n    let filterType;\n    let isNegation = false;\n    if (predicatesOrGroups.length === 0) {\n        return true;\n    }\n    switch (groupType) {\n        case 'not':\n            filterType = 'every';\n            isNegation = true;\n            break;\n        case 'and':\n            filterType = 'every';\n            break;\n        case 'or':\n            filterType = 'some';\n            break;\n        default:\n            throw new Error(`Invalid ${groupType}`);\n    }\n    const result = predicatesOrGroups[filterType](predicateOrGroup => {\n        if (isPredicateObj(predicateOrGroup)) {\n            const { field, operator, operand } = predicateOrGroup;\n            const value = model[field];\n            return validatePredicateField(value, operator, operand);\n        }\n        if (isPredicateGroup(predicateOrGroup)) {\n            const { type, predicates } = predicateOrGroup;\n            return validatePredicate(model, type, predicates);\n        }\n        throw new Error('Not a predicate or group');\n    });\n    return isNegation ? !result : result;\n};\nexport const validatePredicateField = (value, operator, operand) => {\n    switch (operator) {\n        case 'ne':\n            return value !== operand;\n        case 'eq':\n            return value === operand;\n        case 'le':\n            return value <= operand;\n        case 'lt':\n            return value < operand;\n        case 'ge':\n            return value >= operand;\n        case 'gt':\n            return value > operand;\n        case 'between':\n            const [min, max] = operand;\n            return value >= min && value <= max;\n        case 'beginsWith':\n            return (!isNullOrUndefined(value) &&\n                value.startsWith(operand));\n        case 'contains':\n            return (!isNullOrUndefined(value) &&\n                value.indexOf(operand) > -1);\n        case 'notContains':\n            return (isNullOrUndefined(value) ||\n                value.indexOf(operand) === -1);\n        default:\n            return false;\n    }\n};\nexport const isModelConstructor = (obj) => {\n    return (obj && typeof obj.copyOf === 'function');\n};\nconst nonModelClasses = new WeakSet();\nexport function registerNonModelClass(clazz) {\n    nonModelClasses.add(clazz);\n}\nexport const isNonModelConstructor = (obj) => {\n    return nonModelClasses.has(obj);\n};\nconst topologicallySortedModels = new WeakMap();\nexport const traverseModel = (srcModelName, instance, namespace, modelInstanceCreator, getModelConstructorByModelName) => {\n    const modelConstructor = getModelConstructorByModelName(namespace.name, srcModelName);\n    const result = [];\n    const newInstance = modelConstructor.copyOf(instance, () => { });\n    result.unshift({\n        modelName: srcModelName,\n        item: newInstance,\n        instance: newInstance,\n    });\n    if (!topologicallySortedModels.has(namespace)) {\n        topologicallySortedModels.set(namespace, Array.from(namespace.modelTopologicalOrdering.keys()));\n    }\n    const sortedModels = topologicallySortedModels.get(namespace);\n    result.sort((a, b) => {\n        return (sortedModels.indexOf(a.modelName) - sortedModels.indexOf(b.modelName));\n    });\n    return result;\n};\nlet privateModeCheckResult;\nexport const isPrivateMode = () => {\n    return new Promise(resolve => {\n        const dbname = amplifyUuid();\n        let db;\n        const isPrivate = () => {\n            privateModeCheckResult = false;\n            resolve(true);\n        };\n        const isNotPrivate = async () => {\n            if (db && db.result && typeof db.result.close === 'function') {\n                await db.result.close();\n            }\n            await indexedDB.deleteDatabase(dbname);\n            privateModeCheckResult = true;\n            return resolve(false);\n        };\n        if (privateModeCheckResult === true) {\n            return isNotPrivate();\n        }\n        if (privateModeCheckResult === false) {\n            return isPrivate();\n        }\n        if (indexedDB === null)\n            return isPrivate();\n        db = indexedDB.open(dbname);\n        db.onerror = isPrivate;\n        db.onsuccess = isNotPrivate;\n    });\n};\nlet safariCompatabilityModeResult;\n/**\n * Whether the browser's implementation of IndexedDB breaks on array lookups\n * against composite indexes whose keypath contains a single column.\n *\n * E.g., Whether `store.createIndex(indexName, ['id'])` followed by\n * `store.index(indexName).get([1])` will *ever* return records.\n *\n * In all known, modern Safari browsers as of Q4 2022, the query against an index like\n * this will *always* return `undefined`. So, the index needs to be created as a scalar.\n */\nexport const isSafariCompatabilityMode = async () => {\n    try {\n        const dbName = amplifyUuid();\n        const storeName = 'indexedDBFeatureProbeStore';\n        const indexName = 'idx';\n        if (indexedDB === null)\n            return false;\n        if (safariCompatabilityModeResult !== undefined) {\n            return safariCompatabilityModeResult;\n        }\n        const db = await new Promise(resolve => {\n            const dbOpenRequest = indexedDB.open(dbName);\n            dbOpenRequest.onerror = () => resolve(false);\n            dbOpenRequest.onsuccess = () => {\n                const db = dbOpenRequest.result;\n                resolve(db);\n            };\n            dbOpenRequest.onupgradeneeded = (event) => {\n                const db = event?.target?.result;\n                db.onerror = () => resolve(false);\n                const store = db.createObjectStore(storeName, {\n                    autoIncrement: true,\n                });\n                store.createIndex(indexName, ['id']);\n            };\n        });\n        if (!db) {\n            throw new Error('Could not open probe DB');\n        }\n        const rwTx = db.transaction(storeName, 'readwrite');\n        const rwStore = rwTx.objectStore(storeName);\n        rwStore.add({\n            id: 1,\n        });\n        rwTx.commit();\n        const result = await new Promise(resolve => {\n            const tx = db.transaction(storeName, 'readonly');\n            const store = tx.objectStore(storeName);\n            const index = store.index(indexName);\n            const getRequest = index.get([1]);\n            getRequest.onerror = () => resolve(false);\n            getRequest.onsuccess = (event) => {\n                resolve(event?.target?.result);\n            };\n        });\n        if (db && typeof db.close === 'function') {\n            await db.close();\n        }\n        await indexedDB.deleteDatabase(dbName);\n        if (result === undefined) {\n            safariCompatabilityModeResult = true;\n        }\n        else {\n            safariCompatabilityModeResult = false;\n        }\n    }\n    catch (error) {\n        safariCompatabilityModeResult = false;\n    }\n    return safariCompatabilityModeResult;\n};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    HEX_TO_SHORT[encodedByte] = i;\n}\nconst getBytesFromHex = (encoded) => {\n    if (encoded.length % 2 !== 0) {\n        throw new Error('Hex encoded strings must have an even number length');\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n};\nconst randomBytes = (nBytes) => {\n    const str = new WordArray().random(nBytes).toString();\n    return getBytesFromHex(str);\n};\nconst prng = () => randomBytes(1)[0] / 0xff;\nexport function monotonicUlidFactory(seed) {\n    const ulid = monotonicFactory(prng);\n    return () => {\n        return ulid(seed);\n    };\n}\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\nexport function getNow() {\n    if (typeof performance !== 'undefined' &&\n        performance &&\n        typeof performance.now === 'function') {\n        return performance.now() | 0; // convert to integer\n    }\n    else {\n        return Date.now();\n    }\n}\nexport function sortCompareFunction(sortPredicates) {\n    return function compareFunction(a, b) {\n        // enable multi-field sort by iterating over predicates until\n        // a comparison returns -1 or 1\n        for (const predicate of sortPredicates) {\n            const { field, sortDirection } = predicate;\n            // reverse result when direction is descending\n            const sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n            if (a[field] < b[field]) {\n                return -1 * sortMultiplier;\n            }\n            if (a[field] > b[field]) {\n                return 1 * sortMultiplier;\n            }\n        }\n        return 0;\n    };\n}\n/* deep directed comparison ensuring that all fields on \"from\" object exist and\n * are equal to values on an \"against\" object\n *\n * Note: This same guarauntee is not applied for values on \"against\" that aren't on \"from\"\n *\n * @param fromObject - The object that may be an equal subset of the againstObject.\n * @param againstObject - The object that may be an equal superset of the fromObject.\n *\n * @returns True if fromObject is a equal subset of againstObject and False otherwise.\n */\nexport function directedValueEquality(fromObject, againstObject, nullish = false) {\n    const aKeys = Object.keys(fromObject);\n    for (const key of aKeys) {\n        const fromValue = fromObject[key];\n        const againstValue = againstObject[key];\n        if (!valuesEqual(fromValue, againstValue, nullish)) {\n            return false;\n        }\n    }\n    return true;\n}\n// deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\nexport function valuesEqual(valA, valB, nullish = false) {\n    let a = valA;\n    let b = valB;\n    const nullishCompare = (_a, _b) => {\n        return ((_a === undefined || _a === null) && (_b === undefined || _b === null));\n    };\n    // if one of the values is a primitive and the other is an object\n    if ((a instanceof Object && !(b instanceof Object)) ||\n        (!(a instanceof Object) && b instanceof Object)) {\n        return false;\n    }\n    // compare primitive types\n    if (!(a instanceof Object)) {\n        if (nullish && nullishCompare(a, b)) {\n            return true;\n        }\n        return a === b;\n    }\n    // make sure object types match\n    if ((Array.isArray(a) && !Array.isArray(b)) ||\n        (Array.isArray(b) && !Array.isArray(a))) {\n        return false;\n    }\n    if (a instanceof Set && b instanceof Set) {\n        a = [...a];\n        b = [...b];\n    }\n    if (a instanceof Map && b instanceof Map) {\n        a = Object.fromEntries(a);\n        b = Object.fromEntries(b);\n    }\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    // last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n    if (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n        return false;\n    }\n    // iterate through the longer set of keys\n    // e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n    // we want to iterate through bKeys\n    const keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n    for (const key of keys) {\n        const aVal = a[key];\n        const bVal = b[key];\n        if (!valuesEqual(aVal, bVal, nullish)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Statelessly extracts the specified page from an array.\n *\n * @param records - The source array to extract a page from.\n * @param pagination - A definition of the page to extract.\n * @returns This items from `records` matching the `pagination` definition.\n */\nexport function inMemoryPagination(records, pagination) {\n    if (pagination && records.length > 1) {\n        if (pagination.sort) {\n            const sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n            if (sortPredicates.length) {\n                const compareFn = sortCompareFunction(sortPredicates);\n                records.sort(compareFn);\n            }\n        }\n        const { page = 0, limit = 0 } = pagination;\n        const start = Math.max(0, page * limit) || 0;\n        const end = limit > 0 ? start + limit : records.length;\n        return records.slice(start, end);\n    }\n    return records;\n}\n/**\n * An `aysnc` implementation of `Array.some()`. Returns as soon as a match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if \"some\" items match; `false` otherwise.\n */\nexport async function asyncSome(items, matches) {\n    for (const item of items) {\n        if (await matches(item)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * An `aysnc` implementation of `Array.every()`. Returns as soon as a non-match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if every item matches; `false` otherwise.\n */\nexport async function asyncEvery(items, matches) {\n    for (const item of items) {\n        if (!(await matches(item))) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * An `async` implementation of `Array.filter()`. Returns after all items have been filtered.\n * TODO: Return AsyncIterable.\n * @param items The items to filter.\n * @param matches The `async` matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<T>` of matching items.\n */\nexport async function asyncFilter(items, matches) {\n    const results = [];\n    for (const item of items) {\n        if (await matches(item)) {\n            results.push(item);\n        }\n    }\n    return results;\n}\nexport const isAWSDate = (val) => {\n    return !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport const isAWSTime = (val) => {\n    return !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport const isAWSDateTime = (val) => {\n    return !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport const isAWSTimestamp = (val) => {\n    return !!/^\\d+$/.exec(String(val));\n};\nexport const isAWSEmail = (val) => {\n    return !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(val);\n};\nexport const isAWSJSON = (val) => {\n    try {\n        JSON.parse(val);\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\nexport const isAWSURL = (val) => {\n    try {\n        return !!new AmplifyUrl(val);\n    }\n    catch {\n        return false;\n    }\n};\nexport const isAWSPhone = (val) => {\n    return !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\nexport const isAWSIPAddress = (val) => {\n    return !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(val);\n};\nexport class DeferredPromise {\n    constructor() {\n        const self = this;\n        this.promise = new Promise((resolve, reject) => {\n            self.resolve = resolve;\n            self.reject = reject;\n        });\n    }\n}\nexport class DeferredCallbackResolver {\n    constructor(options) {\n        this.limitPromise = new DeferredPromise();\n        this.raceInFlight = false;\n        this.callback = () => { };\n        this.defaultErrorHandler = (msg = 'DeferredCallbackResolver error') => {\n            throw new Error(msg);\n        };\n        this.callback = options.callback;\n        this.errorHandler = options.errorHandler || this.defaultErrorHandler;\n        this.maxInterval = options.maxInterval || 2000;\n    }\n    startTimer() {\n        this.timerPromise = new Promise((resolve, reject) => {\n            this.timer = setTimeout(() => {\n                resolve(LimitTimerRaceResolvedValues.TIMER);\n            }, this.maxInterval);\n        });\n    }\n    async racePromises() {\n        let winner;\n        try {\n            this.raceInFlight = true;\n            this.startTimer();\n            winner = await Promise.race([\n                this.timerPromise,\n                this.limitPromise.promise,\n            ]);\n            this.callback();\n        }\n        catch (err) {\n            this.errorHandler(err);\n        }\n        finally {\n            // reset for the next race\n            this.clear();\n            this.raceInFlight = false;\n            this.limitPromise = new DeferredPromise();\n            return winner;\n        }\n    }\n    start() {\n        if (!this.raceInFlight)\n            this.racePromises();\n    }\n    clear() {\n        clearTimeout(this.timer);\n    }\n    resolve() {\n        this.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n    }\n}\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\nexport function mergePatches(originalSource, oldPatches, newPatches) {\n    const patchesToMerge = oldPatches.concat(newPatches);\n    let patches;\n    produce(originalSource, draft => {\n        applyPatches(draft, patchesToMerge);\n    }, p => {\n        patches = p;\n    });\n    return patches;\n}\nexport const getStorename = (namespace, modelName) => {\n    const storeName = `${namespace}_${modelName}`;\n    return storeName;\n};\n//#region Key Utils\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n    There are some very particular rules regarding which fields must be included in the update mutation input\n    The field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n    To summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n     1. all of the other fields in that composite sort key\n     2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n     E.g.,\n     Model @model\n        @key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n        @key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n        @key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n    Model.a is updated => include ['a', 'b', 'c', 'd']\n    Model.c is updated => include ['a', 'b', 'c', 'd']\n    Model.d is updated => include ['a', 'b', 'c', 'd']\n    Model.x is updated => include ['x', 'y', 'z']\n\n    This function accepts a model's attributes and returns grouped sets of composite key fields\n    Using our example Model above, the function will return:\n    [\n        Set('a', 'b', 'c', 'd'),\n        Set('x', 'y', 'z'),\n    ]\n\n    This gives us the opportunity to correctly include the required fields for composite keys\n    When crafting the mutation input in Storage.getUpdateMutationInput\n\n    See 'processCompositeKeys' test in util.test.ts for more examples\n*/\nexport const processCompositeKeys = (attributes) => {\n    const extractCompositeSortKey = ({ properties: { \n    // ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n    fields: [, ...sortKeyFields], }, }) => sortKeyFields;\n    const compositeKeyFields = attributes\n        .filter(isModelAttributeCompositeKey)\n        .map(extractCompositeSortKey);\n    /*\n        if 2 sets of fields have any intersecting fields => combine them into 1 union set\n        e.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n    */\n    const combineIntersecting = (fields) => fields.reduce((combined, sortKeyFields) => {\n        const sortKeyFieldsSet = new Set(sortKeyFields);\n        if (combined.length === 0) {\n            combined.push(sortKeyFieldsSet);\n            return combined;\n        }\n        // does the current set share values with another set we've already added to `combined`?\n        const intersectingSetIdx = combined.findIndex(existingSet => {\n            return [...existingSet].some(f => sortKeyFieldsSet.has(f));\n        });\n        if (intersectingSetIdx > -1) {\n            const union = new Set([\n                ...combined[intersectingSetIdx],\n                ...sortKeyFieldsSet,\n            ]);\n            // combine the current set with the intersecting set we found above\n            combined[intersectingSetIdx] = union;\n        }\n        else {\n            // none of the sets in `combined` have intersecting values with the current set\n            combined.push(sortKeyFieldsSet);\n        }\n        return combined;\n    }, []);\n    const initial = combineIntersecting(compositeKeyFields);\n    // a single pass pay not be enough to correctly combine all the fields\n    // call the function once more to get a final merged list of sets\n    const combined = combineIntersecting(initial);\n    return combined;\n};\nexport const extractKeyIfExists = (modelDefinition) => {\n    const keyAttribute = modelDefinition?.attributes?.find(isModelAttributeKey);\n    return keyAttribute;\n};\nexport const extractPrimaryKeyFieldNames = (modelDefinition) => {\n    const keyAttribute = extractKeyIfExists(modelDefinition);\n    if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n        return keyAttribute.properties.fields;\n    }\n    return [ID];\n};\nexport const extractPrimaryKeyValues = (model, keyFields) => {\n    return keyFields.map(key => model[key]);\n};\nexport const extractPrimaryKeysAndValues = (model, keyFields) => {\n    const primaryKeysAndValues = {};\n    keyFields.forEach(key => (primaryKeysAndValues[key] = model[key]));\n    return primaryKeysAndValues;\n};\n// IdentifierFields<ManagedIdentifier>\n// Default behavior without explicit @primaryKey defined\nexport const isIdManaged = (modelDefinition) => {\n    const keyAttribute = extractKeyIfExists(modelDefinition);\n    if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n        return false;\n    }\n    return true;\n};\n// IdentifierFields<OptionallyManagedIdentifier>\n// @primaryKey with explicit `id` in the PK. Single key or composite\nexport const isIdOptionallyManaged = (modelDefinition) => {\n    const keyAttribute = extractKeyIfExists(modelDefinition);\n    if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n        return keyAttribute.properties.fields[0] === ID;\n    }\n    return false;\n};\nexport const establishRelationAndKeys = (namespace) => {\n    const relationship = {};\n    const keys = {};\n    Object.keys(namespace.models).forEach((mKey) => {\n        relationship[mKey] = { indexes: [], relationTypes: [] };\n        keys[mKey] = {};\n        const model = namespace.models[mKey];\n        Object.keys(model.fields).forEach((attr) => {\n            const fieldAttribute = model.fields[attr];\n            if (typeof fieldAttribute.type === 'object' &&\n                'model' in fieldAttribute.type) {\n                const connectionType = fieldAttribute.association.connectionType;\n                relationship[mKey].relationTypes.push({\n                    fieldName: fieldAttribute.name,\n                    modelName: fieldAttribute.type.model,\n                    relationType: connectionType,\n                    targetName: fieldAttribute.association['targetName'],\n                    targetNames: fieldAttribute.association['targetNames'],\n                    associatedWith: fieldAttribute.association['associatedWith'],\n                });\n                if (connectionType === 'BELONGS_TO') {\n                    const targetNames = extractTargetNamesFromSrc(fieldAttribute.association);\n                    if (targetNames) {\n                        const idxName = indexNameFromKeys(targetNames);\n                        const idxExists = relationship[mKey].indexes.find(([index]) => index === idxName);\n                        if (!idxExists) {\n                            relationship[mKey].indexes.push([idxName, targetNames]);\n                        }\n                    }\n                }\n            }\n        });\n        if (model.attributes) {\n            keys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n            for (const attribute of model.attributes) {\n                if (!isModelAttributeKey(attribute)) {\n                    continue;\n                }\n                const { fields } = attribute.properties;\n                if (isModelAttributePrimaryKey(attribute)) {\n                    keys[mKey].primaryKey = fields;\n                    continue;\n                }\n                // create indexes for all other keys\n                const idxName = indexNameFromKeys(fields);\n                const idxExists = relationship[mKey].indexes.find(([index]) => index === idxName);\n                if (!idxExists) {\n                    relationship[mKey].indexes.push([idxName, fields]);\n                }\n            }\n        }\n        // set 'id' as the PK for models without a custom PK explicitly defined\n        if (!keys[mKey].primaryKey) {\n            keys[mKey].primaryKey = [ID];\n        }\n        // create primary index\n        relationship[mKey].indexes.push([\n            'byPk',\n            keys[mKey].primaryKey,\n            { unique: true },\n        ]);\n    });\n    return [relationship, keys];\n};\nexport const getIndex = (rel, src) => {\n    let indexName;\n    rel.some((relItem) => {\n        if (relItem.modelName === src) {\n            const targetNames = extractTargetNamesFromSrc(relItem);\n            indexName = targetNames && indexNameFromKeys(targetNames);\n            return true;\n        }\n    });\n    return indexName;\n};\nexport const getIndexFromAssociation = (indexes, src) => {\n    let indexName;\n    if (Array.isArray(src)) {\n        indexName = indexNameFromKeys(src);\n    }\n    else {\n        indexName = src;\n    }\n    const associationIndex = indexes.find(([idxName]) => idxName === indexName);\n    return associationIndex && associationIndex[0];\n};\n/**\n * Backwards-compatability for schema generated prior to custom primary key support:\nthe single field `targetName` has been replaced with an array of `targetNames`.\n`targetName` and `targetNames` are exclusive (will never exist on the same schema)\n * @param src {RelationType | ModelAssociation | undefined}\n * @returns array of targetNames, or `undefined`\n */\nexport const extractTargetNamesFromSrc = (src) => {\n    const targetName = src?.targetName;\n    const targetNames = src?.targetNames;\n    if (Array.isArray(targetNames)) {\n        return targetNames;\n    }\n    else if (typeof targetName === 'string') {\n        return [targetName];\n    }\n    else {\n        return undefined;\n    }\n};\n// Generates spinal-cased index name from an array of key field names\n// E.g. for keys `[id, title]` => 'id-title'\nexport const indexNameFromKeys = (keys) => {\n    return keys.reduce((prev, cur, idx) => {\n        if (idx === 0) {\n            return cur;\n        }\n        return `${prev}${IDENTIFIER_KEY_SEPARATOR}${cur}`;\n    }, '');\n};\nexport const keysEqual = (keysA, keysB) => {\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    return keysA.every((key, idx) => key === keysB[idx]);\n};\n// Returns primary keys for a model\nexport const getIndexKeys = (namespace, modelName) => {\n    const keyPath = namespace?.keys?.[modelName]?.primaryKey;\n    if (keyPath) {\n        return keyPath;\n    }\n    return [ID];\n};\n//#endregion\n/**\n * Determine what the managed timestamp field names are for the given model definition\n * and return the mapping.\n *\n * All timestamp fields are included in the mapping, regardless of whether the final field\n * names are the defaults or customized in the `@model` directive.\n *\n * @see https://docs.amplify.aws/cli/graphql/data-modeling/#customize-creation-and-update-timestamps\n *\n * @param definition modelDefinition to inspect.\n * @returns An object mapping `createdAt` and `updatedAt` to their field names.\n */\nexport const getTimestampFields = (definition) => {\n    const modelAttributes = definition.attributes?.find(attr => attr.type === 'model');\n    const timestampFieldsMap = modelAttributes?.properties?.timestamps;\n    const defaultFields = {\n        createdAt: 'createdAt',\n        updatedAt: 'updatedAt',\n    };\n    const customFields = timestampFieldsMap || {};\n    return {\n        ...defaultFields,\n        ...customFields,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}