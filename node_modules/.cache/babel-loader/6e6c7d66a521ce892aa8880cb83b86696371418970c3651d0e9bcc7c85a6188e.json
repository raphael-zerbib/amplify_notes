{"ast":null,"code":"import { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { RestApiError } from '../errors/RestApiError.mjs';\nimport { assertValidationError } from '../errors/assertValidatonError.mjs';\nimport { RestApiValidationErrorCode, validationErrorMap } from '../errors/validation.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resolve the REST API request URL by:\n * 1. Loading the REST API endpoint from the Amplify configuration with corresponding API name.\n * 2. Appending the path to the endpoint.\n * 3. Merge the query parameters from path and the queryParameter argument which is taken from the public REST API\n *   options.\n * 4. Validating the resulting URL string.\n *\n * @internal\n */\nconst resolveApiUrl = (amplify, apiName, path, queryParams) => {\n  var _amplify$getConfig;\n  const urlStr = (_amplify$getConfig = amplify.getConfig()) === null || _amplify$getConfig === void 0 || (_amplify$getConfig = _amplify$getConfig.API) === null || _amplify$getConfig === void 0 || (_amplify$getConfig = _amplify$getConfig.REST) === null || _amplify$getConfig === void 0 || (_amplify$getConfig = _amplify$getConfig[apiName]) === null || _amplify$getConfig === void 0 ? void 0 : _amplify$getConfig.endpoint;\n  assertValidationError(!!urlStr, RestApiValidationErrorCode.InvalidApiName);\n  try {\n    const url = new AmplifyUrl(urlStr + path);\n    if (queryParams) {\n      const mergedQueryParams = new AmplifyUrlSearchParams(url.searchParams);\n      Object.entries(queryParams).forEach(_ref => {\n        let [key, value] = _ref;\n        mergedQueryParams.set(key, value);\n      });\n      url.search = new AmplifyUrlSearchParams(mergedQueryParams).toString();\n    }\n    return url;\n  } catch (error) {\n    throw new RestApiError({\n      name: RestApiValidationErrorCode.InvalidApiName,\n      ...validationErrorMap[RestApiValidationErrorCode.InvalidApiName],\n      recoverySuggestion: \"Please make sure the REST endpoint URL is a valid URL string. Got \".concat(urlStr)\n    });\n  }\n};\nexport { resolveApiUrl };","map":{"version":3,"names":["resolveApiUrl","amplify","apiName","path","queryParams","_amplify$getConfig","urlStr","getConfig","API","REST","endpoint","assertValidationError","RestApiValidationErrorCode","InvalidApiName","url","AmplifyUrl","mergedQueryParams","AmplifyUrlSearchParams","searchParams","Object","entries","forEach","_ref","key","value","set","search","toString","error","RestApiError","name","validationErrorMap","recoverySuggestion","concat"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-rest/src/utils/resolveApiUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { RestApiError, RestApiValidationErrorCode, assertValidationError, validationErrorMap, } from '../errors';\n/**\n * Resolve the REST API request URL by:\n * 1. Loading the REST API endpoint from the Amplify configuration with corresponding API name.\n * 2. Appending the path to the endpoint.\n * 3. Merge the query parameters from path and the queryParameter argument which is taken from the public REST API\n *   options.\n * 4. Validating the resulting URL string.\n *\n * @internal\n */\nexport const resolveApiUrl = (amplify, apiName, path, queryParams) => {\n    const urlStr = amplify.getConfig()?.API?.REST?.[apiName]?.endpoint;\n    assertValidationError(!!urlStr, RestApiValidationErrorCode.InvalidApiName);\n    try {\n        const url = new AmplifyUrl(urlStr + path);\n        if (queryParams) {\n            const mergedQueryParams = new AmplifyUrlSearchParams(url.searchParams);\n            Object.entries(queryParams).forEach(([key, value]) => {\n                mergedQueryParams.set(key, value);\n            });\n            url.search = new AmplifyUrlSearchParams(mergedQueryParams).toString();\n        }\n        return url;\n    }\n    catch (error) {\n        throw new RestApiError({\n            name: RestApiValidationErrorCode.InvalidApiName,\n            ...validationErrorMap[RestApiValidationErrorCode.InvalidApiName],\n            recoverySuggestion: `Please make sure the REST endpoint URL is a valid URL string. Got ${urlStr}`,\n        });\n    }\n};\n"],"mappings":";;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,aAAa,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,WAAW,KAAK;EAAA,IAAAC,kBAAA;EAClE,MAAMC,MAAM,IAAAD,kBAAA,GAAGJ,OAAO,CAACM,SAAS,EAAE,cAAAF,kBAAA,gBAAAA,kBAAA,GAAnBA,kBAAA,CAAqBG,GAAG,cAAAH,kBAAA,gBAAAA,kBAAA,GAAxBA,kBAAA,CAA0BI,IAAI,cAAAJ,kBAAA,gBAAAA,kBAAA,GAA9BA,kBAAA,CAAiCH,OAAO,CAAC,cAAAG,kBAAA,uBAAzCA,kBAAA,CAA2CK,QAAQ;EAClEC,qBAAqB,CAAC,CAAC,CAACL,MAAM,EAAEM,0BAA0B,CAACC,cAAc,CAAC;EAC1E,IAAI;IACA,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACT,MAAM,GAAGH,IAAI,CAAC;IACzC,IAAIC,WAAW,EAAE;MACb,MAAMY,iBAAiB,GAAG,IAAIC,sBAAsB,CAACH,GAAG,CAACI,YAAY,CAAC;MACtEC,MAAM,CAACC,OAAO,CAAChB,WAAW,CAAC,CAACiB,OAAO,CAACC,IAAA,IAAkB;QAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;QAC7CN,iBAAiB,CAACS,GAAG,CAACF,GAAG,EAAEC,KAAK,CAAC;MACjD,CAAa,CAAC;MACFV,GAAG,CAACY,MAAM,GAAG,IAAIT,sBAAsB,CAACD,iBAAiB,CAAC,CAACW,QAAQ,EAAE;IACjF;IACQ,OAAOb,GAAG;EAClB,CAAK,CACD,OAAOc,KAAK,EAAE;IACV,MAAM,IAAIC,YAAY,CAAC;MACnBC,IAAI,EAAElB,0BAA0B,CAACC,cAAc;MAC/C,GAAGkB,kBAAkB,CAACnB,0BAA0B,CAACC,cAAc,CAAC;MAChEmB,kBAAkB,uEAAAC,MAAA,CAAuE3B,MAAM;IAC3G,CAAS,CAAC;EACV;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}