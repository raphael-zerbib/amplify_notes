{"ast":null,"code":"import { generateGraphQLDocument, buildGraphQLVariables, authModeParams, getCustomHeaders, flattenItems, initializeModel } from '../APIClient.mjs';\nfunction listFactory(client, modelIntrospection, model) {\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const listWithContext = async (contextSpec, args) => {\n    return _list(client, modelIntrospection, model, args, contextSpec);\n  };\n  const list = async args => {\n    return _list(client, modelIntrospection, model, args);\n  };\n  return context ? listWithContext : list;\n}\nasync function _list(client, modelIntrospection, model, args, contextSpec) {\n  const {\n    name\n  } = model;\n  const query = generateGraphQLDocument(modelIntrospection, name, 'LIST', args);\n  const variables = buildGraphQLVariables(model, 'LIST', args, modelIntrospection);\n  try {\n    const auth = authModeParams(client, args);\n    const headers = getCustomHeaders(client, args === null || args === void 0 ? void 0 : args.headers);\n    const {\n      data,\n      extensions\n    } = !!contextSpec ? await client.graphql(contextSpec, {\n      ...auth,\n      query,\n      variables\n    }, headers) : await client.graphql({\n      ...auth,\n      query,\n      variables\n    }, headers);\n    // flatten response\n    if (data !== undefined) {\n      const [key] = Object.keys(data);\n      if (data[key].items) {\n        const flattenedResult = flattenItems(data)[key];\n        // don't init if custom selection set\n        if (args !== null && args !== void 0 && args.selectionSet) {\n          return {\n            data: flattenedResult,\n            nextToken: data[key].nextToken,\n            extensions\n          };\n        } else {\n          const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n          return {\n            data: initialized,\n            nextToken: data[key].nextToken,\n            extensions\n          };\n        }\n      }\n      return {\n        data: data[key],\n        nextToken: data[key].nextToken,\n        extensions\n      };\n    }\n  } catch (error) {\n    if (error.errors) {\n      // graphql errors pass through\n      return error;\n    } else {\n      // non-graphql errors re re-thrown\n      throw error;\n    }\n  }\n}\nexport { listFactory };","map":{"version":3,"names":["listFactory","client","modelIntrospection","model","context","arguments","length","undefined","listWithContext","contextSpec","args","_list","list","name","query","generateGraphQLDocument","variables","buildGraphQLVariables","auth","authModeParams","headers","getCustomHeaders","data","extensions","graphql","key","Object","keys","items","flattenedResult","flattenItems","selectionSet","nextToken","initialized","initializeModel","authMode","authToken","error","errors"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/api-graphql/src/internals/operations/list.ts"],"sourcesContent":["import { initializeModel, generateGraphQLDocument, buildGraphQLVariables, flattenItems, authModeParams, getCustomHeaders, } from '../APIClient';\nexport function listFactory(client, modelIntrospection, model, context = false) {\n    const listWithContext = async (contextSpec, args) => {\n        return _list(client, modelIntrospection, model, args, contextSpec);\n    };\n    const list = async (args) => {\n        return _list(client, modelIntrospection, model, args);\n    };\n    return context ? listWithContext : list;\n}\nasync function _list(client, modelIntrospection, model, args, contextSpec) {\n    const { name } = model;\n    const query = generateGraphQLDocument(modelIntrospection, name, 'LIST', args);\n    const variables = buildGraphQLVariables(model, 'LIST', args, modelIntrospection);\n    try {\n        const auth = authModeParams(client, args);\n        const headers = getCustomHeaders(client, args?.headers);\n        const { data, extensions } = !!contextSpec\n            ? (await client.graphql(contextSpec, {\n                ...auth,\n                query,\n                variables,\n            }, headers))\n            : (await client.graphql({\n                ...auth,\n                query,\n                variables,\n            }, headers));\n        // flatten response\n        if (data !== undefined) {\n            const [key] = Object.keys(data);\n            if (data[key].items) {\n                const flattenedResult = flattenItems(data)[key];\n                // don't init if custom selection set\n                if (args?.selectionSet) {\n                    return {\n                        data: flattenedResult,\n                        nextToken: data[key].nextToken,\n                        extensions,\n                    };\n                }\n                else {\n                    const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n                    return {\n                        data: initialized,\n                        nextToken: data[key].nextToken,\n                        extensions,\n                    };\n                }\n            }\n            return {\n                data: data[key],\n                nextToken: data[key].nextToken,\n                extensions,\n            };\n        }\n    }\n    catch (error) {\n        if (error.errors) {\n            // graphql errors pass through\n            return error;\n        }\n        else {\n            // non-graphql errors re re-thrown\n            throw error;\n        }\n    }\n}\n"],"mappings":";AACO,SAASA,WAAWA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,KAAK,EAAmB;EAAA,IAAjBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC1E,MAAMG,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAEC,IAAI,KAAK;IACjD,OAAOC,KAAK,CAACV,MAAM,EAAEC,kBAAkB,EAAEC,KAAK,EAAEO,IAAI,EAAED,WAAW,CAAC;EAC1E,CAAK;EACD,MAAMG,IAAI,GAAG,MAAOF,IAAI,IAAK;IACzB,OAAOC,KAAK,CAACV,MAAM,EAAEC,kBAAkB,EAAEC,KAAK,EAAEO,IAAI,CAAC;EAC7D,CAAK;EACD,OAAON,OAAO,GAAGI,eAAe,GAAGI,IAAI;AAC3C;AACA,eAAeD,KAAKA,CAACV,MAAM,EAAEC,kBAAkB,EAAEC,KAAK,EAAEO,IAAI,EAAED,WAAW,EAAE;EACvE,MAAM;IAAEI;EAAI,CAAE,GAAGV,KAAK;EACtB,MAAMW,KAAK,GAAGC,uBAAuB,CAACb,kBAAkB,EAAEW,IAAI,EAAE,MAAM,EAAEH,IAAI,CAAC;EAC7E,MAAMM,SAAS,GAAGC,qBAAqB,CAACd,KAAK,EAAE,MAAM,EAAEO,IAAI,EAAER,kBAAkB,CAAC;EAChF,IAAI;IACA,MAAMgB,IAAI,GAAGC,cAAc,CAAClB,MAAM,EAAES,IAAI,CAAC;IACzC,MAAMU,OAAO,GAAGC,gBAAgB,CAACpB,MAAM,EAAES,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,OAAO,CAAC;IACvD,MAAM;MAAEE,IAAI;MAAEC;IAAU,CAAE,GAAG,CAAC,CAACd,WAAW,GACnC,MAAMR,MAAM,CAACuB,OAAO,CAACf,WAAW,EAAE;MACjC,GAAGS,IAAI;MACPJ,KAAK;MACLE;IAChB,CAAa,EAAEI,OAAO,CAAC,GACR,MAAMnB,MAAM,CAACuB,OAAO,CAAC;MACpB,GAAGN,IAAI;MACPJ,KAAK;MACLE;IAChB,CAAa,EAAEI,OAAO,CAAE;IACxB;IACQ,IAAIE,IAAI,KAAKf,SAAS,EAAE;MACpB,MAAM,CAACkB,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC;MAC/B,IAAIA,IAAI,CAACG,GAAG,CAAC,CAACG,KAAK,EAAE;QACjB,MAAMC,eAAe,GAAGC,YAAY,CAACR,IAAI,CAAC,CAACG,GAAG,CAAC;QAC/D;QACgB,IAAIf,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEqB,YAAY,EAAE;UACpB,OAAO;YACHT,IAAI,EAAEO,eAAe;YACrBG,SAAS,EAAEV,IAAI,CAACG,GAAG,CAAC,CAACO,SAAS;YAC9BT;UACxB,CAAqB;QACrB,CAAiB,MACI;UACD,MAAMU,WAAW,GAAGC,eAAe,CAACjC,MAAM,EAAEY,IAAI,EAAEgB,eAAe,EAAE3B,kBAAkB,EAAEgB,IAAI,CAACiB,QAAQ,EAAEjB,IAAI,CAACkB,SAAS,EAAE,CAAC,CAAC3B,WAAW,CAAC;UACpI,OAAO;YACHa,IAAI,EAAEW,WAAW;YACjBD,SAAS,EAAEV,IAAI,CAACG,GAAG,CAAC,CAACO,SAAS;YAC9BT;UACxB,CAAqB;QACrB;MACA;MACY,OAAO;QACHD,IAAI,EAAEA,IAAI,CAACG,GAAG,CAAC;QACfO,SAAS,EAAEV,IAAI,CAACG,GAAG,CAAC,CAACO,SAAS;QAC9BT;MAChB,CAAa;IACb;EACA,CAAK,CACD,OAAOc,KAAK,EAAE;IACV,IAAIA,KAAK,CAACC,MAAM,EAAE;MAC1B;MACY,OAAOD,KAAK;IACxB,CAAS,MACI;MACb;MACY,MAAMA,KAAK;IACvB;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}