{"ast":null,"code":"import AsyncStorageDatabase from './AsyncStorageDatabase.mjs';\nimport { OpType, QueryOne } from '../../types.mjs';\nimport { getIndexKeys, traverseModel, keysEqual, DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, validatePredicate, inMemoryPagination, getStorename } from '../../util.mjs';\nimport { StorageAdapterBase } from './StorageAdapterBase.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass AsyncStorageAdapter extends StorageAdapterBase {\n  // no-ops for this adapter\n  async preSetUpChecks() {}\n  async preOpCheck() {}\n  /**\n   * Open AsyncStorage database\n   * Create new DB if one doesn't exist\n   *\n   * Called by `StorageAdapterBase.setUp()`\n   *\n   * @returns AsyncStorageDatabase instance\n   */\n  async initDb() {\n    const db = new AsyncStorageDatabase();\n    await db.init();\n    return db;\n  }\n  async clear() {\n    await this.db.clear();\n    this.db = undefined;\n    this.initPromise = undefined;\n  }\n  async batchSave(modelConstructor, items) {\n    if (items.length === 0) {\n      return [];\n    }\n    const modelName = modelConstructor.name;\n    const namespaceName = this.namespaceResolver(modelConstructor);\n    const storeName = getStorename(namespaceName, modelName);\n    const keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n    const batch = [];\n    for (const item of items) {\n      const model = this.modelInstanceCreator(modelConstructor, item);\n      const connectedModels = traverseModel(modelName, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n      const keyValuesPath = this.getIndexKeyValuesPath(model);\n      const {\n        instance\n      } = connectedModels.find(_ref => {\n        let {\n          instance\n        } = _ref;\n        const instanceKeyValuesPath = this.getIndexKeyValuesPath(instance);\n        return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n      });\n      batch.push(instance);\n    }\n    return await this.db.batchSave(storeName, batch, keys);\n  }\n  async _get(storeName, keyArr) {\n    const itemKeyValuesPath = keyArr.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n    return await this.db.get(itemKeyValuesPath, storeName);\n  }\n  async save(model, condition) {\n    const {\n      storeName,\n      connectionStoreNames,\n      modelKeyValues\n    } = this.saveMetadata(model);\n    const fromDB = await this._get(storeName, modelKeyValues);\n    this.validateSaveCondition(condition, fromDB);\n    const result = [];\n    for await (const resItem of connectionStoreNames) {\n      const {\n        storeName,\n        item,\n        instance,\n        keys\n      } = resItem;\n      const itemKeyValues = keys.map(key => item[key]);\n      const fromDB = await this._get(storeName, itemKeyValues);\n      const opType = fromDB ? OpType.UPDATE : OpType.INSERT;\n      if (keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT) {\n        await this.db.save(item, storeName, keys, itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR));\n        result.push([instance, opType]);\n      }\n    }\n    return result;\n  }\n  async query(modelConstructor, predicate, pagination) {\n    const {\n      storeName,\n      namespaceName,\n      queryByKey,\n      predicates,\n      hasSort,\n      hasPagination\n    } = this.queryMetadata(modelConstructor, predicate, pagination);\n    const records = await (async () => {\n      if (queryByKey) {\n        const keyValues = queryByKey.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n        const record = await this.getByKey(storeName, keyValues);\n        return record ? [record] : [];\n      }\n      if (predicates) {\n        const filtered = await this.filterOnPredicate(storeName, predicates);\n        return this.inMemoryPagination(filtered, pagination);\n      }\n      if (hasSort || hasPagination) {\n        const all = await this.getAll(storeName);\n        return this.inMemoryPagination(all, pagination);\n      }\n      return this.getAll(storeName);\n    })();\n    return await this.load(namespaceName, modelConstructor.name, records);\n  }\n  async getByKey(storeName, keyValuePath) {\n    return await this.db.get(keyValuePath, storeName);\n  }\n  async getAll(storeName) {\n    return await this.db.getAll(storeName);\n  }\n  async filterOnPredicate(storeName, predicates) {\n    const {\n      predicates: predicateObjs,\n      type\n    } = predicates;\n    const all = await this.getAll(storeName);\n    const filtered = predicateObjs ? all.filter(m => validatePredicate(m, type, predicateObjs)) : all;\n    return filtered;\n  }\n  inMemoryPagination(records, pagination) {\n    return inMemoryPagination(records, pagination);\n  }\n  async queryOne(modelConstructor) {\n    let firstOrLast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : QueryOne.FIRST;\n    const storeName = this.getStorenameForModel(modelConstructor);\n    const result = await this.db.getOne(firstOrLast, storeName);\n    return result && this.modelInstanceCreator(modelConstructor, result);\n  }\n  async deleteItem(deleteQueue) {\n    for await (const deleteItem of deleteQueue) {\n      const {\n        storeName,\n        items\n      } = deleteItem;\n      for await (const item of items) {\n        if (item) {\n          if (typeof item === 'object') {\n            const keyValuesPath = this.getIndexKeyValuesPath(item);\n            await this.db.delete(keyValuesPath, storeName);\n          }\n        }\n      }\n    }\n  }\n  //#region platform-specific helper methods\n  /**\n   * Retrieves concatenated primary key values from a model\n   *\n   * @param model\n   * @returns\n   */\n  getIndexKeyValuesPath(model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  }\n}\nvar AsyncStorageAdapter$1 = new AsyncStorageAdapter();\nexport { AsyncStorageAdapter, AsyncStorageAdapter$1 as default };","map":{"version":3,"names":["AsyncStorageAdapter","StorageAdapterBase","preSetUpChecks","preOpCheck","initDb","db","AsyncStorageDatabase","init","clear","undefined","initPromise","batchSave","modelConstructor","items","length","modelName","name","namespaceName","namespaceResolver","storeName","getStorename","keys","getIndexKeys","schema","namespaces","batch","item","model","modelInstanceCreator","connectedModels","traverseModel","getModelConstructorByModelName","keyValuesPath","getIndexKeyValuesPath","instance","find","_ref","instanceKeyValuesPath","keysEqual","push","_get","keyArr","itemKeyValuesPath","join","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","get","save","condition","connectionStoreNames","modelKeyValues","saveMetadata","fromDB","validateSaveCondition","result","resItem","itemKeyValues","map","key","opType","OpType","UPDATE","INSERT","query","predicate","pagination","queryByKey","predicates","hasSort","hasPagination","queryMetadata","records","keyValues","record","getByKey","filtered","filterOnPredicate","inMemoryPagination","all","getAll","load","keyValuePath","predicateObjs","type","filter","m","validatePredicate","queryOne","firstOrLast","arguments","QueryOne","FIRST","getStorenameForModel","getOne","deleteItem","deleteQueue","delete","getIndexKeyValuesFromModel","AsyncStorageAdapter$1"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/storage/adapter/AsyncStorageAdapter.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { OpType, QueryOne, } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, } from '../../util';\nimport { StorageAdapterBase } from './StorageAdapterBase';\nexport class AsyncStorageAdapter extends StorageAdapterBase {\n    // no-ops for this adapter\n    async preSetUpChecks() { }\n    async preOpCheck() { }\n    /**\n     * Open AsyncStorage database\n     * Create new DB if one doesn't exist\n     *\n     * Called by `StorageAdapterBase.setUp()`\n     *\n     * @returns AsyncStorageDatabase instance\n     */\n    async initDb() {\n        const db = new AsyncStorageDatabase();\n        await db.init();\n        return db;\n    }\n    async clear() {\n        await this.db.clear();\n        this.db = undefined;\n        this.initPromise = undefined;\n    }\n    async batchSave(modelConstructor, items) {\n        if (items.length === 0) {\n            return [];\n        }\n        const modelName = modelConstructor.name;\n        const namespaceName = this.namespaceResolver(modelConstructor);\n        const storeName = getStorename(namespaceName, modelName);\n        const keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n        const batch = [];\n        for (const item of items) {\n            const model = this.modelInstanceCreator(modelConstructor, item);\n            const connectedModels = traverseModel(modelName, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            const keyValuesPath = this.getIndexKeyValuesPath(model);\n            const { instance } = connectedModels.find(({ instance }) => {\n                const instanceKeyValuesPath = this.getIndexKeyValuesPath(instance);\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n            });\n            batch.push(instance);\n        }\n        return await this.db.batchSave(storeName, batch, keys);\n    }\n    async _get(storeName, keyArr) {\n        const itemKeyValuesPath = keyArr.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n        return await this.db.get(itemKeyValuesPath, storeName);\n    }\n    async save(model, condition) {\n        const { storeName, connectionStoreNames, modelKeyValues } = this.saveMetadata(model);\n        const fromDB = await this._get(storeName, modelKeyValues);\n        this.validateSaveCondition(condition, fromDB);\n        const result = [];\n        for await (const resItem of connectionStoreNames) {\n            const { storeName, item, instance, keys } = resItem;\n            const itemKeyValues = keys.map(key => item[key]);\n            const fromDB = await this._get(storeName, itemKeyValues);\n            const opType = fromDB ? OpType.UPDATE : OpType.INSERT;\n            if (keysEqual(itemKeyValues, modelKeyValues) ||\n                opType === OpType.INSERT) {\n                await this.db.save(item, storeName, keys, itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR));\n                result.push([instance, opType]);\n            }\n        }\n        return result;\n    }\n    async query(modelConstructor, predicate, pagination) {\n        const { storeName, namespaceName, queryByKey, predicates, hasSort, hasPagination, } = this.queryMetadata(modelConstructor, predicate, pagination);\n        const records = (await (async () => {\n            if (queryByKey) {\n                const keyValues = queryByKey.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                const record = await this.getByKey(storeName, keyValues);\n                return record ? [record] : [];\n            }\n            if (predicates) {\n                const filtered = await this.filterOnPredicate(storeName, predicates);\n                return this.inMemoryPagination(filtered, pagination);\n            }\n            if (hasSort || hasPagination) {\n                const all = await this.getAll(storeName);\n                return this.inMemoryPagination(all, pagination);\n            }\n            return this.getAll(storeName);\n        })());\n        return await this.load(namespaceName, modelConstructor.name, records);\n    }\n    async getByKey(storeName, keyValuePath) {\n        return await this.db.get(keyValuePath, storeName);\n    }\n    async getAll(storeName) {\n        return await this.db.getAll(storeName);\n    }\n    async filterOnPredicate(storeName, predicates) {\n        const { predicates: predicateObjs, type } = predicates;\n        const all = await this.getAll(storeName);\n        const filtered = predicateObjs\n            ? all.filter(m => validatePredicate(m, type, predicateObjs))\n            : all;\n        return filtered;\n    }\n    inMemoryPagination(records, pagination) {\n        return inMemoryPagination(records, pagination);\n    }\n    async queryOne(modelConstructor, firstOrLast = QueryOne.FIRST) {\n        const storeName = this.getStorenameForModel(modelConstructor);\n        const result = await this.db.getOne(firstOrLast, storeName);\n        return result && this.modelInstanceCreator(modelConstructor, result);\n    }\n    async deleteItem(deleteQueue) {\n        for await (const deleteItem of deleteQueue) {\n            const { storeName, items } = deleteItem;\n            for await (const item of items) {\n                if (item) {\n                    if (typeof item === 'object') {\n                        const keyValuesPath = this.getIndexKeyValuesPath(item);\n                        await this.db.delete(keyValuesPath, storeName);\n                    }\n                }\n            }\n        }\n    }\n    //#region platform-specific helper methods\n    /**\n     * Retrieves concatenated primary key values from a model\n     *\n     * @param model\n     * @returns\n     */\n    getIndexKeyValuesPath(model) {\n        return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n    }\n}\nexport default new AsyncStorageAdapter();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}