{"ast":null,"code":"import { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { resolvePrefix } from '../../../utils/resolvePrefix.mjs';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A {@link StorageError} with `error.name` from {@link StorageValidationErrorCode} indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nconst resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n  var _amplify$getConfig$St, _amplify$getConfig, _amplify$libraryOptio, _amplify$libraryOptio2, _ref, _apiOptions$accessLev, _apiOptions$targetIde;\n  // identityId is always cached in memory if forceRefresh is not set. So we can safely make calls here.\n  const {\n    credentials,\n    identityId\n  } = await amplify.Auth.fetchAuthSession({\n    forceRefresh: false\n  });\n  assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n  assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n  const {\n    bucket,\n    region,\n    dangerouslyConnectToHttpEndpointForTesting\n  } = (_amplify$getConfig$St = (_amplify$getConfig = amplify.getConfig()) === null || _amplify$getConfig === void 0 || (_amplify$getConfig = _amplify$getConfig.Storage) === null || _amplify$getConfig === void 0 ? void 0 : _amplify$getConfig.S3) !== null && _amplify$getConfig$St !== void 0 ? _amplify$getConfig$St : {};\n  assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n  assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n  const {\n    defaultAccessLevel,\n    prefixResolver = resolvePrefix,\n    isObjectLockEnabled\n  } = (_amplify$libraryOptio = (_amplify$libraryOptio2 = amplify.libraryOptions) === null || _amplify$libraryOptio2 === void 0 || (_amplify$libraryOptio2 = _amplify$libraryOptio2.Storage) === null || _amplify$libraryOptio2 === void 0 ? void 0 : _amplify$libraryOptio2.S3) !== null && _amplify$libraryOptio !== void 0 ? _amplify$libraryOptio : {};\n  const keyPrefix = await prefixResolver({\n    accessLevel: (_ref = (_apiOptions$accessLev = apiOptions === null || apiOptions === void 0 ? void 0 : apiOptions.accessLevel) !== null && _apiOptions$accessLev !== void 0 ? _apiOptions$accessLev : defaultAccessLevel) !== null && _ref !== void 0 ? _ref : DEFAULT_ACCESS_LEVEL,\n    // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n    targetIdentityId: (apiOptions === null || apiOptions === void 0 ? void 0 : apiOptions.accessLevel) === 'protected' ? (_apiOptions$targetIde = apiOptions === null || apiOptions === void 0 ? void 0 : apiOptions.targetIdentityId) !== null && _apiOptions$targetIde !== void 0 ? _apiOptions$targetIde : identityId : identityId\n  });\n  return {\n    s3Config: {\n      credentials,\n      region,\n      useAccelerateEndpoint: apiOptions === null || apiOptions === void 0 ? void 0 : apiOptions.useAccelerateEndpoint,\n      ...(dangerouslyConnectToHttpEndpointForTesting ? {\n        customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n        forcePathStyle: true\n      } : {})\n    },\n    bucket,\n    keyPrefix,\n    isObjectLockEnabled\n  };\n};\nexport { resolveS3ConfigAndInput };","map":{"version":3,"names":["resolveS3ConfigAndInput","amplify","apiOptions","_amplify$getConfig$St","_amplify$getConfig","_amplify$libraryOptio","_amplify$libraryOptio2","_ref","_apiOptions$accessLev","_apiOptions$targetIde","credentials","identityId","Auth","fetchAuthSession","forceRefresh","assertValidationError","StorageValidationErrorCode","NoCredentials","NoIdentityId","bucket","region","dangerouslyConnectToHttpEndpointForTesting","getConfig","Storage","S3","NoBucket","NoRegion","defaultAccessLevel","prefixResolver","resolvePrefix","isObjectLockEnabled","libraryOptions","keyPrefix","accessLevel","DEFAULT_ACCESS_LEVEL","targetIdentityId","s3Config","useAccelerateEndpoint","customEndpoint","LOCAL_TESTING_S3_ENDPOINT","forcePathStyle"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/storage/src/providers/s3/utils/resolveS3ConfigAndInput.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { resolvePrefix as defaultPrefixResolver } from '../../../utils/resolvePrefix';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants';\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A {@link StorageError} with `error.name` from {@link StorageValidationErrorCode} indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nexport const resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n    // identityId is always cached in memory if forceRefresh is not set. So we can safely make calls here.\n    const { credentials, identityId } = await amplify.Auth.fetchAuthSession({\n        forceRefresh: false,\n    });\n    assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n    assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n    const { bucket, region, dangerouslyConnectToHttpEndpointForTesting } = amplify.getConfig()?.Storage?.S3 ?? {};\n    assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n    assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n    const { defaultAccessLevel, prefixResolver = defaultPrefixResolver, isObjectLockEnabled, } = amplify.libraryOptions?.Storage?.S3 ?? {};\n    const keyPrefix = await prefixResolver({\n        accessLevel: apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL,\n        // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n        targetIdentityId: apiOptions?.accessLevel === 'protected'\n            ? apiOptions?.targetIdentityId ?? identityId\n            : identityId,\n    });\n    return {\n        s3Config: {\n            credentials,\n            region,\n            useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n            ...(dangerouslyConnectToHttpEndpointForTesting\n                ? {\n                    customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n                    forcePathStyle: true,\n                }\n                : {}),\n        },\n        bucket,\n        keyPrefix,\n        isObjectLockEnabled,\n    };\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,uBAAuB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,KAAK;EAAA,IAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,IAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACtE;EACI,MAAM;IAAEC,WAAW;IAAEC;EAAU,CAAE,GAAG,MAAMV,OAAO,CAACW,IAAI,CAACC,gBAAgB,CAAC;IACpEC,YAAY,EAAE;EACtB,CAAK,CAAC;EACFC,qBAAqB,CAAC,CAAC,CAACL,WAAW,EAAEM,0BAA0B,CAACC,aAAa,CAAC;EAC9EF,qBAAqB,CAAC,CAAC,CAACJ,UAAU,EAAEK,0BAA0B,CAACE,YAAY,CAAC;EAC5E,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAA0C,CAAE,IAAAlB,qBAAA,IAAAC,kBAAA,GAAGH,OAAO,CAACqB,SAAS,EAAE,cAAAlB,kBAAA,gBAAAA,kBAAA,GAAnBA,kBAAA,CAAqBmB,OAAO,cAAAnB,kBAAA,uBAA5BA,kBAAA,CAA8BoB,EAAE,cAAArB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC7GY,qBAAqB,CAAC,CAAC,CAACI,MAAM,EAAEH,0BAA0B,CAACS,QAAQ,CAAC;EACpEV,qBAAqB,CAAC,CAAC,CAACK,MAAM,EAAEJ,0BAA0B,CAACU,QAAQ,CAAC;EACpE,MAAM;IAAEC,kBAAkB;IAAEC,cAAc,GAAGC,aAAqB;IAAEC;EAAmB,CAAG,IAAAzB,qBAAA,IAAAC,sBAAA,GAAGL,OAAO,CAAC8B,cAAc,cAAAzB,sBAAA,gBAAAA,sBAAA,GAAtBA,sBAAA,CAAwBiB,OAAO,cAAAjB,sBAAA,uBAA/BA,sBAAA,CAAiCkB,EAAE,cAAAnB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EACtI,MAAM2B,SAAS,GAAG,MAAMJ,cAAc,CAAC;IACnCK,WAAW,GAAA1B,IAAA,IAAAC,qBAAA,GAAEN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE+B,WAAW,cAAAzB,qBAAA,cAAAA,qBAAA,GAAImB,kBAAkB,cAAApB,IAAA,cAAAA,IAAA,GAAI2B,oBAAoB;IAC1F;IACQC,gBAAgB,EAAE,CAAAjC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE+B,WAAW,MAAK,WAAW,IAAAxB,qBAAA,GACnDP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEiC,gBAAgB,cAAA1B,qBAAA,cAAAA,qBAAA,GAAIE,UAAU,GAC1CA;EACd,CAAK,CAAC;EACF,OAAO;IACHyB,QAAQ,EAAE;MACN1B,WAAW;MACXU,MAAM;MACNiB,qBAAqB,EAAEnC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEmC,qBAAqB;MACxD,IAAIhB,0CAA0C,GACxC;QACEiB,cAAc,EAAEC,yBAAyB;QACzCC,cAAc,EAAE;MACpC,CAAiB,GACC,EAAE;IACpB,CAAS;IACDrB,MAAM;IACNa,SAAS;IACTF;EACR,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}