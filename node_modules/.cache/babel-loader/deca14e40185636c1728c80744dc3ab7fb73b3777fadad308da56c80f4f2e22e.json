{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { ReachabilityMonitor } from './datastoreReachability/index.mjs';\nimport { ConsoleLogger } from '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nnew ConsoleLogger('DataStore');\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nclass DataStoreConnectivity {\n  constructor() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n  status() {\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n    return new Observable(observer => {\n      this.observer = observer;\n      // Will be used to forward socket connection changes, enhancing Reachability\n      this.subscription = ReachabilityMonitor.subscribe(_ref => {\n        let {\n          online\n        } = _ref;\n        this.connectionStatus.online = online;\n        const observerResult = {\n          ...this.connectionStatus\n        }; // copyOf status\n        observer.next(observerResult);\n      });\n      return () => {\n        clearTimeout(this.timeout);\n        this.unsubscribe();\n      };\n    });\n  }\n  unsubscribe() {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  }\n  // for consistency with other background processors.\n  async stop() {\n    this.unsubscribe();\n    return;\n  }\n  socketDisconnected() {\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n      this.timeout = setTimeout(() => {\n        const observerResult = {\n          ...this.connectionStatus\n        }; // copyOf status\n        this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  }\n}\nexport { DataStoreConnectivity as default };","map":{"version":3,"names":["ConsoleLogger","RECONNECTING_IN","DataStoreConnectivity","constructor","connectionStatus","online","status","observer","Error","Observable","subscription","ReachabilityMonitor","subscribe","_ref","observerResult","next","clearTimeout","timeout","unsubscribe","stop","socketDisconnected","setTimeout"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/datastore/src/sync/datastoreConnectivity.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable } from 'rxjs';\nimport { ReachabilityMonitor } from './datastoreReachability';\nimport { ConsoleLogger } from '@aws-amplify/core';\nconst logger = new ConsoleLogger('DataStore');\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nexport default class DataStoreConnectivity {\n    constructor() {\n        this.connectionStatus = {\n            online: false,\n        };\n    }\n    status() {\n        if (this.observer) {\n            throw new Error('Subscriber already exists');\n        }\n        return new Observable(observer => {\n            this.observer = observer;\n            // Will be used to forward socket connection changes, enhancing Reachability\n            this.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n                this.connectionStatus.online = online;\n                const observerResult = { ...this.connectionStatus }; // copyOf status\n                observer.next(observerResult);\n            });\n            return () => {\n                clearTimeout(this.timeout);\n                this.unsubscribe();\n            };\n        });\n    }\n    unsubscribe() {\n        if (this.subscription) {\n            clearTimeout(this.timeout);\n            this.subscription.unsubscribe();\n        }\n    }\n    // for consistency with other background processors.\n    async stop() {\n        this.unsubscribe();\n        return;\n    }\n    socketDisconnected() {\n        if (this.observer && typeof this.observer.next === 'function') {\n            this.observer.next({ online: false }); // Notify network issue from the socket\n            this.timeout = setTimeout(() => {\n                const observerResult = { ...this.connectionStatus }; // copyOf status\n                this.observer.next(observerResult);\n            }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n        }\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AAIe,IAAIA,aAAa,CAAC,WAAW;AAC5C,MAAMC,eAAe,GAAG,IAAI,CAAC;AACd,MAAMC,qBAAqB,CAAC;EACvCC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,gBAAgB,GAAG;MACpBC,MAAM,EAAE;IACpB,CAAS;EACT;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACC,QAAQ,EAAE;MACf,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IACxD;IACQ,OAAO,IAAIC,UAAU,CAACF,QAAQ,IAAI;MAC9B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACpC;MACY,IAAI,CAACG,YAAY,GAAGC,mBAAmB,CAACC,SAAS,CAACC,IAAA,IAAgB;QAAA,IAAf;UAAER;QAAM,CAAE,GAAAQ,IAAA;QACzD,IAAI,CAACT,gBAAgB,CAACC,MAAM,GAAGA,MAAM;QACrC,MAAMS,cAAc,GAAG;UAAE,GAAG,IAAI,CAACV;QAAgB,CAAE,CAAC;QACpDG,QAAQ,CAACQ,IAAI,CAACD,cAAc,CAAC;MAC7C,CAAa,CAAC;MACF,OAAO,MAAM;QACTE,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;QAC1B,IAAI,CAACC,WAAW,EAAE;MAClC,CAAa;IACb,CAAS,CAAC;EACV;EACIA,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACR,YAAY,EAAE;MACnBM,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;MAC1B,IAAI,CAACP,YAAY,CAACQ,WAAW,EAAE;IAC3C;EACA;EACA;EACI,MAAMC,IAAIA,CAAA,EAAG;IACT,IAAI,CAACD,WAAW,EAAE;IAClB;EACR;EACIE,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACb,QAAQ,IAAI,OAAO,IAAI,CAACA,QAAQ,CAACQ,IAAI,KAAK,UAAU,EAAE;MAC3D,IAAI,CAACR,QAAQ,CAACQ,IAAI,CAAC;QAAEV,MAAM,EAAE;MAAK,CAAE,CAAC,CAAC;MACtC,IAAI,CAACY,OAAO,GAAGI,UAAU,CAAC,MAAM;QAC5B,MAAMP,cAAc,GAAG;UAAE,GAAG,IAAI,CAACV;QAAgB,CAAE,CAAC;QACpD,IAAI,CAACG,QAAQ,CAACQ,IAAI,CAACD,cAAc,CAAC;MAClD,CAAa,EAAEb,eAAe,CAAC,CAAC;IAChC;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}