{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Drop-in replacement for fast-xml-parser's XmlParser class used in the AWS SDK S3 client XML deserializer. This\n * implementation is not tested against the full xml conformance test suite. It is only tested against the XML responses\n * from S3. This implementation requires the `DOMParser` class in the runtime.\n */\nconst parser = {\n  parse: xmlStr => {\n    const domParser = new DOMParser();\n    const xml = domParser.parseFromString(xmlStr, 'text/xml');\n    const parsedObj = parseXmlNode(xml);\n    const rootKey = Object.keys(parsedObj)[0];\n    return parsedObj[rootKey];\n  }\n};\nconst parseXmlNode = node => {\n  if (isDocumentNode(node)) {\n    return {\n      [node.documentElement.nodeName]: parseXmlNode(node.documentElement)\n    };\n  }\n  if (node.nodeType === Node.TEXT_NODE) {\n    var _node$nodeValue;\n    return (_node$nodeValue = node.nodeValue) === null || _node$nodeValue === void 0 ? void 0 : _node$nodeValue.trim();\n  }\n  if (isElementNode(node)) {\n    // Node like <Location>foo</Location> will be converted to { Location: 'foo' }\n    // instead of { Location: { '#text': 'foo' } }.\n    if (isTextOnlyElementNode(node)) {\n      return node.childNodes[0].nodeValue;\n    }\n    const nodeValue = {};\n    // convert attributes\n    for (const attr of node.attributes) {\n      if (!isNamespaceAttributeName(attr.nodeName)) {\n        nodeValue[attr.nodeName] = attr.nodeValue;\n      }\n    }\n    // convert child nodes\n    if (node.children.length > 0) {\n      for (const child of node.children) {\n        const childValue = parseXmlNode(child);\n        if (childValue === undefined) {\n          continue;\n        }\n        const childName = child.nodeName;\n        if (nodeValue[childName] === undefined) {\n          nodeValue[childName] = childValue;\n        } else if (Array.isArray(nodeValue[childName])) {\n          nodeValue[childName].push(childValue);\n        } else {\n          nodeValue[childName] = [nodeValue[childName], childValue];\n        }\n      }\n    }\n    // Return empty element node as empty string instead of `{}`, which is the default behavior of fast-xml-parser.\n    return Object.keys(nodeValue).length === 0 ? '' : nodeValue;\n  }\n};\nconst isElementNode = node => node.nodeType === Node.ELEMENT_NODE;\nconst isDocumentNode = node => node.nodeType === Node.DOCUMENT_NODE;\nconst isTextOnlyElementNode = node => {\n  var _node$firstChild;\n  return hasOnlyNamespaceAttributes(node) && node.children.length === 0 && ((_node$firstChild = node.firstChild) === null || _node$firstChild === void 0 ? void 0 : _node$firstChild.nodeType) === Node.TEXT_NODE;\n};\nconst hasOnlyNamespaceAttributes = node => {\n  for (const attr of node.attributes) {\n    if (!isNamespaceAttributeName(attr.nodeName)) {\n      return false;\n    }\n  }\n  return true;\n};\nconst isNamespaceAttributeName = name => name === 'xmlns' || name.startsWith('xmlns:');\nexport { parser };","map":{"version":3,"names":["parser","parse","xmlStr","domParser","DOMParser","xml","parseFromString","parsedObj","parseXmlNode","rootKey","Object","keys","node","isDocumentNode","documentElement","nodeName","nodeType","Node","TEXT_NODE","_node$nodeValue","nodeValue","trim","isElementNode","isTextOnlyElementNode","childNodes","attr","attributes","isNamespaceAttributeName","children","length","child","childValue","undefined","childName","Array","isArray","push","ELEMENT_NODE","DOCUMENT_NODE","_node$firstChild","hasOnlyNamespaceAttributes","firstChild","name","startsWith"],"sources":["/Users/raphaperso/Documents/Hub/amplify_test/notes/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/runtime/xmlParser/dom.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Drop-in replacement for fast-xml-parser's XmlParser class used in the AWS SDK S3 client XML deserializer. This\n * implementation is not tested against the full xml conformance test suite. It is only tested against the XML responses\n * from S3. This implementation requires the `DOMParser` class in the runtime.\n */\nexport const parser = {\n    parse: (xmlStr) => {\n        const domParser = new DOMParser();\n        const xml = domParser.parseFromString(xmlStr, 'text/xml');\n        const parsedObj = parseXmlNode(xml);\n        const rootKey = Object.keys(parsedObj)[0];\n        return parsedObj[rootKey];\n    },\n};\nconst parseXmlNode = (node) => {\n    if (isDocumentNode(node)) {\n        return {\n            [node.documentElement.nodeName]: parseXmlNode(node.documentElement),\n        };\n    }\n    if (node.nodeType === Node.TEXT_NODE) {\n        return node.nodeValue?.trim();\n    }\n    if (isElementNode(node)) {\n        // Node like <Location>foo</Location> will be converted to { Location: 'foo' }\n        // instead of { Location: { '#text': 'foo' } }.\n        if (isTextOnlyElementNode(node)) {\n            return node.childNodes[0].nodeValue;\n        }\n        const nodeValue = {};\n        // convert attributes\n        for (const attr of node.attributes) {\n            if (!isNamespaceAttributeName(attr.nodeName)) {\n                nodeValue[attr.nodeName] = attr.nodeValue;\n            }\n        }\n        // convert child nodes\n        if (node.children.length > 0) {\n            for (const child of node.children) {\n                const childValue = parseXmlNode(child);\n                if (childValue === undefined) {\n                    continue;\n                }\n                const childName = child.nodeName;\n                if (nodeValue[childName] === undefined) {\n                    nodeValue[childName] = childValue;\n                }\n                else if (Array.isArray(nodeValue[childName])) {\n                    nodeValue[childName].push(childValue);\n                }\n                else {\n                    nodeValue[childName] = [nodeValue[childName], childValue];\n                }\n            }\n        }\n        // Return empty element node as empty string instead of `{}`, which is the default behavior of fast-xml-parser.\n        return Object.keys(nodeValue).length === 0 ? '' : nodeValue;\n    }\n};\nconst isElementNode = (node) => node.nodeType === Node.ELEMENT_NODE;\nconst isDocumentNode = (node) => node.nodeType === Node.DOCUMENT_NODE;\nconst isTextOnlyElementNode = (node) => hasOnlyNamespaceAttributes(node) &&\n    node.children.length === 0 &&\n    node.firstChild?.nodeType === Node.TEXT_NODE;\nconst hasOnlyNamespaceAttributes = (node) => {\n    for (const attr of node.attributes) {\n        if (!isNamespaceAttributeName(attr.nodeName)) {\n            return false;\n        }\n    }\n    return true;\n};\nconst isNamespaceAttributeName = (name) => name === 'xmlns' || name.startsWith('xmlns:');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}